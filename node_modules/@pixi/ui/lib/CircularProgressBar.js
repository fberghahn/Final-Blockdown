'use strict';

var pixi_js = require('pixi.js');

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class CircularProgressBar extends pixi_js.Container {
  /**
   * Creates a Circular ProgressBar.
   * @param { number } options - Options object to use.
   * @param { ColorSource } options.backgroundColor - Background color.
   * @param { ColorSource } options.fillColor - Fill color.
   * @param { number } options.lineWidth - Line width.
   * @param { number } options.radius - Radius.
   * @param { number } options.value - Progress value.
   * @param { number } options.backgroundAlpha - Background alpha.
   * @param { number } options.fillAlpha - Fill alpha.
   * @param { 'butt' | 'round' | 'square' } options.cap - Line cap.
   */
  constructor(options) {
    super();
    __publicField(this, "_progress", 0);
    __publicField(this, "options");
    __publicField(this, "bgCircle", new pixi_js.Graphics());
    __publicField(this, "fillCircle", new pixi_js.Graphics());
    /** Container, that holds all inner views. */
    __publicField(this, "innerView", new pixi_js.Container());
    this.options = options;
    this.addChild(this.innerView);
    this.innerView.addChild(this.bgCircle, this.fillCircle);
    this.addBackground();
    if (options.value) {
      this.progress = options.value;
    }
  }
  addBackground() {
    const {
      backgroundColor,
      lineWidth,
      radius,
      backgroundAlpha
    } = this.options;
    let alpha = 1;
    if (backgroundAlpha > 0) {
      alpha = backgroundAlpha;
    }
    if (backgroundColor === void 0) {
      alpha = 1e-6;
    }
    this.bgCircle.circle(0, 0, radius).stroke({
      width: lineWidth,
      color: backgroundColor,
      alpha
    });
  }
  /**
   * Set progress value.
   * @param { number } value - Progress value.
   */
  set progress(value) {
    if (value > 100) {
      value = 100;
    }
    if (value < 0) {
      value = 0;
    }
    this._progress = value;
    const {
      lineWidth,
      radius,
      fillColor,
      fillAlpha,
      cap
    } = this.options;
    if (value === 0 && fillAlpha === 0) {
      this.fillCircle.clear();
      return;
    }
    const startAngle = 0;
    const endAngle = 360 / 100 * value;
    this.fillCircle.clear().arc(0, 0, radius, (0 - 90 + startAngle) * pixi_js.DEG_TO_RAD, (0 - 90 + startAngle + endAngle) * pixi_js.DEG_TO_RAD).stroke({
      width: lineWidth,
      color: fillColor,
      cap,
      alpha: fillAlpha
    });
  }
  /**
   * Current progress value.
   * @returns { number } - Progress value.
   */
  get progress() {
    return this._progress;
  }
}

exports.CircularProgressBar = CircularProgressBar;
//# sourceMappingURL=CircularProgressBar.js.map
