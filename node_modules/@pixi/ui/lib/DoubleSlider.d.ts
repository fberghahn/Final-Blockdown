import { Container, FederatedPointerEvent } from 'pixi.js';
import { Signal } from 'typed-signals';
import { DoubleSliderOptions, SliderBase } from './SliderBase';
/**
 * Creates a slider with range selection option.
 * @example
 * const doubleSlider = new DoubleSlider({
 *      bg: 'slider_bg.png',
 *      fill: 'slider_progress.png',
 *      slider1: 'slider.png',
 *      slider2: 'slider.png',
 *  });
 *
 * doubleSlider.onChange.connect((value1, value2) =>
 *     console.log(`New slider range ${value1} - ${value2}`)S
 * );
 */
export declare class DoubleSlider extends SliderBase {
    protected sliderOptions: DoubleSliderOptions;
    protected activeValue: 'value1' | 'value2';
    /** Signal that fires when value have changed. */
    onChange: Signal<(value1: number, value2: number) => void>;
    /** Signal that fires when value is changing. */
    onUpdate: Signal<(value1: number, value2: number) => void>;
    constructor(options: DoubleSliderOptions);
    protected setInitialState(): void;
    protected updateProgress(value1?: number, value2?: number): void;
    protected validateValues(): void;
    /** Returns left value. */
    get value1(): number;
    /** Sets left value. */
    set value1(value1: number);
    /** Returns right value. */
    get value2(): number;
    /** Sets right value. */
    set value2(value2: number);
    protected update(event: FederatedPointerEvent): void;
    protected endUpdate(): void;
    protected change(): void;
    /**
     * Set Slider1 instance.
     * @param value - Container or string with texture name.
     */
    set slider1(value: Container | string);
    /** Get Slider1 instance. */
    get slider1(): Container;
    /**
     * Sets Slider instance.
     * @param value - Container or string with texture name.
     */
    set slider2(value: Container | string);
    /** Get Slider2 instance. */
    get slider2(): Container;
    protected updateSlider1(): void;
    protected updateSlider2(): void;
    /**
     * Sets width of a Sliders background and fill.
     * If nineSliceSprite is set, then width will be set to nineSliceSprite.
     * If nineSliceSprite is not set, then width will control components width as Container.
     * @param value - Width value.
     */
    set width(value: number);
    /** Gets width of a Slider. */
    get width(): number;
    /**
     * Sets height of a Sliders background and fill.
     * If nineSliceSprite is set, then height will be set to nineSliceSprite.
     * If nineSliceSprite is not set, then height will control components height as Container.
     * @param value - Height value.
     */
    set height(value: number);
    /** Gets height of a Slider. */
    get height(): number;
}
//# sourceMappingURL=DoubleSlider.d.ts.map