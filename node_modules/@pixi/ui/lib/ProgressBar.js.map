{"version":3,"file":"ProgressBar.js","sources":["../src/ProgressBar.ts"],"sourcesContent":["import { Container, Graphics, NineSliceSprite as PixiNineSliceSprite, Sprite, Texture } from 'pixi.js';\nimport { getSpriteView } from './utils/helpers/view';\n\ntype FillPaddings = {\n    top?: number;\n    right?: number;\n    bottom?: number;\n    left?: number;\n};\n\nexport type ProgressBarViewType = Sprite | Graphics | string;\nexport type NineSliceSprite = {\n    bg: [number, number, number, number],\n    fill: [number, number, number, number]\n};\n\nexport type ProgressBarOptions = {\n    bg: ProgressBarViewType;\n    fill: ProgressBarViewType;\n    fillPaddings?: FillPaddings;\n    nineSliceSprite?: NineSliceSprite,\n    progress?: number;\n};\n\n/**\n * Creates a ProgressBar.\n * @example\n * new ProgressBar({\n *     bg: 'slider_bg.png',\n *     fill: 'slider.png',\n *     progress: 50,\n * });\n */\nexport class ProgressBar extends Container\n{\n    protected bg!: Sprite | PixiNineSliceSprite | Graphics;\n    protected fill!: Sprite | PixiNineSliceSprite | Graphics;\n    protected fillMask!: PixiNineSliceSprite | Graphics;\n    protected progressStart = 0;\n    protected _progress = 0;\n\n    protected options: ProgressBarOptions;\n\n    /** Container, that holds all inner views. */\n    innerView: Container;\n\n    /** Container, given as a constructor parameter that is a button view. */\n    protected _view: Container;\n\n    /**\n     * Creates a ProgressBar.\n     * @param options - Options.\n     * @param { Sprite | Graphics | string } options.bg - Background of the ProgressBar.\n     * @param { Sprite | Graphics | string } options.fill - Fill of the ProgressBar.\n     * @param { FillPaddings } options.fillPaddings - Fill offsets.\n     * @param { number } options.fillPaddings.top - Fill top offset.\n     * @param { number } options.fillPaddings.right - Fill right offset.\n     * @param { number } options.fillPaddings.bottom - Fill bottom offset.\n     * @param { number } options.fillPaddings.left - Fill left offset.\n     * @param { NineSliceSprite } options.nineSliceSprite - NineSliceSprite values for bg and fill.\n     * @param { Array } options.nineSliceSprite.bg - NineSliceSprite config for bg ([number, number, number, number]).\n     * @param { Array } options.nineSliceSprite.fill - NineSliceSprite config fill ([number, number, number, number]).\n     * @param { number } options.progress - Initial progress value.\n     */\n    constructor(options?: ProgressBarOptions)\n    {\n        super();\n\n        this.options = options;\n\n        this.innerView = new Container();\n        this.addChild(this.innerView);\n\n        if (options?.bg && options?.fill)\n        {\n            this.init(options);\n        }\n    }\n\n    /**\n     * Initialize ProgressBar.\n     * @param root0\n     * @param root0.bg - Background texture.\n     * @param root0.fill - Fill texture.\n     * @param root0.fillPaddings - Fill offset.\n     * @param root0.progress - Initial progress value.\n     */\n    init({ bg, fill, fillPaddings, progress }: ProgressBarOptions)\n    {\n        this.setBackground(bg);\n\n        this.setFill(fill, fillPaddings);\n\n        this.progress = progress;\n    }\n\n    /**\n     * Set bg.\n     * @param bg\n     */\n    setBackground(bg: ProgressBarViewType)\n    {\n        if (this.bg)\n        {\n            this.bg.destroy();\n        }\n\n        if (this.options?.nineSliceSprite)\n        {\n            if (typeof bg === 'string')\n            {\n                this.bg = new PixiNineSliceSprite({\n                    texture: Texture.from(bg),\n                    leftWidth: this.options.nineSliceSprite.bg[0],\n                    topHeight: this.options.nineSliceSprite.bg[1],\n                    rightWidth: this.options.nineSliceSprite.bg[2],\n                    bottomHeight: this.options.nineSliceSprite.bg[3],\n                });\n            }\n            else\n            {\n                console.warn('NineSliceSprite can not be used with views set as Container.');\n            }\n        }\n\n        if (bg instanceof Graphics)\n        {\n            this.bg = bg;\n        }\n\n        if (!this.bg && (typeof bg === 'string' || bg instanceof Sprite))\n        {\n            this.bg = getSpriteView(bg);\n        }\n\n        this.innerView.addChildAt(this.bg, 0);\n    }\n\n    /**\n     * Set fill.\n     * @param fill\n     * @param fillPadding\n     */\n    setFill(fill: ProgressBarViewType, fillPadding?: FillPaddings)\n    {\n        if (this.fill)\n        {\n            this.fill.destroy();\n        }\n\n        // in case if user is trying to use same instance for bg and fill\n        if (this.bg instanceof Sprite && fill === this.bg)\n        {\n            console.warn('Can not use same Sprite instance for bg and fill.');\n\n            return;\n        }\n\n        if (this.options?.nineSliceSprite)\n        {\n            if (typeof fill === 'string')\n            {\n                this.fill = new PixiNineSliceSprite({\n                    texture: Texture.from(fill),\n                    leftWidth: this.options.nineSliceSprite.fill[0],\n                    topHeight: this.options.nineSliceSprite.fill[1],\n                    rightWidth: this.options.nineSliceSprite.fill[2],\n                    bottomHeight: this.options.nineSliceSprite.fill[3],\n                });\n            }\n            else\n            {\n                console.warn('NineSliceSprite can not be used with views set as Container.');\n            }\n        }\n\n        if (!this.fill)\n        {\n            if (fill instanceof Graphics)\n            {\n                this.fill = fill;\n            }\n            else\n            {\n                this.fill = getSpriteView(fill);\n            }\n        }\n\n        this.innerView.addChildAt(this.fill, 1);\n\n        const offsetX = fillPadding?.left ?? 0;\n        const offsetY = fillPadding?.top ?? 0;\n\n        this.fill.x = offsetX;\n        this.fill.y = offsetY;\n\n        if (this.fillMask)\n        {\n            this.fill.mask = null;\n            this.fillMask.destroy();\n        }\n\n        const leftWidth = this.fill.width / 2;\n        const rightWidth = this.fill.width / 2;\n        const topHeight = this.fill.height / 2;\n        const bottomHeight = this.fill.height / 2;\n\n        let texture: Texture = Texture.WHITE;\n\n        if (this.fill instanceof Sprite && this.fill.texture)\n        {\n            texture = this.fill.texture;\n        }\n\n        this.fillMask = new PixiNineSliceSprite({ texture, leftWidth, topHeight, rightWidth, bottomHeight });\n        this.fillMask.position.copyFrom(this.fill);\n\n        this.addChild(this.fillMask);\n        this.fill.mask = this.fillMask;\n    }\n\n    protected validate(progress: number): number\n    {\n        progress = Math.round(progress);\n\n        if (progress < 0)\n        {\n            return 0;\n        }\n\n        if (progress > 100)\n        {\n            return 100;\n        }\n\n        return progress;\n    }\n\n    /** Set current progress percentage value. */\n    set progress(progress: number)\n    {\n        this._progress = this.validate(progress);\n\n        if (!this.fill) return;\n\n        if (this.fillMask)\n        {\n            this.fill.mask = null;\n            this.fillMask.width = (this.fill.width / 100 * (this._progress - this.progressStart));\n            this.fillMask.x = (this.progressStart / 100 * this.fill.width) + this.fill.x;\n            this.fillMask.height = this.fill.height;\n            this.fill.mask = this.fillMask;\n        }\n    }\n\n    /** Return current progress percentage value. */\n    get progress(): number\n    {\n        return this._progress;\n    }\n\n    /**\n     * Sets width of a ProgressBars background and fill.\n     * If nineSliceSprite is set, then width will be set to nineSliceSprite.\n     * If nineSliceSprite is not set, then width will control components width as Container.\n     * @param width - Width value.\n     */\n    override set width(width: number)\n    {\n        if (this.options?.nineSliceSprite)\n        {\n            if (this.bg)\n            {\n                this.bg.width = width;\n            }\n\n            if (this.fill)\n            {\n                const leftPadding = this.options.fillPaddings?.left ?? 0;\n                const rightPadding = this.options.fillPaddings?.right ?? 0;\n\n                this.fill.width = width - leftPadding - rightPadding;\n                this.fillMask.width = width - leftPadding - rightPadding;\n            }\n\n            this.progress = this._progress;\n        }\n        else\n        {\n            super.width = width;\n        }\n    }\n\n    /** Gets width of a ProgressBar. */\n    override get width(): number\n    {\n        return super.width;\n    }\n\n    /**\n     * Sets height of a ProgressBars background and fill.\n     * If nineSliceSprite is set, then height will be set to nineSliceSprite.\n     * If nineSliceSprite is not set, then height will control components height as Container.\n     * @param height - Height value.\n     */\n    override set height(height: number)\n    {\n        if (this.options?.nineSliceSprite)\n        {\n            if (this.bg)\n            {\n                this.bg.height = height;\n            }\n\n            if (this.fill)\n            {\n                const topPadding = this.options.fillPaddings?.top ?? 0;\n                const bottomPadding = this.options.fillPaddings?.bottom ?? 0;\n\n                this.fill.height = height - topPadding - bottomPadding;\n                this.fillMask.height = height - topPadding - bottomPadding;\n            }\n\n            this.progress = this._progress;\n        }\n        else\n        {\n            super.height = height;\n        }\n    }\n\n    /** Gets height of a ProgressBar. */\n    override get height(): number\n    {\n        return super.height;\n    }\n}\n"],"names":["Container","PixiNineSliceSprite","Texture","Graphics","Sprite","getSpriteView"],"mappings":"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"}