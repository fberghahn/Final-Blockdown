'use strict';

var pixi_js = require('pixi.js');
var typedSignals = require('typed-signals');
var FancyButton = require('./FancyButton.js');
var ScrollBox = require('./ScrollBox.js');
var view = require('./utils/helpers/view.js');

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
const defaultVisibleItems = 5;
class Select extends pixi_js.Container {
  constructor(options) {
    super();
    __publicField(this, "view", new pixi_js.Container());
    __publicField(this, "openButton");
    __publicField(this, "closeButton");
    __publicField(this, "openView");
    __publicField(this, "scrollBox");
    /** Selected value ID. */
    __publicField(this, "value");
    /** Fires when selected value is changed. */
    __publicField(this, "onSelect");
    this.addChild(this.view);
    this.onSelect = new typedSignals.Signal();
    if (options) {
      this.init(options);
    }
  }
  /**
   * Initiates Select.
   * @param root0
   * @param root0.closedBG
   * @param root0.textStyle
   * @param root0.items
   * @param root0.openBG
   * @param root0.selected
   * @param root0.selectedTextOffset
   * @param root0.scrollBox
   * @param root0.visibleItems
   * @param root0.TextClass
   */
  init({
    closedBG,
    textStyle,
    TextClass,
    items,
    openBG,
    selected,
    selectedTextOffset,
    scrollBox,
    visibleItems
  }) {
    TextClass = TextClass ?? pixi_js.Text;
    if (this.openView && this.openView !== openBG) {
      this.view.removeChild(this.openView);
    }
    if (!this.openButton) {
      this.openButton = new FancyButton.FancyButton({
        defaultView: view.getView(closedBG),
        text: new TextClass({ text: items?.items ? items.items[0] : "", style: textStyle }),
        textOffset: selectedTextOffset
      });
      this.openButton.onPress.connect(() => this.toggle());
      this.addChild(this.openButton);
    } else {
      this.openButton.defaultView = view.getView(closedBG);
      this.openButton.textView = new TextClass({ text: items?.items ? items.items[0] : "", style: textStyle });
      this.openButton.textOffset = selectedTextOffset;
    }
    if (this.openView !== openBG) {
      this.openView = view.getView(openBG);
      this.view.visible = false;
      this.view.addChild(this.openView);
    }
    if (!this.closeButton) {
      this.closeButton = new FancyButton.FancyButton({
        defaultView: new pixi_js.Graphics().rect(0, 0, this.openButton.width, this.openButton.height).fill({ color: 0, alpha: 1e-5 }),
        text: new TextClass({ text: items?.items ? items.items[0] : "", style: textStyle }),
        textOffset: selectedTextOffset
      });
      this.closeButton.onPress.connect(() => this.toggle());
      this.view.addChild(this.closeButton);
    } else {
      this.closeButton.defaultView = new pixi_js.Graphics().rect(0, 0, this.openButton.width, this.openButton.height).fill({ color: 0, alpha: 1e-5 });
      this.closeButton.textView = new TextClass({ text: items?.items ? items.items[0] : "", style: textStyle });
      this.openButton.textOffset = selectedTextOffset;
    }
    if (!this.scrollBox) {
      this.scrollBox = new ScrollBox.ScrollBox();
      this.view.addChild(this.scrollBox);
    } else {
      this.scrollBox.removeItems();
    }
    this.scrollBox.init({
      type: "vertical",
      elementsMargin: 0,
      width: this.openButton.width,
      height: this.openButton.height * (visibleItems ?? defaultVisibleItems),
      radius: 0,
      padding: 0,
      ...scrollBox
    });
    this.scrollBox.y = this.openButton.height;
    if (scrollBox?.offset) {
      this.scrollBox.x = scrollBox.offset.x ?? 0;
      this.scrollBox.y += scrollBox.offset.y ?? 0;
    }
    this.addItems(items, selected);
  }
  /**
   * Adds items to the dropdown.
   * @param items
   * @param selected
   */
  addItems(items, selected = 0) {
    this.convertItemsToButtons(items).forEach((button, id) => {
      const text = button.text;
      if (id === selected) {
        this.openButton.text = text;
        this.closeButton.text = text;
      }
      button.onPress.connect(() => {
        this.value = id;
        this.onSelect.emit(id, text);
        this.openButton.text = text;
        this.closeButton.text = text;
        this.close();
      });
      this.scrollBox.addItem(button);
    });
  }
  /**
   * Remove items from the dropdown.
   * @param itemID - Item to remove (starting from 0).
   */
  removeItem(itemID) {
    this.scrollBox.removeItem(itemID);
  }
  /** Toggle the select state (open if closed, closes - id open). */
  toggle() {
    this.view.visible = !this.view.visible;
    this.openButton.visible = !this.openButton.visible;
  }
  /** Show dropdown. */
  open() {
    this.view.visible = true;
    this.openButton.visible = false;
  }
  /** Hide dropdown. */
  close() {
    this.view.visible = false;
    this.openButton.visible = true;
  }
  convertItemsToButtons({
    items,
    backgroundColor,
    hoverColor,
    width,
    height,
    textStyle,
    TextClass,
    radius
  }) {
    TextClass = TextClass ?? pixi_js.Text;
    const buttons = [];
    items.forEach((item) => {
      const defaultView = new pixi_js.Graphics().roundRect(0, 0, width, height, radius).fill(backgroundColor);
      const color = hoverColor ?? backgroundColor;
      const hoverView = new pixi_js.Graphics().roundRect(0, 0, width, height, radius).fill(color);
      const text = new TextClass({ text: item, style: textStyle });
      const button = new FancyButton.FancyButton({ defaultView, hoverView, text });
      buttons.push(button);
    });
    return buttons;
  }
}

exports.Select = Select;
//# sourceMappingURL=Select.js.map
