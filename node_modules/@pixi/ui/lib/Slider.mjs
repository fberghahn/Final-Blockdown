import { Signal } from 'typed-signals';
import { SliderBase } from './SliderBase.mjs';

var __defProp = Object.defineProperty;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __publicField = (obj, key, value) => {
  __defNormalProp(obj, typeof key !== "symbol" ? key + "" : key, value);
  return value;
};
class Slider extends SliderBase {
  constructor(options) {
    super({
      slider1: options.slider,
      value1: options.value,
      ...options
    });
    __publicField(this, "sliderOptions");
    /** Fires when value is changing, on every move of slider. */
    __publicField(this, "onUpdate", new Signal());
    /** Fires when value changed, only when slider is released. */
    __publicField(this, "onChange", new Signal());
    this.sliderOptions = options;
    this.value = options.value ?? this.min;
    this.updateSlider();
  }
  /** Return selected value. */
  get value() {
    return this._value1;
  }
  /** Set selected value. */
  set value(value) {
    if (value === this._value1)
      return;
    if (value < this.min)
      value = this.min;
    if (value > this.max)
      value = this.max;
    this._value1 = value;
    this.updateSlider();
    this.onUpdate?.emit(this.value);
  }
  set max(value) {
    super.max = value;
    this.updateSlider();
  }
  get max() {
    return super.max;
  }
  set min(value) {
    super.min = value;
    this.updateSlider();
  }
  get min() {
    return super.min;
  }
  /** Set slider instance ot texture. */
  // eslint-disable-next-line accessor-pairs
  set slider(value) {
    this.slider1 = value;
    this.updateSlider();
  }
  update(event) {
    super.update(event);
    if (!this.dragging)
      return;
    const obj = event.currentTarget;
    const { x } = obj.parent.worldTransform.applyInverse(event.global);
    this.progress = this.validate(x / this.bg?.width * 100);
    this.value = this.min + (this.max - this.min) / 100 * this.progress;
  }
  change() {
    this.onChange?.emit(this.value);
  }
  updateSlider() {
    this.progress = ((this.value ?? this.min) - this.min) / (this.max - this.min) * 100;
    this._slider1.x = this.bg?.width / 100 * this.progress - this._slider1.width / 2;
    this._slider1.y = this.bg?.height / 2;
    if (this.sliderOptions?.showValue) {
      this.value1Text.text = `${Math.round(this.value)}`;
      const sliderPosX = this._slider1.x + this._slider1.width / 2;
      const sliderPosY = this._slider1.y;
      this.value1Text.x = sliderPosX + (this.sliderOptions.valueTextOffset?.x ?? 0);
      this.value1Text.y = sliderPosY + (this.sliderOptions.valueTextOffset?.y ?? 0);
    }
  }
  /**
   * Sets width of a Sliders background and fill.
   * If nineSliceSprite is set, then width will be set to nineSliceSprite.
   * If nineSliceSprite is not set, then width will control components width as Container.
   * @param value - Width value.
   */
  set width(value) {
    super.width = value;
    this.updateSlider();
  }
  /** Gets width of a Slider. */
  get width() {
    return super.width;
  }
  /**
   * Sets height of a Sliders background and fill.
   * If nineSliceSprite is set, then height will be set to nineSliceSprite.
   * If nineSliceSprite is not set, then height will control components height as Container.
   * @param value - Height value.
   */
  set height(value) {
    super.height = value;
    this.updateSlider();
  }
  /** Gets height of a Slider. */
  get height() {
    return super.height;
  }
}

export { Slider };
//# sourceMappingURL=Slider.mjs.map
