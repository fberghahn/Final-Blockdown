{"version":3,"file":"unsafe-eval.js","sources":["../../src/unsafe-eval/shader/generateShaderSyncPolyfill.ts","../../src/unsafe-eval/ubo/uboSyncFunctions.ts","../../src/unsafe-eval/ubo/generateUboSyncPolyfill.ts","../../src/unsafe-eval/uniforms/uniformSyncFunctions.ts","../../src/unsafe-eval/uniforms/generateUniformsSyncPolyfill.ts","../../src/unsafe-eval/init.ts"],"sourcesContent":["import { BufferResource } from '../../rendering/renderers/shared/buffer/BufferResource';\nimport { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup';\nimport { TextureSource } from '../../rendering/renderers/shared/texture/sources/TextureSource';\nimport { TextureStyle } from '../../rendering/renderers/shared/texture/TextureStyle';\n\nimport type { ShaderSyncData, ShaderSyncFunction } from '../../rendering/renderers/gl/shader/GlShaderSystem';\nimport type { WebGLRenderer } from '../../rendering/renderers/gl/WebGLRenderer';\nimport type { Shader } from '../../rendering/renderers/shared/shader/Shader';\n\nexport function generateShaderSyncPolyfill(): ShaderSyncFunction\n{\n    return syncShader;\n}\n\nfunction syncShader(renderer: WebGLRenderer, shader: Shader, syncData: ShaderSyncData): void\n{\n    const gl = renderer.gl;\n    const shaderSystem = renderer.shader;\n    const programData = shaderSystem._getProgramData(shader.glProgram);\n\n    // loop through the groups and sync everything...\n    for (const i in shader.groups)\n    {\n        const bindGroup = shader.groups[i];\n\n        for (const j in bindGroup.resources)\n        {\n            const resource = bindGroup.resources[j];\n\n            if (resource instanceof UniformGroup)\n            {\n                if (resource.ubo)\n                {\n                    shaderSystem.bindUniformBlock(\n                        resource,\n                        shader._uniformBindMap[i as unknown as number][j as unknown as number],\n                        syncData.blockIndex++\n                    );\n                }\n                else\n                {\n                    shaderSystem.updateUniformGroup(resource);\n                }\n            }\n            else if (resource instanceof BufferResource)\n            {\n                shaderSystem.bindUniformBlock(\n                    resource,\n                    shader._uniformBindMap[i as unknown as number][j as unknown as number],\n                    syncData.blockIndex++\n                );\n            }\n            else if (resource instanceof TextureSource)\n            {\n                // TODO really we should not be binding the sampler here too\n                renderer.texture.bind(resource, syncData.textureCount);\n\n                const uniformName = shader._uniformBindMap[i as unknown as number][j as unknown as number];\n\n                const uniformData = programData.uniformData[uniformName];\n\n                if (uniformData)\n                {\n                    if (uniformData.value !== syncData.textureCount)\n                    {\n                        gl.uniform1i(uniformData.location, syncData.textureCount);\n                    }\n\n                    syncData.textureCount++;\n                }\n            }\n            else if (resource instanceof TextureStyle)\n            {\n                // TODO not doing anything here works is assuming that textures are bound with the style they own.\n                // this.renderer.texture.bindSampler(resource, syncData.textureCount);\n            }\n        }\n    }\n}\n","/**\n * This file is auto generated by scripts/utils/autoGenerateUnsafeEvalFunctions.ts\n * Do not edit manually - or you will be sad.\n */\n\nimport type { UNIFORM_TYPES } from '../../rendering/renderers/shared/shader/types';\n\nexport type UboUploadFunction = (name: string, data: Float32Array, offset: number, uv: any, v: any) => void;\nexport const uboParserFunctions: UboUploadFunction[] = [\n    (name: string, data: Float32Array, offset: number, uv: any, _v: any): void =>\n    {\n        const matrix = uv[name].toArray(true);\n\n        data[offset] = matrix[0];\n        data[offset + 1] = matrix[1];\n        data[offset + 2] = matrix[2];\n        data[offset + 4] = matrix[3];\n        data[offset + 5] = matrix[4];\n        data[offset + 6] = matrix[5];\n        data[offset + 8] = matrix[6];\n        data[offset + 9] = matrix[7];\n        data[offset + 10] = matrix[8];\n    },\n    (name: string, data: Float32Array, offset: number, uv: any, v: any): void =>\n    {\n        v = uv[name];\n        data[offset] = v.x;\n        data[offset + 1] = v.y;\n        data[offset + 2] = v.width;\n        data[offset + 3] = v.height;\n    },\n    (name: string, data: Float32Array, offset: number, uv: any, v: any): void =>\n    {\n        v = uv[name];\n        data[offset] = v.x;\n        data[offset + 1] = v.y;\n    },\n    (name: string, data: Float32Array, offset: number, uv: any, v: any): void =>\n    {\n        v = uv[name];\n        data[offset] = v.red;\n        data[offset + 1] = v.green;\n        data[offset + 2] = v.blue;\n        data[offset + 3] = v.alpha;\n    },\n    (name: string, data: Float32Array, offset: number, uv: any, v: any): void =>\n    {\n        v = uv[name];\n        data[offset] = v.red;\n        data[offset + 1] = v.green;\n        data[offset + 2] = v.blue;\n    },\n];\nexport const uboSingleFunctionsWGSL: Record<UNIFORM_TYPES | string, UboUploadFunction> = {\n    f32: (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v;\n    },\n    i32: (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v;\n    },\n    'vec2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n    },\n    'vec3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n    },\n    'vec4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    },\n    'mat2x2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    },\n    'mat3x3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];\n    },\n    'mat4x4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 16; i++)\n        {\n            data[offset + i] = v[i];\n        }\n    },\n    'mat3x2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            data[offset + (((i / 3) | 0) * 4) + (i % 3)] = v[i];\n        }\n    },\n    'mat4x2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 8; i++)\n        {\n            data[offset + (((i / 4) | 0) * 4) + (i % 4)] = v[i];\n        }\n    },\n    'mat2x3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            data[offset + (((i / 2) | 0) * 4) + (i % 2)] = v[i];\n        }\n    },\n    'mat4x3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 12; i++)\n        {\n            data[offset + (((i / 4) | 0) * 4) + (i % 4)] = v[i];\n        }\n    },\n    'mat2x4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 8; i++)\n        {\n            data[offset + (((i / 2) | 0) * 4) + (i % 2)] = v[i];\n        }\n    },\n    'mat3x4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 12; i++)\n        {\n            data[offset + (((i / 3) | 0) * 4) + (i % 3)] = v[i];\n        }\n    },\n};\nexport const uboSingleFunctionsSTD40: Record<UNIFORM_TYPES | string, UboUploadFunction> = {\n    f32: (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v;\n    },\n    i32: (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v;\n    },\n    'vec2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n    },\n    'vec3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n    },\n    'vec4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    },\n    'mat2x2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];\n    },\n    'mat3x3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];\n    },\n    'mat4x4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 16; i++)\n        {\n            data[offset + i] = v[i];\n        }\n    },\n    'mat3x2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            data[offset + (((i / 3) | 0) * 4) + (i % 3)] = v[i];\n        }\n    },\n    'mat4x2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 8; i++)\n        {\n            data[offset + (((i / 4) | 0) * 4) + (i % 4)] = v[i];\n        }\n    },\n    'mat2x3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            data[offset + (((i / 2) | 0) * 4) + (i % 2)] = v[i];\n        }\n    },\n    'mat4x3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 12; i++)\n        {\n            data[offset + (((i / 4) | 0) * 4) + (i % 4)] = v[i];\n        }\n    },\n    'mat2x4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 8; i++)\n        {\n            data[offset + (((i / 2) | 0) * 4) + (i % 2)] = v[i];\n        }\n    },\n    'mat3x4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 12; i++)\n        {\n            data[offset + (((i / 3) | 0) * 4) + (i % 3)] = v[i];\n        }\n    },\n};\n","import { WGSL_TO_STD40_SIZE } from '../../rendering/renderers/gl/shader/utils/createUboElementsSTD40';\nimport { WGSL_ALIGN_SIZE_DATA } from '../../rendering/renderers/gpu/shader/utils/createUboElementsWGSL';\nimport { uniformParsers } from '../../rendering/renderers/shared/shader/utils/uniformParsers';\nimport { uboParserFunctions, uboSingleFunctionsSTD40, uboSingleFunctionsWGSL } from './uboSyncFunctions';\n\nimport type { UboElement, UniformsSyncCallback } from '../../rendering/renderers/shared/shader/types';\nimport type { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup';\nimport type { UboUploadFunction } from './uboSyncFunctions';\n\nexport function generateUboSyncPolyfillSTD40(uboElements: UboElement[]): UniformsSyncCallback\n{\n    return generateUboSyncPolyfill(\n        uboElements,\n        uboSingleFunctionsSTD40,\n        (uboElement: UboElement) =>\n        {\n            const rowSize = Math.max(WGSL_TO_STD40_SIZE[uboElement.data.type] / 16, 1);\n            const elementSize = (uboElement.data.value as Array<number>).length / uboElement.data.size;// size / rowSize;\n            const remainder = (4 - (elementSize % 4)) % 4;\n\n            return (_name: string, data: Float32Array, offset: number, _uv: any, v: any) =>\n            {\n                let t = 0;\n\n                for (let i = 0; i < (uboElement.data.size * rowSize); i++)\n                {\n                    for (let j = 0; j < elementSize; j++)\n                    {\n                        data[offset++] = v[t++];\n                    }\n\n                    offset += remainder;\n                }\n            };\n        }\n\n    );\n}\n\nexport function generateUboSyncPolyfillWGSL(uboElements: UboElement[]): UniformsSyncCallback\n{\n    return generateUboSyncPolyfill(\n        uboElements,\n        uboSingleFunctionsWGSL,\n        (uboElement: UboElement) =>\n        {\n            const { size, align } = WGSL_ALIGN_SIZE_DATA[uboElement.data.type];\n\n            const remainder = (size - align) / 4;\n\n            return (_name: string, data: Float32Array, offset: number, _uv: any, v: any) =>\n            {\n                let t = 0;\n\n                for (let i = 0; i < uboElement.data.size * (size / 4); i++)\n                {\n                    for (let j = 0; j < (size / 4); j++)\n                    {\n                        data[offset++] = v[t++];\n                    }\n                    offset += remainder;\n                }\n            };\n        }\n    );\n}\n\nfunction generateUboSyncPolyfill(\n    uboElements: UboElement[],\n    uboFunctions: Record<string, UboUploadFunction>,\n    arrayUploadFunction: (uboElement: UboElement) => UboUploadFunction\n): UniformsSyncCallback\n{\n    // loop through all the uniforms..\n    const functionMap: Record<string, {offset: number, func: UboUploadFunction}> = {};\n\n    for (const i in uboElements)\n    {\n        const uboElement = uboElements[i];\n        const uniform = uboElement.data;\n\n        let parsed = false;\n\n        functionMap[uniform.name] = {\n            offset: uboElement.offset / 4,\n            func: null\n        };\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            const parser = uniformParsers[j];\n\n            if (uniform.type === parser.type && parser.test(uniform))\n            {\n                functionMap[uniform.name].func = uboParserFunctions[j];\n\n                parsed = true;\n\n                break;\n            }\n        }\n\n        // if not parsed...\n\n        if (!parsed)\n        {\n            if (uniform.size === 1)\n            {\n                functionMap[uniform.name].func = uboFunctions[uniform.type];\n            }\n            else\n            {\n                functionMap[uniform.name].func = arrayUploadFunction(uboElement);\n            }\n        }\n    }\n\n    return (\n        uniforms: UniformGroup,\n        data: Float32Array,\n        offset: number\n    ) =>\n    {\n        for (const i in functionMap)\n        {\n            functionMap[i].func(i, data, offset + functionMap[i].offset, uniforms, uniforms[i as keyof typeof uniforms]);\n        }\n    };\n}\n","/**\n * This file is auto generated by scripts/utils/autoGenerateUnsafeEvalFunctions.ts\n * Do not edit manually - or you will be sad.\n */\n\nimport type { UNIFORM_TYPES } from '../../rendering/renderers/shared/shader/types';\n\nexport type UniformUploadFunction = (name: string, cu: any, cv: any, v: any, ud: any, uv: any, gl: any) => void;\n\nexport const uniformSingleParserFunctions: Record<UNIFORM_TYPES | string, UniformUploadFunction> = {\n    f32(name: string, cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv !== v)\n        {\n            cu.value = v;\n            gl.uniform1f(ud[name].location, v);\n        }\n    },\n    'vec2<f32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2f(ud[name].location, v[0], v[1]);\n        }\n    },\n    'vec3<f32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3f(ud[name].location, v[0], v[1], v[2]);\n        }\n    },\n    'vec4<f32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4f(ud[name].location, v[0], v[1], v[2], v[3]);\n        }\n    },\n    i32(name: string, cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv !== v)\n        {\n            cu.value = v;\n            gl.uniform1i(ud[name].location, v);\n        }\n    },\n    'vec2<i32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(ud[name].location, v[0], v[1]);\n        }\n    },\n    'vec3<i32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(ud[name].location, v[0], v[1], v[2]);\n        }\n    },\n    'vec4<i32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(ud[name].location, v[0], v[1], v[2], v[3]);\n        }\n    },\n    u32(name: string, cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv !== v)\n        {\n            cu.value = v;\n            gl.uniform1ui(ud[name].location, v);\n        }\n    },\n    'vec2<u32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2ui(ud[name].location, v[0], v[1]);\n        }\n    },\n    'vec3<u32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3ui(ud[name].location, v[0], v[1], v[2]);\n        }\n    },\n    'vec4<u32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4ui(ud[name].location, v[0], v[1], v[2], v[3]);\n        }\n    },\n    bool(name: string, cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv !== v)\n        {\n            cu.value = v;\n            gl.uniform1i(ud[name].location, v);\n        }\n    },\n    'vec2<bool>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(ud[name].location, v[0], v[1]);\n        }\n    },\n    'vec3<bool>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(ud[name].location, v[0], v[1], v[2]);\n        }\n    },\n    'vec4<bool>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(ud[name].location, v[0], v[1], v[2], v[3]);\n        }\n    },\n    'mat2x2<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniformMatrix2fv(ud[name].location, false, v);\n    },\n    'mat3x3<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniformMatrix3fv(ud[name].location, false, v);\n    },\n    'mat4x4<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniformMatrix4fv(ud[name].location, false, v);\n    },\n};\n\nexport const uniformArrayParserFunctions: Record<UNIFORM_TYPES | string, UniformUploadFunction> = {\n    f32(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform1fv(ud[name].location, v);\n    },\n    'vec2<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform2fv(ud[name].location, v);\n    },\n    'vec3<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform3fv(ud[name].location, v);\n    },\n    'vec4<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform4fv(ud[name].location, v);\n    },\n    'mat2x2<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniformMatrix2fv(ud[name].location, false, v);\n    },\n    'mat3x3<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniformMatrix3fv(ud[name].location, false, v);\n    },\n    'mat4x4<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniformMatrix4fv(ud[name].location, false, v);\n    },\n    i32(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform1iv(ud[name].location, v);\n    },\n    'vec2<i32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform2iv(ud[name].location, v);\n    },\n    'vec3<i32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform3iv(ud[name].location, v);\n    },\n    'vec4<i32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform4iv(ud[name].location, v);\n    },\n    u32(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform1iv(ud[name].location, v);\n    },\n    'vec2<u32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform2iv(ud[name].location, v);\n    },\n    'vec3<u32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform3iv(ud[name].location, v);\n    },\n    'vec4<u32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform4iv(ud[name].location, v);\n    },\n    bool(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform1iv(ud[name].location, v);\n    },\n    'vec2<bool>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform2iv(ud[name].location, v);\n    },\n    'vec3<bool>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform3iv(ud[name].location, v);\n    },\n    'vec4<bool>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform4iv(ud[name].location, v);\n    },\n};\n\nexport const uniformParserFunctions: UniformUploadFunction[] = [\n    (name: string, _cu: any, _cv: any, _v: any, ud: any, uv: any, gl: any): void =>\n    {\n        gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n    },\n    (name: string, _cu: any, cv: any, v: any, ud: any, uv: any, gl: any): void =>\n    {\n        cv = ud[name].value;\n        v = uv[name];\n        if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height)\n        {\n            cv[0] = v.x;\n            cv[1] = v.y;\n            cv[2] = v.width;\n            cv[3] = v.height;\n            gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n        }\n    },\n    (name: string, _cu: any, cv: any, v: any, ud: any, uv: any, gl: any): void =>\n    {\n        cv = ud[name].value;\n        v = uv[name];\n        if (cv[0] !== v.x || cv[1] !== v.y)\n        {\n            cv[0] = v.x;\n            cv[1] = v.y;\n            gl.uniform2f(ud[name].location, v.x, v.y);\n        }\n    },\n    (name: string, _cu: any, cv: any, v: any, ud: any, uv: any, gl: any): void =>\n    {\n        cv = ud[name].value;\n        v = uv[name];\n        if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha)\n        {\n            cv[0] = v.red;\n            cv[1] = v.green;\n            cv[2] = v.blue;\n            cv[3] = v.alpha;\n            gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n        }\n    },\n    (name: string, _cu: any, cv: any, v: any, ud: any, uv: any, gl: any): void =>\n    {\n        cv = ud[name].value;\n        v = uv[name];\n        if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue)\n        {\n            cv[0] = v.red;\n            cv[1] = v.green;\n            cv[2] = v.blue;\n            gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n        }\n    },\n];\n","import { uniformParsers } from '../../rendering/renderers/shared/shader/utils/uniformParsers';\nimport { uniformArrayParserFunctions, uniformParserFunctions, uniformSingleParserFunctions } from './uniformSyncFunctions';\n\nimport type { GlUniformData } from '../../rendering/renderers/gl/shader/GlProgram';\nimport type { WebGLRenderer } from '../../rendering/renderers/gl/WebGLRenderer';\nimport type { UniformsSyncCallback } from '../../rendering/renderers/shared/shader/types';\nimport type { UniformGroup } from '../../rendering/renderers/shared/shader/UniformGroup';\nimport type { UniformUploadFunction } from './uniformSyncFunctions';\n\nexport function generateUniformsSyncPolyfill(\n    group: UniformGroup,\n    uniformData: Record<string, GlUniformData>\n): UniformsSyncCallback\n{\n    // loop through all the uniforms..\n    const functionMap: Record<string, UniformUploadFunction> = {};\n\n    for (const i in group.uniformStructures)\n    {\n        if (!uniformData[i]) continue;\n\n        const uniform = group.uniformStructures[i];\n\n        let parsed = false;\n\n        for (let j = 0; j < uniformParsers.length; j++)\n        {\n            const parser = uniformParsers[j];\n\n            if (uniform.type === parser.type && parser.test(uniform))\n            {\n                functionMap[i] = uniformParserFunctions[j];\n\n                parsed = true;\n\n                break;\n            }\n        }\n\n        // if not parsed...\n\n        if (!parsed)\n        {\n            const templateType = uniform.size === 1 ? uniformSingleParserFunctions : uniformArrayParserFunctions;\n\n            functionMap[i] = templateType[uniform.type];\n        }\n    }\n\n    return (\n        ud: Record<string, any>,\n        uv: Record<string, any>,\n        renderer: WebGLRenderer) =>\n    {\n        const gl = renderer.gl;\n\n        for (const i in functionMap)\n        {\n            const v = uv[i];\n            const cu = ud[i];\n            const cv = ud[i].value;\n\n            functionMap[i](i, cu, cv, v, ud, uv, gl);\n        }\n    };\n}\n","import { GlUboSystem } from '../rendering/renderers/gl/GlUboSystem';\nimport { GlShaderSystem } from '../rendering/renderers/gl/shader/GlShaderSystem';\nimport { GlUniformGroupSystem } from '../rendering/renderers/gl/shader/GlUniformGroupSystem';\nimport { GpuUboSystem } from '../rendering/renderers/gpu/GpuUboSystem';\nimport { UboSystem } from '../rendering/renderers/shared/shader/UboSystem';\nimport { AbstractRenderer } from '../rendering/renderers/shared/system/AbstractRenderer';\nimport { generateShaderSyncPolyfill } from './shader/generateShaderSyncPolyfill';\nimport {\n    generateUboSyncPolyfillSTD40,\n    generateUboSyncPolyfillWGSL\n} from './ubo/generateUboSyncPolyfill';\nimport { generateUniformsSyncPolyfill } from './uniforms/generateUniformsSyncPolyfill';\n\nfunction selfInstall()\n{\n    Object.assign(AbstractRenderer.prototype, {\n        // override unsafeEval check, as we don't need to use it\n        _unsafeEvalCheck()\n        {\n            // Do nothing, don't throw error\n        },\n    });\n\n    Object.assign(UboSystem.prototype, {\n        // override unsafeEval check, as we don't need to use it\n        _systemCheck()\n        {\n            // Do nothing, don't throw error\n        },\n    });\n\n    Object.assign(GlUniformGroupSystem.prototype, {\n        // use polyfill which avoids eval method\n        _generateUniformsSync: generateUniformsSyncPolyfill,\n    });\n\n    Object.assign(GlUboSystem.prototype, {\n        // use polyfill which avoids eval method\n        _generateUboSync: generateUboSyncPolyfillSTD40,\n    });\n\n    Object.assign(GpuUboSystem.prototype, {\n        // use polyfill which avoids eval method\n        _generateUboSync: generateUboSyncPolyfillWGSL,\n    });\n\n    Object.assign(GlShaderSystem.prototype, {\n        // use polyfill which avoids eval method\n        _generateShaderSync: generateShaderSyncPolyfill,\n    });\n}\n\nselfInstall();\n"],"names":[],"mappings":"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"}