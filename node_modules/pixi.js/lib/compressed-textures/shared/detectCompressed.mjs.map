{"version":3,"file":"detectCompressed.mjs","sources":["../../../src/compressed-textures/shared/detectCompressed.ts"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions';\n// eslint-disable-next-line max-len\nimport { getSupportedCompressedTextureFormats } from '../../rendering/renderers/shared/texture/utils/getSupportedCompressedTextureFormats';\nimport { isWebGLSupported } from '../../utils/browser/isWebGLSupported';\nimport { isWebGPUSupported } from '../../utils/browser/isWebGPUSupported';\nimport { validFormats } from './resolveCompressedTextureUrl';\n\nimport type { FormatDetectionParser } from '../../assets/detections/types';\nimport type { TEXTURE_FORMATS } from '../../rendering/renderers/shared/texture/const';\n\nlet compressedTextureExtensions: string[];\n\nexport const detectCompressed = {\n    extension: {\n        type: ExtensionType.DetectionParser,\n        priority: 2,\n    },\n    test: async (): Promise<boolean> =>\n    {\n        if (await isWebGPUSupported()) return true;\n        if (isWebGLSupported()) return true;\n\n        return false;\n    },\n    add: async (formats: string[]): Promise<string[]> =>\n    {\n        const supportedCompressedTextureFormats = await getSupportedCompressedTextureFormats();\n\n        compressedTextureExtensions = extractExtensionsForCompressedTextureFormats(supportedCompressedTextureFormats);\n\n        return [...compressedTextureExtensions, ...formats];\n    },\n    remove: async (formats: string[]): Promise<string[]> =>\n    {\n        if (compressedTextureExtensions)\n        {\n            return formats.filter((f) => !(f in compressedTextureExtensions));\n        }\n\n        return formats;\n    },\n} as FormatDetectionParser;\n\nfunction extractExtensionsForCompressedTextureFormats(formats: TEXTURE_FORMATS[]): string[]\n{\n    const extensions: string[] = ['basis'];\n\n    const dupeMap: Record<string, boolean> = {};\n\n    formats.forEach((format) =>\n    {\n        const extension = format.split('-')[0];\n\n        if (extension && !dupeMap[extension])\n        {\n            dupeMap[extension] = true;\n            extensions.push(extension);\n        }\n    });\n\n    // sort extensions by priority\n    extensions.sort((a, b) =>\n    {\n        const aIndex = validFormats.indexOf(a);\n        const bIndex = validFormats.indexOf(b);\n\n        if (aIndex === -1)\n        {\n            return 1;\n        }\n        if (bIndex === -1)\n        {\n            return -1;\n        }\n\n        return aIndex - bIndex;\n    });\n\n    return extensions;\n}\n"],"names":[],"mappings":";;;;;;;AAUA,IAAI,2BAAA,CAAA;AAEG,MAAM,gBAAmB,GAAA;AAAA,EAC5B,SAAW,EAAA;AAAA,IACP,MAAM,aAAc,CAAA,eAAA;AAAA,IACpB,QAAU,EAAA,CAAA;AAAA,GACd;AAAA,EACA,MAAM,YACN;AACI,IAAA,IAAI,MAAM,iBAAkB,EAAA;AAAG,MAAO,OAAA,IAAA,CAAA;AACtC,IAAA,IAAI,gBAAiB,EAAA;AAAG,MAAO,OAAA,IAAA,CAAA;AAE/B,IAAO,OAAA,KAAA,CAAA;AAAA,GACX;AAAA,EACA,GAAA,EAAK,OAAO,OACZ,KAAA;AACI,IAAM,MAAA,iCAAA,GAAoC,MAAM,oCAAqC,EAAA,CAAA;AAErF,IAAA,2BAAA,GAA8B,6CAA6C,iCAAiC,CAAA,CAAA;AAE5G,IAAA,OAAO,CAAC,GAAG,2BAA6B,EAAA,GAAG,OAAO,CAAA,CAAA;AAAA,GACtD;AAAA,EACA,MAAA,EAAQ,OAAO,OACf,KAAA;AACI,IAAA,IAAI,2BACJ,EAAA;AACI,MAAA,OAAO,QAAQ,MAAO,CAAA,CAAC,CAAM,KAAA,EAAE,KAAK,2BAA4B,CAAA,CAAA,CAAA;AAAA,KACpE;AAEA,IAAO,OAAA,OAAA,CAAA;AAAA,GACX;AACJ,EAAA;AAEA,SAAS,6CAA6C,OACtD,EAAA;AACI,EAAM,MAAA,UAAA,GAAuB,CAAC,OAAO,CAAA,CAAA;AAErC,EAAA,MAAM,UAAmC,EAAC,CAAA;AAE1C,EAAQ,OAAA,CAAA,OAAA,CAAQ,CAAC,MACjB,KAAA;AACI,IAAA,MAAM,SAAY,GAAA,MAAA,CAAO,KAAM,CAAA,GAAG,EAAE,CAAC,CAAA,CAAA;AAErC,IAAA,IAAI,SAAa,IAAA,CAAC,OAAQ,CAAA,SAAS,CACnC,EAAA;AACI,MAAA,OAAA,CAAQ,SAAS,CAAI,GAAA,IAAA,CAAA;AACrB,MAAA,UAAA,CAAW,KAAK,SAAS,CAAA,CAAA;AAAA,KAC7B;AAAA,GACH,CAAA,CAAA;AAGD,EAAW,UAAA,CAAA,IAAA,CAAK,CAAC,CAAA,EAAG,CACpB,KAAA;AACI,IAAM,MAAA,MAAA,GAAS,YAAa,CAAA,OAAA,CAAQ,CAAC,CAAA,CAAA;AACrC,IAAM,MAAA,MAAA,GAAS,YAAa,CAAA,OAAA,CAAQ,CAAC,CAAA,CAAA;AAErC,IAAA,IAAI,WAAW,CACf,CAAA,EAAA;AACI,MAAO,OAAA,CAAA,CAAA;AAAA,KACX;AACA,IAAA,IAAI,WAAW,CACf,CAAA,EAAA;AACI,MAAO,OAAA,CAAA,CAAA,CAAA;AAAA,KACX;AAEA,IAAA,OAAO,MAAS,GAAA,MAAA,CAAA;AAAA,GACnB,CAAA,CAAA;AAED,EAAO,OAAA,UAAA,CAAA;AACX;;;;"}