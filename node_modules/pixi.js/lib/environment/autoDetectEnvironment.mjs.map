{"version":3,"file":"autoDetectEnvironment.mjs","sources":["../../src/environment/autoDetectEnvironment.ts"],"sourcesContent":["import { extensions, ExtensionType } from '../extensions/Extensions';\n\nconst environments: { name: string; value: { test: () => boolean; load: () => Promise<boolean> } }[] = [];\n\nextensions.handleByNamedList(ExtensionType.Environment, environments);\n\n/**\n * Automatically detects the environment and loads the appropriate extensions.\n * @param manageImports - whether to add the default imports to the bundle\n * @memberof environment\n */\nexport async function autoDetectEnvironment(manageImports: boolean): Promise<void>\n{\n    if (!manageImports) return;\n\n    for (let i = 0; i < environments.length; i++)\n    {\n        const env = environments[i];\n\n        if (env.value.test())\n        {\n            await env.value.load();\n\n            return;\n        }\n    }\n}\n"],"names":[],"mappings":";;;AAEA,MAAM,eAAiG,EAAC,CAAA;AAExG,UAAW,CAAA,iBAAA,CAAkB,aAAc,CAAA,WAAA,EAAa,YAAY,CAAA,CAAA;AAOpE,eAAsB,sBAAsB,aAC5C,EAAA;AACI,EAAA,IAAI,CAAC,aAAA;AAAe,IAAA,OAAA;AAEpB,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,YAAA,CAAa,QAAQ,CACzC,EAAA,EAAA;AACI,IAAM,MAAA,GAAA,GAAM,aAAa,CAAC,CAAA,CAAA;AAE1B,IAAI,IAAA,GAAA,CAAI,KAAM,CAAA,IAAA,EACd,EAAA;AACI,MAAM,MAAA,GAAA,CAAI,MAAM,IAAK,EAAA,CAAA;AAErB,MAAA,OAAA;AAAA,KACJ;AAAA,GACJ;AACJ;;;;"}