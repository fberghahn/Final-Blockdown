{"version":3,"file":"MaskEffectManager.mjs","sources":["../../../src/rendering/mask/MaskEffectManager.ts"],"sourcesContent":["import { extensions, ExtensionType } from '../../extensions/Extensions';\nimport { BigPool } from '../../utils/pool/PoolGroup';\n\nimport type { Effect, EffectConstructor } from '../../scene/container/Effect';\nimport type { PoolItem, PoolItemConstructor } from '../../utils/pool/Pool';\n\ninterface MaskConversionTest\n{\n    test: (item: any) => boolean;\n    maskClass: new (item: any) => Effect & PoolItem;\n}\n\n/**\n * A class that manages the conversion of masks to mask effects.\n * @memberof rendering\n * @ignore\n */\nexport class MaskEffectManagerClass\n{\n    /**\n     * @private\n     */\n    public readonly _effectClasses: EffectConstructor[] = [];\n    private readonly _tests: MaskConversionTest[] = [];\n    private _initialized = false;\n\n    public init()\n    {\n        if (this._initialized) return;\n\n        this._initialized = true;\n\n        this._effectClasses.forEach((test) =>\n        {\n            this.add({\n                test: test.test,\n                maskClass: test\n            });\n        });\n    }\n\n    public add(test: MaskConversionTest)\n    {\n        this._tests.push(test);\n    }\n\n    public getMaskEffect(item: any): Effect\n    {\n        if (!this._initialized) this.init();\n\n        for (let i = 0; i < this._tests.length; i++)\n        {\n            const test = this._tests[i];\n\n            if (test.test(item))\n            {\n                return BigPool.get(test.maskClass as PoolItemConstructor<Effect & PoolItem>, item);\n            }\n        }\n\n        return item;\n    }\n\n    public returnMaskEffect(effect: Effect & PoolItem)\n    {\n        BigPool.return(effect);\n    }\n}\n\nexport const MaskEffectManager = new MaskEffectManagerClass();\n\n// Handle registration of extensions\nextensions\n    .handleByList(ExtensionType.MaskEffect, MaskEffectManager._effectClasses);\n"],"names":[],"mappings":";;;;AAiBO,MAAM,sBACb,CAAA;AAAA,EADO,WAAA,GAAA;AAKH;AAAA;AAAA;AAAA,IAAA,IAAA,CAAgB,iBAAsC,EAAC,CAAA;AACvD,IAAA,IAAA,CAAiB,SAA+B,EAAC,CAAA;AACjD,IAAA,IAAA,CAAQ,YAAe,GAAA,KAAA,CAAA;AAAA,GAAA;AAAA,EAEhB,IACP,GAAA;AACI,IAAA,IAAI,IAAK,CAAA,YAAA;AAAc,MAAA,OAAA;AAEvB,IAAA,IAAA,CAAK,YAAe,GAAA,IAAA,CAAA;AAEpB,IAAK,IAAA,CAAA,cAAA,CAAe,OAAQ,CAAA,CAAC,IAC7B,KAAA;AACI,MAAA,IAAA,CAAK,GAAI,CAAA;AAAA,QACL,MAAM,IAAK,CAAA,IAAA;AAAA,QACX,SAAW,EAAA,IAAA;AAAA,OACd,CAAA,CAAA;AAAA,KACJ,CAAA,CAAA;AAAA,GACL;AAAA,EAEO,IAAI,IACX,EAAA;AACI,IAAK,IAAA,CAAA,MAAA,CAAO,KAAK,IAAI,CAAA,CAAA;AAAA,GACzB;AAAA,EAEO,cAAc,IACrB,EAAA;AACI,IAAA,IAAI,CAAC,IAAK,CAAA,YAAA;AAAc,MAAA,IAAA,CAAK,IAAK,EAAA,CAAA;AAElC,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,MAAA,CAAO,QAAQ,CACxC,EAAA,EAAA;AACI,MAAM,MAAA,IAAA,GAAO,IAAK,CAAA,MAAA,CAAO,CAAC,CAAA,CAAA;AAE1B,MAAI,IAAA,IAAA,CAAK,IAAK,CAAA,IAAI,CAClB,EAAA;AACI,QAAA,OAAO,OAAQ,CAAA,GAAA,CAAI,IAAK,CAAA,SAAA,EAAqD,IAAI,CAAA,CAAA;AAAA,OACrF;AAAA,KACJ;AAEA,IAAO,OAAA,IAAA,CAAA;AAAA,GACX;AAAA,EAEO,iBAAiB,MACxB,EAAA;AACI,IAAA,OAAA,CAAQ,OAAO,MAAM,CAAA,CAAA;AAAA,GACzB;AACJ,CAAA;AAEa,MAAA,iBAAA,GAAoB,IAAI,sBAAuB,GAAA;AAG5D,UAAA,CACK,YAAa,CAAA,aAAA,CAAc,UAAY,EAAA,iBAAA,CAAkB,cAAc,CAAA;;;;"}