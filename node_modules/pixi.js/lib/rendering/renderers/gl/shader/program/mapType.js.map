{"version":3,"file":"mapType.js","sources":["../../../../../../src/rendering/renderers/gl/shader/program/mapType.ts"],"sourcesContent":["import type { Dict } from '../../../../../utils/types';\nimport type { VertexFormat } from '../../../shared/geometry/const';\n\nlet GL_TABLE: Dict<string> = null;\n\nconst GL_TO_GLSL_TYPES: Dict<string> = {\n    FLOAT:       'float',\n    FLOAT_VEC2:  'vec2',\n    FLOAT_VEC3:  'vec3',\n    FLOAT_VEC4:  'vec4',\n\n    INT:         'int',\n    INT_VEC2:    'ivec2',\n    INT_VEC3:    'ivec3',\n    INT_VEC4:    'ivec4',\n\n    UNSIGNED_INT:         'uint',\n    UNSIGNED_INT_VEC2:    'uvec2',\n    UNSIGNED_INT_VEC3:    'uvec3',\n    UNSIGNED_INT_VEC4:    'uvec4',\n\n    BOOL:        'bool',\n    BOOL_VEC2:   'bvec2',\n    BOOL_VEC3:   'bvec3',\n    BOOL_VEC4:   'bvec4',\n\n    FLOAT_MAT2:  'mat2',\n    FLOAT_MAT3:  'mat3',\n    FLOAT_MAT4:  'mat4',\n\n    SAMPLER_2D:              'sampler2D',\n    INT_SAMPLER_2D:          'sampler2D',\n    UNSIGNED_INT_SAMPLER_2D: 'sampler2D',\n    SAMPLER_CUBE:              'samplerCube',\n    INT_SAMPLER_CUBE:          'samplerCube',\n    UNSIGNED_INT_SAMPLER_CUBE: 'samplerCube',\n    SAMPLER_2D_ARRAY:              'sampler2DArray',\n    INT_SAMPLER_2D_ARRAY:          'sampler2DArray',\n    UNSIGNED_INT_SAMPLER_2D_ARRAY: 'sampler2DArray',\n};\n\nconst GLSL_TO_VERTEX_TYPES: Record<string, VertexFormat> = {\n\n    float: 'float32',\n    vec2: 'float32x2',\n    vec3: 'float32x3',\n    vec4: 'float32x4',\n\n    int: 'sint32',\n    ivec2: 'sint32x2',\n    ivec3: 'sint32x3',\n    ivec4: 'sint32x4',\n\n    uint: 'uint32',\n    uvec2: 'uint32x2',\n    uvec3: 'uint32x3',\n    uvec4: 'uint32x4',\n\n    bool: 'uint32',\n    bvec2: 'uint32x2',\n    bvec3: 'uint32x3',\n    bvec4: 'uint32x4',\n};\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nexport function mapType(gl: any, type: number): string\n{\n    if (!GL_TABLE)\n    {\n        const typeNames = Object.keys(GL_TO_GLSL_TYPES);\n\n        GL_TABLE = {};\n\n        for (let i = 0; i < typeNames.length; ++i)\n        {\n            const tn = typeNames[i];\n\n            GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn];\n        }\n    }\n\n    return GL_TABLE[type];\n}\n\nexport function mapGlToVertexFormat(gl: any, type: number): VertexFormat\n{\n    const typeValue = mapType(gl, type);\n\n    return GLSL_TO_VERTEX_TYPES[typeValue] || 'float32';\n}\n"],"names":[],"mappings":";;;AAGA,IAAI,QAAyB,GAAA,IAAA,CAAA;AAE7B,MAAM,gBAAiC,GAAA;AAAA,EACnC,KAAa,EAAA,OAAA;AAAA,EACb,UAAa,EAAA,MAAA;AAAA,EACb,UAAa,EAAA,MAAA;AAAA,EACb,UAAa,EAAA,MAAA;AAAA,EAEb,GAAa,EAAA,KAAA;AAAA,EACb,QAAa,EAAA,OAAA;AAAA,EACb,QAAa,EAAA,OAAA;AAAA,EACb,QAAa,EAAA,OAAA;AAAA,EAEb,YAAsB,EAAA,MAAA;AAAA,EACtB,iBAAsB,EAAA,OAAA;AAAA,EACtB,iBAAsB,EAAA,OAAA;AAAA,EACtB,iBAAsB,EAAA,OAAA;AAAA,EAEtB,IAAa,EAAA,MAAA;AAAA,EACb,SAAa,EAAA,OAAA;AAAA,EACb,SAAa,EAAA,OAAA;AAAA,EACb,SAAa,EAAA,OAAA;AAAA,EAEb,UAAa,EAAA,MAAA;AAAA,EACb,UAAa,EAAA,MAAA;AAAA,EACb,UAAa,EAAA,MAAA;AAAA,EAEb,UAAyB,EAAA,WAAA;AAAA,EACzB,cAAyB,EAAA,WAAA;AAAA,EACzB,uBAAyB,EAAA,WAAA;AAAA,EACzB,YAA2B,EAAA,aAAA;AAAA,EAC3B,gBAA2B,EAAA,aAAA;AAAA,EAC3B,yBAA2B,EAAA,aAAA;AAAA,EAC3B,gBAA+B,EAAA,gBAAA;AAAA,EAC/B,oBAA+B,EAAA,gBAAA;AAAA,EAC/B,6BAA+B,EAAA,gBAAA;AACnC,CAAA,CAAA;AAEA,MAAM,oBAAqD,GAAA;AAAA,EAEvD,KAAO,EAAA,SAAA;AAAA,EACP,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EACN,IAAM,EAAA,WAAA;AAAA,EAEN,GAAK,EAAA,QAAA;AAAA,EACL,KAAO,EAAA,UAAA;AAAA,EACP,KAAO,EAAA,UAAA;AAAA,EACP,KAAO,EAAA,UAAA;AAAA,EAEP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,UAAA;AAAA,EACP,KAAO,EAAA,UAAA;AAAA,EACP,KAAO,EAAA,UAAA;AAAA,EAEP,IAAM,EAAA,QAAA;AAAA,EACN,KAAO,EAAA,UAAA;AAAA,EACP,KAAO,EAAA,UAAA;AAAA,EACP,KAAO,EAAA,UAAA;AACX,CAAA,CAAA;AAGgB,SAAA,OAAA,CAAQ,IAAS,IACjC,EAAA;AACI,EAAA,IAAI,CAAC,QACL,EAAA;AACI,IAAM,MAAA,SAAA,GAAY,MAAO,CAAA,IAAA,CAAK,gBAAgB,CAAA,CAAA;AAE9C,IAAA,QAAA,GAAW,EAAC,CAAA;AAEZ,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,SAAU,CAAA,MAAA,EAAQ,EAAE,CACxC,EAAA;AACI,MAAM,MAAA,EAAA,GAAK,UAAU,CAAC,CAAA,CAAA;AAEtB,MAAA,QAAA,CAAS,EAAG,CAAA,EAAE,CAAC,CAAA,GAAI,iBAAiB,EAAE,CAAA,CAAA;AAAA,KAC1C;AAAA,GACJ;AAEA,EAAA,OAAO,SAAS,IAAI,CAAA,CAAA;AACxB,CAAA;AAEgB,SAAA,mBAAA,CAAoB,IAAS,IAC7C,EAAA;AACI,EAAM,MAAA,SAAA,GAAY,OAAQ,CAAA,EAAA,EAAI,IAAI,CAAA,CAAA;AAElC,EAAO,OAAA,oBAAA,CAAqB,SAAS,CAAK,IAAA,SAAA,CAAA;AAC9C;;;;;"}