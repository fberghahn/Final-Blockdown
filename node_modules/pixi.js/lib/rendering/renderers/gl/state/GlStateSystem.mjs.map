{"version":3,"file":"GlStateSystem.mjs","sources":["../../../../../src/rendering/renderers/gl/state/GlStateSystem.ts"],"sourcesContent":["import { ExtensionType } from '../../../../extensions/Extensions';\nimport { State } from '../../shared/state/State';\nimport { mapWebGLBlendModesToPixi } from './mapWebGLBlendModesToPixi';\n\nimport type { BLEND_MODES } from '../../shared/state/const';\nimport type { System } from '../../shared/system/System';\nimport type { GlRenderingContext } from '../context/GlRenderingContext';\n\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\n\n/**\n * System plugin to the renderer to manage WebGL state machines\n * @memberof rendering\n */\nexport class GlStateSystem implements System\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLSystem,\n        ],\n        name: 'state',\n    } as const;\n\n    /**\n     * State ID\n     * @readonly\n     */\n    public stateId: number;\n\n    /**\n     * Polygon offset\n     * @readonly\n     */\n    public polygonOffset: number;\n\n    /**\n     * Blend mode\n     * @default 'none'\n     * @readonly\n     */\n    public blendMode: BLEND_MODES;\n\n    /** Whether current blend equation is different */\n    protected _blendEq: boolean;\n\n    /**\n     * GL context\n     * @member {WebGLRenderingContext}\n     * @readonly\n     */\n    protected gl: GlRenderingContext;\n\n    protected blendModesMap: Record<BLEND_MODES, number[]>;\n\n    /**\n     * Collection of calls\n     * @member {Function[]}\n     */\n    protected readonly map: ((value: boolean) => void)[];\n\n    /**\n     * Collection of check calls\n     * @member {Function[]}\n     */\n    protected readonly checks: ((system: this, state: State) => void)[];\n\n    /**\n     * Default WebGL State\n     * @readonly\n     */\n    protected defaultState: State;\n\n    constructor()\n    {\n        this.gl = null;\n\n        this.stateId = 0;\n        this.polygonOffset = 0;\n        this.blendMode = 'none';\n\n        this._blendEq = false;\n\n        // map functions for when we set state..\n        this.map = [];\n        this.map[BLEND] = this.setBlend;\n        this.map[OFFSET] = this.setOffset;\n        this.map[CULLING] = this.setCullFace;\n        this.map[DEPTH_TEST] = this.setDepthTest;\n        this.map[WINDING] = this.setFrontFace;\n        this.map[DEPTH_MASK] = this.setDepthMask;\n\n        this.checks = [];\n\n        this.defaultState = State.for2d();\n    }\n\n    protected contextChange(gl: GlRenderingContext): void\n    {\n        this.gl = gl;\n\n        this.blendModesMap = mapWebGLBlendModesToPixi(gl);\n\n        this.reset();\n    }\n\n    /**\n     * Sets the current state\n     * @param {*} state - The state to set.\n     */\n    public set(state: State): void\n    {\n        state = state || this.defaultState;\n\n        // TODO maybe to an object check? ( this.state === state )?\n        if (this.stateId !== state.data)\n        {\n            let diff = this.stateId ^ state.data;\n            let i = 0;\n\n            // order from least to most common\n            while (diff)\n            {\n                if (diff & 1)\n                {\n                    // state change!\n                    this.map[i].call(this, !!(state.data & (1 << i)));\n                }\n\n                diff = diff >> 1;\n                i++;\n            }\n\n            this.stateId = state.data;\n        }\n\n        // based on the above settings we check for specific modes..\n        // for example if blend is active we check and set the blend modes\n        // or of polygon offset is active we check the poly depth.\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n    }\n\n    /**\n     * Sets the state, when previous state is unknown.\n     * @param {*} state - The state to set\n     */\n    public forceState(state: State): void\n    {\n        state = state || this.defaultState;\n        for (let i = 0; i < this.map.length; i++)\n        {\n            this.map[i].call(this, !!(state.data & (1 << i)));\n        }\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n\n        this.stateId = state.data;\n    }\n\n    /**\n     * Sets whether to enable or disable blending.\n     * @param value - Turn on or off WebGl blending.\n     */\n    public setBlend(value: boolean): void\n    {\n        this._updateCheck(GlStateSystem._checkBlendMode, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);\n    }\n\n    /**\n     * Sets whether to enable or disable polygon offset fill.\n     * @param value - Turn on or off webgl polygon offset testing.\n     */\n    public setOffset(value: boolean): void\n    {\n        this._updateCheck(GlStateSystem._checkPolygonOffset, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.POLYGON_OFFSET_FILL);\n    }\n\n    /**\n     * Sets whether to enable or disable depth test.\n     * @param value - Turn on or off webgl depth testing.\n     */\n    public setDepthTest(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);\n    }\n\n    /**\n     * Sets whether to enable or disable depth mask.\n     * @param value - Turn on or off webgl depth mask.\n     */\n    public setDepthMask(value: boolean): void\n    {\n        this.gl.depthMask(value);\n    }\n\n    /**\n     * Sets whether to enable or disable cull face.\n     * @param {boolean} value - Turn on or off webgl cull face.\n     */\n    public setCullFace(value: boolean): void\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);\n    }\n\n    /**\n     * Sets the gl front face.\n     * @param {boolean} value - true is clockwise and false is counter-clockwise\n     */\n    public setFrontFace(value: boolean): void\n    {\n        this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);\n    }\n\n    /**\n     * Sets the blend mode.\n     * @param {number} value - The blend mode to set to.\n     */\n    public setBlendMode(value: BLEND_MODES): void\n    {\n        if (!this.blendModesMap[value])\n        {\n            value = 'normal';\n        }\n\n        if (value === this.blendMode)\n        {\n            return;\n        }\n\n        this.blendMode = value;\n\n        const mode = this.blendModesMap[value];\n        const gl = this.gl;\n\n        if (mode.length === 2)\n        {\n            gl.blendFunc(mode[0], mode[1]);\n        }\n        else\n        {\n            gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n        }\n\n        if (mode.length === 6)\n        {\n            this._blendEq = true;\n            gl.blendEquationSeparate(mode[4], mode[5]);\n        }\n        else if (this._blendEq)\n        {\n            this._blendEq = false;\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n        }\n    }\n\n    /**\n     * Sets the polygon offset.\n     * @param {number} value - the polygon offset\n     * @param {number} scale - the polygon offset scale\n     */\n    public setPolygonOffset(value: number, scale: number): void\n    {\n        this.gl.polygonOffset(value, scale);\n    }\n\n    // used\n    /** Resets all the logic and disables the VAOs. */\n    public reset(): void\n    {\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        this.forceState(this.defaultState);\n\n        this._blendEq = true;\n        // setting to '' means the blend mode will be set as soon as we set the first blend mode when rendering!\n        this.blendMode = '' as BLEND_MODES;\n        this.setBlendMode('normal');\n    }\n\n    /**\n     * Checks to see which updates should be checked based on which settings have been activated.\n     *\n     * For example, if blend is enabled then we should check the blend modes each time the state is changed\n     * or if polygon fill is activated then we need to check if the polygon offset changes.\n     * The idea is that we only check what we have too.\n     * @param func - the checking function to add or remove\n     * @param value - should the check function be added or removed.\n     */\n    private _updateCheck(func: (system: this, state: State) => void, value: boolean): void\n    {\n        const index = this.checks.indexOf(func);\n\n        if (value && index === -1)\n        {\n            this.checks.push(func);\n        }\n        else if (!value && index !== -1)\n        {\n            this.checks.splice(index, 1);\n        }\n    }\n\n    /**\n     * A private little wrapper function that we call to check the blend mode.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static _checkBlendMode(system: GlStateSystem, state: State): void\n    {\n        system.setBlendMode(state.blendMode);\n    }\n\n    /**\n     * A private little wrapper function that we call to check the polygon offset.\n     * @param system - the System to perform the state check on\n     * @param state - the state that the blendMode will pulled from\n     */\n    private static _checkPolygonOffset(system: GlStateSystem, state: State): void\n    {\n        system.setPolygonOffset(1, state.polygonOffset);\n    }\n\n    /**\n     * @ignore\n     */\n    public destroy(): void\n    {\n        this.gl = null;\n        this.checks.length = 0;\n    }\n}\n"],"names":[],"mappings":";;;;;AAQA,MAAM,KAAQ,GAAA,CAAA,CAAA;AACd,MAAM,MAAS,GAAA,CAAA,CAAA;AACf,MAAM,OAAU,GAAA,CAAA,CAAA;AAChB,MAAM,UAAa,GAAA,CAAA,CAAA;AACnB,MAAM,OAAU,GAAA,CAAA,CAAA;AAChB,MAAM,UAAa,GAAA,CAAA,CAAA;AAMZ,MAAM,cAAA,GAAN,MAAM,cACb,CAAA;AAAA,EA0DI,WACA,GAAA;AACI,IAAA,IAAA,CAAK,EAAK,GAAA,IAAA,CAAA;AAEV,IAAA,IAAA,CAAK,OAAU,GAAA,CAAA,CAAA;AACf,IAAA,IAAA,CAAK,aAAgB,GAAA,CAAA,CAAA;AACrB,IAAA,IAAA,CAAK,SAAY,GAAA,MAAA,CAAA;AAEjB,IAAA,IAAA,CAAK,QAAW,GAAA,KAAA,CAAA;AAGhB,IAAA,IAAA,CAAK,MAAM,EAAC,CAAA;AACZ,IAAK,IAAA,CAAA,GAAA,CAAI,KAAK,CAAA,GAAI,IAAK,CAAA,QAAA,CAAA;AACvB,IAAK,IAAA,CAAA,GAAA,CAAI,MAAM,CAAA,GAAI,IAAK,CAAA,SAAA,CAAA;AACxB,IAAK,IAAA,CAAA,GAAA,CAAI,OAAO,CAAA,GAAI,IAAK,CAAA,WAAA,CAAA;AACzB,IAAK,IAAA,CAAA,GAAA,CAAI,UAAU,CAAA,GAAI,IAAK,CAAA,YAAA,CAAA;AAC5B,IAAK,IAAA,CAAA,GAAA,CAAI,OAAO,CAAA,GAAI,IAAK,CAAA,YAAA,CAAA;AACzB,IAAK,IAAA,CAAA,GAAA,CAAI,UAAU,CAAA,GAAI,IAAK,CAAA,YAAA,CAAA;AAE5B,IAAA,IAAA,CAAK,SAAS,EAAC,CAAA;AAEf,IAAK,IAAA,CAAA,YAAA,GAAe,MAAM,KAAM,EAAA,CAAA;AAAA,GACpC;AAAA,EAEU,cAAc,EACxB,EAAA;AACI,IAAA,IAAA,CAAK,EAAK,GAAA,EAAA,CAAA;AAEV,IAAK,IAAA,CAAA,aAAA,GAAgB,yBAAyB,EAAE,CAAA,CAAA;AAEhD,IAAA,IAAA,CAAK,KAAM,EAAA,CAAA;AAAA,GACf;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,IAAI,KACX,EAAA;AACI,IAAA,KAAA,GAAQ,SAAS,IAAK,CAAA,YAAA,CAAA;AAGtB,IAAI,IAAA,IAAA,CAAK,OAAY,KAAA,KAAA,CAAM,IAC3B,EAAA;AACI,MAAI,IAAA,IAAA,GAAO,IAAK,CAAA,OAAA,GAAU,KAAM,CAAA,IAAA,CAAA;AAChC,MAAA,IAAI,CAAI,GAAA,CAAA,CAAA;AAGR,MAAA,OAAO,IACP,EAAA;AACI,QAAA,IAAI,OAAO,CACX,EAAA;AAEI,UAAK,IAAA,CAAA,GAAA,CAAI,CAAC,CAAA,CAAE,IAAK,CAAA,IAAA,EAAM,CAAC,EAAE,KAAA,CAAM,IAAQ,GAAA,CAAA,IAAK,CAAG,CAAA,CAAA,CAAA;AAAA,SACpD;AAEA,QAAA,IAAA,GAAO,IAAQ,IAAA,CAAA,CAAA;AACf,QAAA,CAAA,EAAA,CAAA;AAAA,OACJ;AAEA,MAAA,IAAA,CAAK,UAAU,KAAM,CAAA,IAAA,CAAA;AAAA,KACzB;AAKA,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,MAAA,CAAO,QAAQ,CACxC,EAAA,EAAA;AACI,MAAA,IAAA,CAAK,MAAO,CAAA,CAAC,CAAE,CAAA,IAAA,EAAM,KAAK,CAAA,CAAA;AAAA,KAC9B;AAAA,GACJ;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,WAAW,KAClB,EAAA;AACI,IAAA,KAAA,GAAQ,SAAS,IAAK,CAAA,YAAA,CAAA;AACtB,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,GAAA,CAAI,QAAQ,CACrC,EAAA,EAAA;AACI,MAAK,IAAA,CAAA,GAAA,CAAI,CAAC,CAAA,CAAE,IAAK,CAAA,IAAA,EAAM,CAAC,EAAE,KAAA,CAAM,IAAQ,GAAA,CAAA,IAAK,CAAG,CAAA,CAAA,CAAA;AAAA,KACpD;AACA,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,MAAA,CAAO,QAAQ,CACxC,EAAA,EAAA;AACI,MAAA,IAAA,CAAK,MAAO,CAAA,CAAC,CAAE,CAAA,IAAA,EAAM,KAAK,CAAA,CAAA;AAAA,KAC9B;AAEA,IAAA,IAAA,CAAK,UAAU,KAAM,CAAA,IAAA,CAAA;AAAA,GACzB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,SAAS,KAChB,EAAA;AACI,IAAK,IAAA,CAAA,YAAA,CAAa,cAAc,CAAA,eAAA,EAAiB,KAAK,CAAA,CAAA;AAEtD,IAAA,IAAA,CAAK,GAAG,KAAQ,GAAA,QAAA,GAAW,SAAS,CAAE,CAAA,IAAA,CAAK,GAAG,KAAK,CAAA,CAAA;AAAA,GACvD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,UAAU,KACjB,EAAA;AACI,IAAK,IAAA,CAAA,YAAA,CAAa,cAAc,CAAA,mBAAA,EAAqB,KAAK,CAAA,CAAA;AAE1D,IAAA,IAAA,CAAK,GAAG,KAAQ,GAAA,QAAA,GAAW,SAAS,CAAE,CAAA,IAAA,CAAK,GAAG,mBAAmB,CAAA,CAAA;AAAA,GACrE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,aAAa,KACpB,EAAA;AACI,IAAA,IAAA,CAAK,GAAG,KAAQ,GAAA,QAAA,GAAW,SAAS,CAAE,CAAA,IAAA,CAAK,GAAG,UAAU,CAAA,CAAA;AAAA,GAC5D;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,aAAa,KACpB,EAAA;AACI,IAAK,IAAA,CAAA,EAAA,CAAG,UAAU,KAAK,CAAA,CAAA;AAAA,GAC3B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,YAAY,KACnB,EAAA;AACI,IAAA,IAAA,CAAK,GAAG,KAAQ,GAAA,QAAA,GAAW,SAAS,CAAE,CAAA,IAAA,CAAK,GAAG,SAAS,CAAA,CAAA;AAAA,GAC3D;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,aAAa,KACpB,EAAA;AACI,IAAA,IAAA,CAAK,GAAG,SAAU,CAAA,IAAA,CAAK,GAAG,KAAQ,GAAA,IAAA,GAAO,KAAK,CAAC,CAAA,CAAA;AAAA,GACnD;AAAA;AAAA;AAAA;AAAA;AAAA,EAMO,aAAa,KACpB,EAAA;AACI,IAAA,IAAI,CAAC,IAAA,CAAK,aAAc,CAAA,KAAK,CAC7B,EAAA;AACI,MAAQ,KAAA,GAAA,QAAA,CAAA;AAAA,KACZ;AAEA,IAAI,IAAA,KAAA,KAAU,KAAK,SACnB,EAAA;AACI,MAAA,OAAA;AAAA,KACJ;AAEA,IAAA,IAAA,CAAK,SAAY,GAAA,KAAA,CAAA;AAEjB,IAAM,MAAA,IAAA,GAAO,IAAK,CAAA,aAAA,CAAc,KAAK,CAAA,CAAA;AACrC,IAAA,MAAM,KAAK,IAAK,CAAA,EAAA,CAAA;AAEhB,IAAI,IAAA,IAAA,CAAK,WAAW,CACpB,EAAA;AACI,MAAA,EAAA,CAAG,UAAU,IAAK,CAAA,CAAC,CAAG,EAAA,IAAA,CAAK,CAAC,CAAC,CAAA,CAAA;AAAA,KAGjC,MAAA;AACI,MAAA,EAAA,CAAG,iBAAkB,CAAA,IAAA,CAAK,CAAC,CAAA,EAAG,IAAK,CAAA,CAAC,CAAG,EAAA,IAAA,CAAK,CAAC,CAAA,EAAG,IAAK,CAAA,CAAC,CAAC,CAAA,CAAA;AAAA,KAC3D;AAEA,IAAI,IAAA,IAAA,CAAK,WAAW,CACpB,EAAA;AACI,MAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAA;AAChB,MAAA,EAAA,CAAG,sBAAsB,IAAK,CAAA,CAAC,CAAG,EAAA,IAAA,CAAK,CAAC,CAAC,CAAA,CAAA;AAAA,KAC7C,MAAA,IACS,KAAK,QACd,EAAA;AACI,MAAA,IAAA,CAAK,QAAW,GAAA,KAAA,CAAA;AAChB,MAAA,EAAA,CAAG,qBAAsB,CAAA,EAAA,CAAG,QAAU,EAAA,EAAA,CAAG,QAAQ,CAAA,CAAA;AAAA,KACrD;AAAA,GACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,gBAAA,CAAiB,OAAe,KACvC,EAAA;AACI,IAAK,IAAA,CAAA,EAAA,CAAG,aAAc,CAAA,KAAA,EAAO,KAAK,CAAA,CAAA;AAAA,GACtC;AAAA;AAAA;AAAA,EAIO,KACP,GAAA;AACI,IAAA,IAAA,CAAK,EAAG,CAAA,WAAA,CAAY,IAAK,CAAA,EAAA,CAAG,qBAAqB,KAAK,CAAA,CAAA;AAEtD,IAAK,IAAA,CAAA,UAAA,CAAW,KAAK,YAAY,CAAA,CAAA;AAEjC,IAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAA;AAEhB,IAAA,IAAA,CAAK,SAAY,GAAA,EAAA,CAAA;AACjB,IAAA,IAAA,CAAK,aAAa,QAAQ,CAAA,CAAA;AAAA,GAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWQ,YAAA,CAAa,MAA4C,KACjE,EAAA;AACI,IAAA,MAAM,KAAQ,GAAA,IAAA,CAAK,MAAO,CAAA,OAAA,CAAQ,IAAI,CAAA,CAAA;AAEtC,IAAI,IAAA,KAAA,IAAS,UAAU,CACvB,CAAA,EAAA;AACI,MAAK,IAAA,CAAA,MAAA,CAAO,KAAK,IAAI,CAAA,CAAA;AAAA,KAEhB,MAAA,IAAA,CAAC,KAAS,IAAA,KAAA,KAAU,CAC7B,CAAA,EAAA;AACI,MAAK,IAAA,CAAA,MAAA,CAAO,MAAO,CAAA,KAAA,EAAO,CAAC,CAAA,CAAA;AAAA,KAC/B;AAAA,GACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAe,eAAgB,CAAA,MAAA,EAAuB,KACtD,EAAA;AACI,IAAO,MAAA,CAAA,YAAA,CAAa,MAAM,SAAS,CAAA,CAAA;AAAA,GACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,OAAe,mBAAoB,CAAA,MAAA,EAAuB,KAC1D,EAAA;AACI,IAAO,MAAA,CAAA,gBAAA,CAAiB,CAAG,EAAA,KAAA,CAAM,aAAa,CAAA,CAAA;AAAA,GAClD;AAAA;AAAA;AAAA;AAAA,EAKO,OACP,GAAA;AACI,IAAA,IAAA,CAAK,EAAK,GAAA,IAAA,CAAA;AACV,IAAA,IAAA,CAAK,OAAO,MAAS,GAAA,CAAA,CAAA;AAAA,GACzB;AACJ,CAAA,CAAA;AAAA;AArUa,cAAA,CAGK,SAAY,GAAA;AAAA,EACtB,IAAM,EAAA;AAAA,IACF,aAAc,CAAA,WAAA;AAAA,GAClB;AAAA,EACA,IAAM,EAAA,OAAA;AACV,CAAA,CAAA;AARG,IAAM,aAAN,GAAA;;;;"}