{"version":3,"file":"mapFormatToGlType.mjs","sources":["../../../../../../src/rendering/renderers/gl/texture/utils/mapFormatToGlType.ts"],"sourcesContent":["import type { GlRenderingContext } from '../../context/GlRenderingContext';\n\n/**\n * Returns a lookup table that maps each type-format pair to a compatible internal format.\n * @function mapTypeAndFormatToInternalFormat\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @returns Lookup table.\n */\nexport function mapFormatToGlType(gl: GlRenderingContext): Record<string, number>\n{\n    return {\n        // 8-bit formats\n        r8unorm: gl.UNSIGNED_BYTE,\n        r8snorm: gl.BYTE,\n        r8uint: gl.UNSIGNED_BYTE,\n        r8sint: gl.BYTE,\n\n        // 16-bit formats\n        r16uint: gl.UNSIGNED_SHORT,\n        r16sint: gl.SHORT,\n        r16float: gl.HALF_FLOAT,\n        rg8unorm: gl.UNSIGNED_BYTE,\n        rg8snorm: gl.BYTE,\n        rg8uint: gl.UNSIGNED_BYTE,\n        rg8sint: gl.BYTE,\n\n        // 32-bit formats\n        r32uint: gl.UNSIGNED_INT,\n        r32sint: gl.INT,\n        r32float: gl.FLOAT,\n        rg16uint: gl.UNSIGNED_SHORT,\n        rg16sint: gl.SHORT,\n        rg16float: gl.HALF_FLOAT,\n        rgba8unorm: gl.UNSIGNED_BYTE,\n        'rgba8unorm-srgb': gl.UNSIGNED_BYTE,\n\n        // Packed 32-bit formats\n        rgba8snorm: gl.BYTE,\n        rgba8uint: gl.UNSIGNED_BYTE,\n        rgba8sint: gl.BYTE,\n        bgra8unorm: gl.UNSIGNED_BYTE,\n        'bgra8unorm-srgb': gl.UNSIGNED_BYTE,\n        rgb9e5ufloat: gl.UNSIGNED_INT_5_9_9_9_REV,\n        rgb10a2unorm: gl.UNSIGNED_INT_2_10_10_10_REV,\n        rg11b10ufloat: gl.UNSIGNED_INT_10F_11F_11F_REV,\n\n        // 64-bit formats\n        rg32uint: gl.UNSIGNED_INT,\n        rg32sint: gl.INT,\n        rg32float: gl.FLOAT,\n        rgba16uint: gl.UNSIGNED_SHORT,\n        rgba16sint: gl.SHORT,\n        rgba16float: gl.HALF_FLOAT,\n\n        // 128-bit formats\n        rgba32uint: gl.UNSIGNED_INT,\n        rgba32sint: gl.INT,\n        rgba32float: gl.FLOAT,\n\n        // Depth/stencil formats\n        stencil8: gl.UNSIGNED_BYTE,\n        depth16unorm: gl.UNSIGNED_SHORT,\n        depth24plus: gl.UNSIGNED_INT,\n        'depth24plus-stencil8': gl.UNSIGNED_INT_24_8,\n        depth32float: gl.FLOAT,\n        'depth32float-stencil8': gl.FLOAT_32_UNSIGNED_INT_24_8_REV,\n\n    };\n}\n"],"names":[],"mappings":";AASO,SAAS,kBAAkB,EAClC,EAAA;AACI,EAAO,OAAA;AAAA;AAAA,IAEH,SAAS,EAAG,CAAA,aAAA;AAAA,IACZ,SAAS,EAAG,CAAA,IAAA;AAAA,IACZ,QAAQ,EAAG,CAAA,aAAA;AAAA,IACX,QAAQ,EAAG,CAAA,IAAA;AAAA;AAAA,IAGX,SAAS,EAAG,CAAA,cAAA;AAAA,IACZ,SAAS,EAAG,CAAA,KAAA;AAAA,IACZ,UAAU,EAAG,CAAA,UAAA;AAAA,IACb,UAAU,EAAG,CAAA,aAAA;AAAA,IACb,UAAU,EAAG,CAAA,IAAA;AAAA,IACb,SAAS,EAAG,CAAA,aAAA;AAAA,IACZ,SAAS,EAAG,CAAA,IAAA;AAAA;AAAA,IAGZ,SAAS,EAAG,CAAA,YAAA;AAAA,IACZ,SAAS,EAAG,CAAA,GAAA;AAAA,IACZ,UAAU,EAAG,CAAA,KAAA;AAAA,IACb,UAAU,EAAG,CAAA,cAAA;AAAA,IACb,UAAU,EAAG,CAAA,KAAA;AAAA,IACb,WAAW,EAAG,CAAA,UAAA;AAAA,IACd,YAAY,EAAG,CAAA,aAAA;AAAA,IACf,mBAAmB,EAAG,CAAA,aAAA;AAAA;AAAA,IAGtB,YAAY,EAAG,CAAA,IAAA;AAAA,IACf,WAAW,EAAG,CAAA,aAAA;AAAA,IACd,WAAW,EAAG,CAAA,IAAA;AAAA,IACd,YAAY,EAAG,CAAA,aAAA;AAAA,IACf,mBAAmB,EAAG,CAAA,aAAA;AAAA,IACtB,cAAc,EAAG,CAAA,wBAAA;AAAA,IACjB,cAAc,EAAG,CAAA,2BAAA;AAAA,IACjB,eAAe,EAAG,CAAA,4BAAA;AAAA;AAAA,IAGlB,UAAU,EAAG,CAAA,YAAA;AAAA,IACb,UAAU,EAAG,CAAA,GAAA;AAAA,IACb,WAAW,EAAG,CAAA,KAAA;AAAA,IACd,YAAY,EAAG,CAAA,cAAA;AAAA,IACf,YAAY,EAAG,CAAA,KAAA;AAAA,IACf,aAAa,EAAG,CAAA,UAAA;AAAA;AAAA,IAGhB,YAAY,EAAG,CAAA,YAAA;AAAA,IACf,YAAY,EAAG,CAAA,GAAA;AAAA,IACf,aAAa,EAAG,CAAA,KAAA;AAAA;AAAA,IAGhB,UAAU,EAAG,CAAA,aAAA;AAAA,IACb,cAAc,EAAG,CAAA,cAAA;AAAA,IACjB,aAAa,EAAG,CAAA,YAAA;AAAA,IAChB,wBAAwB,EAAG,CAAA,iBAAA;AAAA,IAC3B,cAAc,EAAG,CAAA,KAAA;AAAA,IACjB,yBAAyB,EAAG,CAAA,8BAAA;AAAA,GAEhC,CAAA;AACJ;;;;"}