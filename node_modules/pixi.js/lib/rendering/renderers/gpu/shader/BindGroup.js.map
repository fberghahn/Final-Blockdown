{"version":3,"file":"BindGroup.js","sources":["../../../../../src/rendering/renderers/gpu/shader/BindGroup.ts"],"sourcesContent":["import type { BindResource } from './BindResource';\n\n/**\n * A bind group is a collection of resources that are bound together for use by a shader.\n * They are essentially a wrapper for the WebGPU BindGroup class. But with the added bonus\n * that WebGL can also work with them.\n * @see https://gpuweb.github.io/gpuweb/#dictdef-gpubindgroupdescriptor\n * @example\n * // Create a bind group with a single texture and sampler\n * const bindGroup = new BindGroup({\n *    uTexture: texture.source,\n *    uTexture: texture.style,\n * });\n *\n * Bind groups resources must implement the {@link BindResource} interface.\n * The following resources are supported:\n * - {@link TextureSource}\n * - {@link TextureStyle}\n * - {@link Buffer}\n * - {@link BufferResource}\n * - {@link UniformGroup}\n *\n * The keys in the bind group must correspond to the names of the resources in the GPU program.\n *\n * This bind group class will also watch for changes in its resources ensuring that the changes\n * are reflected in the WebGPU BindGroup.\n * @memberof rendering\n */\nexport class BindGroup\n{\n    /** The resources that are bound together for use by a shader. */\n    public resources: Record<string, BindResource> = Object.create(null);\n    /**\n     * a key used internally to match it up to a WebGPU Bindgroup\n     * @internal\n     * @ignore\n     */\n    public _key: string;\n    private _dirty = true;\n\n    /**\n     * Create a new instance eof the Bind Group.\n     * @param resources - The resources that are bound together for use by a shader.\n     */\n    constructor(resources?: Record<string, BindResource>)\n    {\n        let index = 0;\n\n        for (const i in resources)\n        {\n            const resource: BindResource = resources[i];\n\n            this.setResource(resource, index++);\n        }\n\n        this._updateKey();\n    }\n\n    /**\n     * Updates the key if its flagged as dirty. This is used internally to\n     * match this bind group to a WebGPU BindGroup.\n     * @internal\n     * @ignore\n     */\n    public _updateKey(): void\n    {\n        if (!this._dirty) return;\n\n        this._dirty = false;\n\n        const keyParts = [];\n        let index = 0;\n\n        // TODO - lets use big ints instead of strings...\n        for (const i in this.resources)\n        {\n            // TODO make this consistent...\n            keyParts[index++] = this.resources[i]._resourceId;\n        }\n\n        this._key = keyParts.join('|');\n    }\n\n    /**\n     * Set a resource at a given index. this function will\n     * ensure that listeners will be removed from the current resource\n     * and added to the new resource.\n     * @param resource - The resource to set.\n     * @param index - The index to set the resource at.\n     */\n    public setResource(resource: BindResource, index: number): void\n    {\n        const currentResource = this.resources[index];\n\n        if (resource === currentResource) return;\n\n        if (currentResource)\n        {\n            resource.off?.('change', this.onResourceChange, this);\n        }\n\n        resource.on?.('change', this.onResourceChange, this);\n\n        this.resources[index] = resource;\n        this._dirty = true;\n    }\n\n    /**\n     * Returns the resource at the current specified index.\n     * @param index - The index of the resource to get.\n     * @returns - The resource at the specified index.\n     */\n    public getResource(index: number): BindResource\n    {\n        return this.resources[index];\n    }\n\n    /**\n     * Used internally to 'touch' each resource, to ensure that the GC\n     * knows that all resources in this bind group are still being used.\n     * @param tick - The current tick.\n     * @internal\n     * @ignore\n     */\n    public _touch(tick: number)\n    {\n        const resources = this.resources;\n\n        for (const i in resources)\n        {\n            resources[i]._touched = tick;\n        }\n    }\n\n    /** Destroys this bind group and removes all listeners. */\n    public destroy()\n    {\n        const resources = this.resources;\n\n        for (const i in resources)\n        {\n            const resource = resources[i];\n\n            resource.off?.('change', this.onResourceChange, this);\n        }\n\n        this.resources = null;\n    }\n\n    protected onResourceChange()\n    {\n        this._dirty = true;\n        this._updateKey();\n    }\n}\n"],"names":[],"mappings":"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"}