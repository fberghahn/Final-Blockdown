{"version":3,"file":"TexturePool.js","sources":["../../../../../src/rendering/renderers/shared/texture/TexturePool.ts"],"sourcesContent":["import { nextPow2 } from '../../../../maths/misc/pow2';\nimport { TextureSource } from './sources/TextureSource';\nimport { Texture } from './Texture';\n\nimport type { TextureSourceOptions } from './sources/TextureSource';\n\nlet count = 0;\n\n/**\n * Texture pool, used by FilterSystem and plugins.\n *\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in default pool\n * @memberof rendering\n * @name TexturePool\n */\nexport class TexturePoolClass\n{\n    /** The default options for texture pool */\n    public textureOptions: TextureSourceOptions;\n\n    /**\n     * Allow renderTextures of the same size as screen, not just pow2\n     *\n     * Automatically sets to true after `setScreenSize`\n     * @default false\n     */\n    public enableFullScreen: boolean;\n\n    private _texturePool: {[x in string | number]: Texture[]};\n    private _poolKeyHash: Record<number, number> = Object.create(null);\n\n    /**\n     * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n     * @param {SCALE_MODE} [textureOptions.scaleMode] - See {@link SCALE_MODE} for possible values.\n     */\n    constructor(textureOptions?: TextureSourceOptions)\n    {\n        this._texturePool = {};\n        this.textureOptions = textureOptions || {};\n        this.enableFullScreen = false;\n    }\n\n    /**\n     * Creates texture with params that were specified in pool constructor.\n     * @param pixelWidth - Width of texture in pixels.\n     * @param pixelHeight - Height of texture in pixels.\n     * @param antialias\n     */\n    public createTexture(pixelWidth: number, pixelHeight: number, antialias: boolean): Texture\n    {\n        const textureSource = new TextureSource({\n            ...this.textureOptions,\n\n            width: pixelWidth,\n            height: pixelHeight,\n            resolution: 1,\n            antialias,\n            autoGarbageCollect: true,\n        });\n\n        return new Texture({\n            source: textureSource,\n            label: `texturePool_${count++}`,\n        });\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     * @param frameWidth - The minimum width of the render texture.\n     * @param frameHeight - The minimum height of the render texture.\n     * @param resolution - The resolution of the render texture.\n     * @param antialias\n     * @returns The new render texture.\n     */\n    public getOptimalTexture(frameWidth: number, frameHeight: number, resolution = 1, antialias: boolean): Texture\n    {\n        let po2Width = Math.ceil((frameWidth * resolution) - 1e-6);\n        let po2Height = Math.ceil((frameHeight * resolution) - 1e-6);\n\n        po2Width = nextPow2(po2Width);\n        po2Height = nextPow2(po2Height);\n\n        const key = (po2Width << 17) + (po2Height << 1) + (antialias ? 1 : 0);\n\n        if (!this._texturePool[key])\n        {\n            this._texturePool[key] = [];\n        }\n\n        let texture = this._texturePool[key].pop();\n\n        if (!texture)\n        {\n            texture = this.createTexture(po2Width, po2Height, antialias);\n        }\n\n        texture.source._resolution = resolution;\n        texture.source.width = po2Width / resolution;\n        texture.source.height = po2Height / resolution;\n        texture.source.pixelWidth = po2Width;\n        texture.source.pixelHeight = po2Height;\n\n        // fit the layout to the requested original size\n        texture.frame.x = 0;\n        texture.frame.y = 0;\n        texture.frame.width = frameWidth;\n        texture.frame.height = frameHeight;\n\n        texture.updateUvs();\n\n        this._poolKeyHash[texture.uid] = key;\n\n        return texture;\n    }\n\n    /**\n     * Gets extra texture of the same size as input renderTexture\n     * @param texture - The texture to check what size it is.\n     * @param antialias - Whether to use antialias.\n     * @returns A texture that is a power of two\n     */\n    public getSameSizeTexture(texture: Texture, antialias = false)\n    {\n        const source = texture.source;\n\n        return this.getOptimalTexture(texture.width, texture.height, source._resolution, antialias);\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param renderTexture - The renderTexture to free\n     */\n    public returnTexture(renderTexture: Texture): void\n    {\n        const key = this._poolKeyHash[renderTexture.uid];\n\n        this._texturePool[key].push(renderTexture);\n    }\n\n    /**\n     * Clears the pool.\n     * @param destroyTextures - Destroy all stored textures.\n     */\n    public clear(destroyTextures?: boolean): void\n    {\n        destroyTextures = destroyTextures !== false;\n        if (destroyTextures)\n        {\n            for (const i in this._texturePool)\n            {\n                const textures = this._texturePool[i];\n\n                if (textures)\n                {\n                    for (let j = 0; j < textures.length; j++)\n                    {\n                        textures[j].destroy(true);\n                    }\n                }\n            }\n        }\n\n        this._texturePool = {};\n    }\n}\n\nexport const TexturePool = new TexturePoolClass();\n"],"names":["TextureSource","Texture","nextPow2"],"mappings":"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"}