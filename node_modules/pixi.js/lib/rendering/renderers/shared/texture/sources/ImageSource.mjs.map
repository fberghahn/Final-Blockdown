{"version":3,"file":"ImageSource.mjs","sources":["../../../../../../src/rendering/renderers/shared/texture/sources/ImageSource.ts"],"sourcesContent":["import { DOMAdapter } from '../../../../../environment/adapter';\nimport { ExtensionType } from '../../../../../extensions/Extensions';\nimport { warn } from '../../../../../utils/logging/warn';\nimport { TextureSource } from './TextureSource';\n\nimport type { ICanvas } from '../../../../../environment/canvas/ICanvas';\nimport type { ExtensionMetadata } from '../../../../../extensions/Extensions';\nimport type { TextureSourceOptions } from './TextureSource';\n\nexport type ImageResource =\nImageBitmap\n| HTMLCanvasElement\n| OffscreenCanvas\n| ICanvas\n| VideoFrame\n| HTMLImageElement\n| HTMLVideoElement;\n\nexport class ImageSource extends TextureSource<ImageResource>\n{\n    public static extension: ExtensionMetadata = ExtensionType.TextureSource;\n    public uploadMethodId = 'image';\n\n    constructor(options: TextureSourceOptions<ImageResource>)\n    {\n        if (options.resource && (globalThis.HTMLImageElement && options.resource instanceof HTMLImageElement))\n        {\n            const canvas = DOMAdapter.get().createCanvas(options.resource.width, options.resource.height);\n            const context = canvas.getContext('2d');\n\n            context.drawImage(options.resource, 0, 0);\n            options.resource = canvas;\n\n            // #if _DEBUG\n            warn('ImageSource: Image element passed, converting to canvas. Use CanvasSource instead.');\n            // #endif\n        }\n\n        super(options);\n\n        this.autoGarbageCollect = true;\n    }\n\n    public static test(resource: any): resource is ImageResource\n    {\n        return (globalThis.HTMLImageElement && resource instanceof HTMLImageElement)\n        || (typeof ImageBitmap !== 'undefined' && resource instanceof ImageBitmap);\n    }\n}\n"],"names":[],"mappings":";;;;;;AAkBO,MAAM,oBAAoB,aACjC,CAAA;AAAA,EAII,YAAY,OACZ,EAAA;AACI,IAAA,IAAI,QAAQ,QAAa,KAAA,UAAA,CAAW,gBAAoB,IAAA,OAAA,CAAQ,oBAAoB,gBACpF,CAAA,EAAA;AACI,MAAM,MAAA,MAAA,GAAS,UAAW,CAAA,GAAA,EAAM,CAAA,YAAA,CAAa,QAAQ,QAAS,CAAA,KAAA,EAAO,OAAQ,CAAA,QAAA,CAAS,MAAM,CAAA,CAAA;AAC5F,MAAM,MAAA,OAAA,GAAU,MAAO,CAAA,UAAA,CAAW,IAAI,CAAA,CAAA;AAEtC,MAAA,OAAA,CAAQ,SAAU,CAAA,OAAA,CAAQ,QAAU,EAAA,CAAA,EAAG,CAAC,CAAA,CAAA;AACxC,MAAA,OAAA,CAAQ,QAAW,GAAA,MAAA,CAAA;AAGnB,MAAA,IAAA,CAAK,oFAAoF,CAAA,CAAA;AAAA,KAE7F;AAEA,IAAA,KAAA,CAAM,OAAO,CAAA,CAAA;AAjBjB,IAAA,IAAA,CAAO,cAAiB,GAAA,OAAA,CAAA;AAmBpB,IAAA,IAAA,CAAK,kBAAqB,GAAA,IAAA,CAAA;AAAA,GAC9B;AAAA,EAEA,OAAc,KAAK,QACnB,EAAA;AACI,IAAA,OAAQ,WAAW,gBAAoB,IAAA,QAAA,YAAoB,oBACvD,OAAO,WAAA,KAAgB,eAAe,QAAoB,YAAA,WAAA,CAAA;AAAA,GAClE;AACJ,CAAA;AA9Ba,WAAA,CAEK,YAA+B,aAAc,CAAA,aAAA;;;;"}