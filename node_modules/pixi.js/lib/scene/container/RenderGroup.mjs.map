{"version":3,"file":"RenderGroup.mjs","sources":["../../../src/scene/container/RenderGroup.ts"],"sourcesContent":["import { Matrix } from '../../maths/matrix/Matrix';\nimport { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet';\n\nimport type { Instruction } from '../../rendering/renderers/shared/instructions/Instruction';\nimport type { Container } from './Container';\n\n/**\n * The render group is the base class for all render groups\n * It is used to render a group of containers together\n * @memberof rendering\n */\nexport class RenderGroup implements Instruction\n{\n    public renderPipeId = 'renderGroup';\n    public root: Container = null;\n\n    public canBundle = false;\n\n    public renderGroupParent: RenderGroup = null;\n    public renderGroupChildren: RenderGroup[] = [];\n\n    private readonly _children: Container[] = [];\n\n    public worldTransform: Matrix = new Matrix();\n    public worldColorAlpha = 0xffffffff;\n    public worldColor = 0xffffff;\n    public worldAlpha = 1;\n\n    // these updates are transform changes..\n    public readonly childrenToUpdate: Record<number, { list: Container[]; index: number; }> = Object.create(null);\n    public updateTick = 0;\n\n    // these update are renderable changes..\n    public readonly childrenRenderablesToUpdate: { list: Container[]; index: number; } = { list: [], index: 0 };\n\n    // other\n    public structureDidChange = true;\n\n    public instructionSet: InstructionSet = new InstructionSet();\n\n    private readonly _onRenderContainers: Container[] = [];\n\n    constructor(root: Container)\n    {\n        this.root = root;\n\n        this.addChild(root);\n    }\n\n    get localTransform()\n    {\n        return this.root.localTransform;\n    }\n\n    public addRenderGroupChild(renderGroupChild: RenderGroup)\n    {\n        if (renderGroupChild.renderGroupParent)\n        {\n            renderGroupChild.renderGroupParent._removeRenderGroupChild(renderGroupChild);\n        }\n\n        renderGroupChild.renderGroupParent = this;\n\n        this.onChildUpdate(renderGroupChild.root);\n\n        this.renderGroupChildren.push(renderGroupChild);\n    }\n\n    private _removeRenderGroupChild(renderGroupChild: RenderGroup)\n    {\n        if (renderGroupChild.root.didChange)\n        {\n            this._removeChildFromUpdate(renderGroupChild.root);\n        }\n\n        const index = this.renderGroupChildren.indexOf(renderGroupChild);\n\n        if (index > -1)\n        {\n            this.renderGroupChildren.splice(index, 1);\n        }\n\n        renderGroupChild.renderGroupParent = null;\n    }\n\n    public addChild(child: Container)\n    {\n        this.structureDidChange = true;\n\n        // TODO this can be optimized..\n        if (child !== this.root)\n        {\n            this._children.push(child);\n\n            child.updateTick = -1;\n\n            if (child.parent === this.root)\n            {\n                child.relativeRenderGroupDepth = 1;\n            }\n\n            else\n            {\n                child.relativeRenderGroupDepth = child.parent.relativeRenderGroupDepth + 1;\n            }\n\n            if (child._onRender)\n            {\n                this.addOnRender(child);\n            }\n        }\n\n        if (child.renderGroup)\n        {\n            if (child.renderGroup.root === child)\n            {\n                // its already its own render group..\n                this.addRenderGroupChild(child.renderGroup);\n\n                return;\n            }\n        }\n        else\n        {\n            child.renderGroup = this;\n            child.didChange = true;\n        }\n\n        const children = child.children;\n\n        if (!child.isRenderGroupRoot)\n        {\n            this.onChildUpdate(child);\n        }\n\n        for (let i = 0; i < children.length; i++)\n        {\n            this.addChild(children[i]);\n        }\n    }\n\n    public removeChild(child: Container)\n    {\n        // remove all the children...\n        this.structureDidChange = true;\n\n        if (child._onRender)\n        {\n            this.removeOnRender(child);\n        }\n\n        if (child.renderGroup.root !== child)\n        {\n            const children = child.children;\n\n            for (let i = 0; i < children.length; i++)\n            {\n                this.removeChild(children[i]);\n            }\n\n            if (child.didChange)\n            {\n                child.renderGroup._removeChildFromUpdate(child);\n            }\n\n            child.renderGroup = null;\n        }\n\n        else\n        {\n            this._removeRenderGroupChild(child.renderGroup);\n        }\n\n        const index = this._children.indexOf(child);\n\n        if (index > -1)\n        {\n            this._children.splice(index, 1);\n        }\n    }\n\n    public onChildUpdate(child: Container)\n    {\n        let childrenToUpdate = this.childrenToUpdate[child.relativeRenderGroupDepth];\n\n        if (!childrenToUpdate)\n        {\n            childrenToUpdate = this.childrenToUpdate[child.relativeRenderGroupDepth] = {\n                index: 0,\n                list: [],\n            };\n        }\n\n        childrenToUpdate.list[childrenToUpdate.index++] = child;\n    }\n\n    // SHOULD THIS BE HERE?\n    public updateRenderable(container: Container)\n    {\n        // only update if its visible!\n        if (container.globalDisplayStatus < 0b111) return;\n\n        container.didViewUpdate = false;\n        // actually updates the renderable..\n        this.instructionSet.renderPipes[container.renderPipeId].updateRenderable(container);\n    }\n\n    public onChildViewUpdate(child: Container)\n    {\n        this.childrenRenderablesToUpdate.list[this.childrenRenderablesToUpdate.index++] = child;\n    }\n\n    private _removeChildFromUpdate(child: Container)\n    {\n        const childrenToUpdate = this.childrenToUpdate[child.relativeRenderGroupDepth];\n\n        if (!childrenToUpdate)\n        { return; }\n\n        const index = childrenToUpdate.list.indexOf(child);\n\n        // TODO this should be optimized - don't really want to change array size on the fly if we can avoid!\n        if (index > -1)\n        {\n            childrenToUpdate.list.splice(index, 1);\n        }\n\n        childrenToUpdate.index--;\n    }\n\n    get isRenderable(): boolean\n    {\n        return (this.root.localDisplayStatus === 0b111 && this.worldAlpha > 0);\n    }\n\n    /**\n     * adding a container to the onRender list will make sure the user function\n     * passed in to the user defined 'onRender` callBack\n     * @param container - the container to add to the onRender list\n     */\n    public addOnRender(container: Container)\n    {\n        this._onRenderContainers.push(container);\n    }\n\n    public removeOnRender(container: Container)\n    {\n        this._onRenderContainers.splice(this._onRenderContainers.indexOf(container), 1);\n    }\n\n    public runOnRender()\n    {\n        for (let i = 0; i < this._onRenderContainers.length; i++)\n        {\n            this._onRenderContainers[i]._onRender();\n        }\n    }\n}\n"],"names":[],"mappings":";;;;AAWO,MAAM,WACb,CAAA;AAAA,EA8BI,YAAY,IACZ,EAAA;AA9BA,IAAA,IAAA,CAAO,YAAe,GAAA,aAAA,CAAA;AACtB,IAAA,IAAA,CAAO,IAAkB,GAAA,IAAA,CAAA;AAEzB,IAAA,IAAA,CAAO,SAAY,GAAA,KAAA,CAAA;AAEnB,IAAA,IAAA,CAAO,iBAAiC,GAAA,IAAA,CAAA;AACxC,IAAA,IAAA,CAAO,sBAAqC,EAAC,CAAA;AAE7C,IAAA,IAAA,CAAiB,YAAyB,EAAC,CAAA;AAE3C,IAAO,IAAA,CAAA,cAAA,GAAyB,IAAI,MAAO,EAAA,CAAA;AAC3C,IAAA,IAAA,CAAO,eAAkB,GAAA,UAAA,CAAA;AACzB,IAAA,IAAA,CAAO,UAAa,GAAA,QAAA,CAAA;AACpB,IAAA,IAAA,CAAO,UAAa,GAAA,CAAA,CAAA;AAGpB;AAAA,IAAgB,IAAA,CAAA,gBAAA,mBAAiF,MAAA,CAAA,MAAA,CAAO,IAAI,CAAA,CAAA;AAC5G,IAAA,IAAA,CAAO,UAAa,GAAA,CAAA,CAAA;AAGpB;AAAA,IAAA,IAAA,CAAgB,8BAAqE,EAAE,IAAA,EAAM,EAAC,EAAG,OAAO,CAAE,EAAA,CAAA;AAG1G;AAAA,IAAA,IAAA,CAAO,kBAAqB,GAAA,IAAA,CAAA;AAE5B,IAAO,IAAA,CAAA,cAAA,GAAiC,IAAI,cAAe,EAAA,CAAA;AAE3D,IAAA,IAAA,CAAiB,sBAAmC,EAAC,CAAA;AAIjD,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AAEZ,IAAA,IAAA,CAAK,SAAS,IAAI,CAAA,CAAA;AAAA,GACtB;AAAA,EAEA,IAAI,cACJ,GAAA;AACI,IAAA,OAAO,KAAK,IAAK,CAAA,cAAA,CAAA;AAAA,GACrB;AAAA,EAEO,oBAAoB,gBAC3B,EAAA;AACI,IAAA,IAAI,iBAAiB,iBACrB,EAAA;AACI,MAAiB,gBAAA,CAAA,iBAAA,CAAkB,wBAAwB,gBAAgB,CAAA,CAAA;AAAA,KAC/E;AAEA,IAAA,gBAAA,CAAiB,iBAAoB,GAAA,IAAA,CAAA;AAErC,IAAK,IAAA,CAAA,aAAA,CAAc,iBAAiB,IAAI,CAAA,CAAA;AAExC,IAAK,IAAA,CAAA,mBAAA,CAAoB,KAAK,gBAAgB,CAAA,CAAA;AAAA,GAClD;AAAA,EAEQ,wBAAwB,gBAChC,EAAA;AACI,IAAI,IAAA,gBAAA,CAAiB,KAAK,SAC1B,EAAA;AACI,MAAK,IAAA,CAAA,sBAAA,CAAuB,iBAAiB,IAAI,CAAA,CAAA;AAAA,KACrD;AAEA,IAAA,MAAM,KAAQ,GAAA,IAAA,CAAK,mBAAoB,CAAA,OAAA,CAAQ,gBAAgB,CAAA,CAAA;AAE/D,IAAA,IAAI,QAAQ,CACZ,CAAA,EAAA;AACI,MAAK,IAAA,CAAA,mBAAA,CAAoB,MAAO,CAAA,KAAA,EAAO,CAAC,CAAA,CAAA;AAAA,KAC5C;AAEA,IAAA,gBAAA,CAAiB,iBAAoB,GAAA,IAAA,CAAA;AAAA,GACzC;AAAA,EAEO,SAAS,KAChB,EAAA;AACI,IAAA,IAAA,CAAK,kBAAqB,GAAA,IAAA,CAAA;AAG1B,IAAI,IAAA,KAAA,KAAU,KAAK,IACnB,EAAA;AACI,MAAK,IAAA,CAAA,SAAA,CAAU,KAAK,KAAK,CAAA,CAAA;AAEzB,MAAA,KAAA,CAAM,UAAa,GAAA,CAAA,CAAA,CAAA;AAEnB,MAAI,IAAA,KAAA,CAAM,MAAW,KAAA,IAAA,CAAK,IAC1B,EAAA;AACI,QAAA,KAAA,CAAM,wBAA2B,GAAA,CAAA,CAAA;AAAA,OAIrC,MAAA;AACI,QAAM,KAAA,CAAA,wBAAA,GAA2B,KAAM,CAAA,MAAA,CAAO,wBAA2B,GAAA,CAAA,CAAA;AAAA,OAC7E;AAEA,MAAA,IAAI,MAAM,SACV,EAAA;AACI,QAAA,IAAA,CAAK,YAAY,KAAK,CAAA,CAAA;AAAA,OAC1B;AAAA,KACJ;AAEA,IAAA,IAAI,MAAM,WACV,EAAA;AACI,MAAI,IAAA,KAAA,CAAM,WAAY,CAAA,IAAA,KAAS,KAC/B,EAAA;AAEI,QAAK,IAAA,CAAA,mBAAA,CAAoB,MAAM,WAAW,CAAA,CAAA;AAE1C,QAAA,OAAA;AAAA,OACJ;AAAA,KAGJ,MAAA;AACI,MAAA,KAAA,CAAM,WAAc,GAAA,IAAA,CAAA;AACpB,MAAA,KAAA,CAAM,SAAY,GAAA,IAAA,CAAA;AAAA,KACtB;AAEA,IAAA,MAAM,WAAW,KAAM,CAAA,QAAA,CAAA;AAEvB,IAAI,IAAA,CAAC,MAAM,iBACX,EAAA;AACI,MAAA,IAAA,CAAK,cAAc,KAAK,CAAA,CAAA;AAAA,KAC5B;AAEA,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,QAAA,CAAS,QAAQ,CACrC,EAAA,EAAA;AACI,MAAK,IAAA,CAAA,QAAA,CAAS,QAAS,CAAA,CAAC,CAAC,CAAA,CAAA;AAAA,KAC7B;AAAA,GACJ;AAAA,EAEO,YAAY,KACnB,EAAA;AAEI,IAAA,IAAA,CAAK,kBAAqB,GAAA,IAAA,CAAA;AAE1B,IAAA,IAAI,MAAM,SACV,EAAA;AACI,MAAA,IAAA,CAAK,eAAe,KAAK,CAAA,CAAA;AAAA,KAC7B;AAEA,IAAI,IAAA,KAAA,CAAM,WAAY,CAAA,IAAA,KAAS,KAC/B,EAAA;AACI,MAAA,MAAM,WAAW,KAAM,CAAA,QAAA,CAAA;AAEvB,MAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,QAAA,CAAS,QAAQ,CACrC,EAAA,EAAA;AACI,QAAK,IAAA,CAAA,WAAA,CAAY,QAAS,CAAA,CAAC,CAAC,CAAA,CAAA;AAAA,OAChC;AAEA,MAAA,IAAI,MAAM,SACV,EAAA;AACI,QAAM,KAAA,CAAA,WAAA,CAAY,uBAAuB,KAAK,CAAA,CAAA;AAAA,OAClD;AAEA,MAAA,KAAA,CAAM,WAAc,GAAA,IAAA,CAAA;AAAA,KAIxB,MAAA;AACI,MAAK,IAAA,CAAA,uBAAA,CAAwB,MAAM,WAAW,CAAA,CAAA;AAAA,KAClD;AAEA,IAAA,MAAM,KAAQ,GAAA,IAAA,CAAK,SAAU,CAAA,OAAA,CAAQ,KAAK,CAAA,CAAA;AAE1C,IAAA,IAAI,QAAQ,CACZ,CAAA,EAAA;AACI,MAAK,IAAA,CAAA,SAAA,CAAU,MAAO,CAAA,KAAA,EAAO,CAAC,CAAA,CAAA;AAAA,KAClC;AAAA,GACJ;AAAA,EAEO,cAAc,KACrB,EAAA;AACI,IAAA,IAAI,gBAAmB,GAAA,IAAA,CAAK,gBAAiB,CAAA,KAAA,CAAM,wBAAwB,CAAA,CAAA;AAE3E,IAAA,IAAI,CAAC,gBACL,EAAA;AACI,MAAA,gBAAA,GAAmB,IAAK,CAAA,gBAAA,CAAiB,KAAM,CAAA,wBAAwB,CAAI,GAAA;AAAA,QACvE,KAAO,EAAA,CAAA;AAAA,QACP,MAAM,EAAC;AAAA,OACX,CAAA;AAAA,KACJ;AAEA,IAAiB,gBAAA,CAAA,IAAA,CAAK,gBAAiB,CAAA,KAAA,EAAO,CAAI,GAAA,KAAA,CAAA;AAAA,GACtD;AAAA;AAAA,EAGO,iBAAiB,SACxB,EAAA;AAEI,IAAA,IAAI,UAAU,mBAAsB,GAAA,CAAA;AAAO,MAAA,OAAA;AAE3C,IAAA,SAAA,CAAU,aAAgB,GAAA,KAAA,CAAA;AAE1B,IAAA,IAAA,CAAK,eAAe,WAAY,CAAA,SAAA,CAAU,YAAY,CAAA,CAAE,iBAAiB,SAAS,CAAA,CAAA;AAAA,GACtF;AAAA,EAEO,kBAAkB,KACzB,EAAA;AACI,IAAA,IAAA,CAAK,2BAA4B,CAAA,IAAA,CAAK,IAAK,CAAA,2BAAA,CAA4B,OAAO,CAAI,GAAA,KAAA,CAAA;AAAA,GACtF;AAAA,EAEQ,uBAAuB,KAC/B,EAAA;AACI,IAAA,MAAM,gBAAmB,GAAA,IAAA,CAAK,gBAAiB,CAAA,KAAA,CAAM,wBAAwB,CAAA,CAAA;AAE7E,IAAA,IAAI,CAAC,gBACL,EAAA;AAAE,MAAA,OAAA;AAAA,KAAQ;AAEV,IAAA,MAAM,KAAQ,GAAA,gBAAA,CAAiB,IAAK,CAAA,OAAA,CAAQ,KAAK,CAAA,CAAA;AAGjD,IAAA,IAAI,QAAQ,CACZ,CAAA,EAAA;AACI,MAAiB,gBAAA,CAAA,IAAA,CAAK,MAAO,CAAA,KAAA,EAAO,CAAC,CAAA,CAAA;AAAA,KACzC;AAEA,IAAiB,gBAAA,CAAA,KAAA,EAAA,CAAA;AAAA,GACrB;AAAA,EAEA,IAAI,YACJ,GAAA;AACI,IAAA,OAAQ,IAAK,CAAA,IAAA,CAAK,kBAAuB,KAAA,CAAA,IAAS,KAAK,UAAa,GAAA,CAAA,CAAA;AAAA,GACxE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOO,YAAY,SACnB,EAAA;AACI,IAAK,IAAA,CAAA,mBAAA,CAAoB,KAAK,SAAS,CAAA,CAAA;AAAA,GAC3C;AAAA,EAEO,eAAe,SACtB,EAAA;AACI,IAAA,IAAA,CAAK,oBAAoB,MAAO,CAAA,IAAA,CAAK,oBAAoB,OAAQ,CAAA,SAAS,GAAG,CAAC,CAAA,CAAA;AAAA,GAClF;AAAA,EAEO,WACP,GAAA;AACI,IAAA,KAAA,IAAS,IAAI,CAAG,EAAA,CAAA,GAAI,IAAK,CAAA,mBAAA,CAAoB,QAAQ,CACrD,EAAA,EAAA;AACI,MAAK,IAAA,CAAA,mBAAA,CAAoB,CAAC,CAAA,CAAE,SAAU,EAAA,CAAA;AAAA,KAC1C;AAAA,GACJ;AACJ;;;;"}