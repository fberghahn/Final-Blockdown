{"version":3,"file":"effectsMixin.js","sources":["../../../../src/scene/container/container-mixins/effectsMixin.ts"],"sourcesContent":["import { FilterEffect } from '../../../filters/FilterEffect';\nimport { MaskEffectManager } from '../../../rendering/mask/MaskEffectManager';\nimport { BigPool } from '../../../utils/pool/PoolGroup';\n\nimport type { Filter } from '../../../filters/Filter';\nimport type { Rectangle } from '../../../maths/shapes/Rectangle';\nimport type { PoolItem } from '../../../utils/pool/Pool';\nimport type { Container } from '../Container';\nimport type { Effect } from '../Effect';\n\nexport interface EffectsMixinConstructor\n{\n    mask?: number | Container | null;\n    filters?: Filter | Filter[];\n}\nexport interface EffectsMixin extends Required<EffectsMixinConstructor>\n{\n    _mask?: {mask: unknown, effect: Effect};\n    _filters?: {\n        filters: readonly Filter[],\n        effect: FilterEffect\n        filterArea?: Rectangle,\n    },\n    filterArea?: Rectangle,\n    effects?: Effect[];\n    addEffect(effect: Effect): void;\n    removeEffect(effect: Effect): void;\n}\n\nexport const effectsMixin: Partial<Container> = {\n    _mask: null,\n    _filters: null,\n\n    /**\n     * @todo Needs docs.\n     * @memberof scene.Container#\n     * @type {Array<Effect>}\n     */\n    effects: [],\n\n    /**\n     * @todo Needs docs.\n     * @param effect - The effect to add.\n     * @memberof scene.Container#\n     * @ignore\n     */\n    addEffect(effect: Effect)\n    {\n        const index = this.effects.indexOf(effect);\n\n        if (index !== -1) return; // already exists!\n\n        this.effects.push(effect);\n\n        this.effects.sort((a, b) => a.priority - b.priority);\n\n        if (this.renderGroup)\n        {\n            this.renderGroup.structureDidChange = true;\n        }\n\n        this._updateIsSimple();\n    },\n    /**\n     * @todo Needs docs.\n     * @param effect - The effect to remove.\n     * @memberof scene.Container#\n     * @ignore\n     */\n    removeEffect(effect: Effect)\n    {\n        const index = this.effects.indexOf(effect);\n\n        if (index === -1) return; // already exists!\n\n        this.effects.splice(index, 1);\n\n        if (!this.isRenderGroupRoot && this.renderGroup)\n        {\n            this.renderGroup.structureDidChange = true;\n        }\n\n        this._updateIsSimple();\n    },\n\n    set mask(value: number | Container | null)\n    {\n        this._mask ||= { mask: null, effect: null };\n\n        if (this._mask.mask === value) return;\n\n        if (this._mask.effect)\n        {\n            this.removeEffect(this._mask.effect);\n\n            MaskEffectManager.returnMaskEffect(this._mask.effect);\n\n            this._mask.effect = null;\n        }\n\n        this._mask.mask = value;\n\n        if (value === null || value === undefined) return;\n\n        const effect = MaskEffectManager.getMaskEffect(value);\n\n        this._mask.effect = effect;\n\n        this.addEffect(effect);\n    },\n\n    /**\n     * Sets a mask for the displayObject. A mask is an object that limits the visibility of an\n     * object to the shape of the mask applied to it. In PixiJS a regular mask must be a\n     * {@link Graphics} or a {@link Sprite} object. This allows for much faster masking in canvas as it\n     * utilities shape clipping. Furthermore, a mask of an object must be in the subtree of its parent.\n     * Otherwise, `getLocalBounds` may calculate incorrect bounds, which makes the container's width and height wrong.\n     * To remove a mask, set this property to `null`.\n     *\n     * For sprite mask both alpha and red channel are used. Black mask is the same as transparent mask.\n     * @example\n     * import { Graphics, Sprite } from 'pixi.js';\n     *\n     * const graphics = new Graphics();\n     * graphics.beginFill(0xFF3300);\n     * graphics.drawRect(50, 250, 100, 100);\n     * graphics.endFill();\n     *\n     * const sprite = new Sprite(texture);\n     * sprite.mask = graphics;\n     * @memberof scene.Container#\n     */\n    get mask(): unknown\n    {\n        return this._mask?.mask;\n    },\n\n    set filters(value: Filter | Filter[] | null | undefined)\n    {\n        if (!Array.isArray(value) && value) value = [value];\n\n        // Ignore the Filter type\n        value = value as Filter[] | null | undefined;\n\n        // by reusing the same effect.. rather than adding and removing from the pool!\n        this._filters ||= { filters: null, effect: null, filterArea: null };\n\n        const hasFilters = value?.length > 0;\n        const didChange = (this._filters.effect && !hasFilters) || (!this._filters.effect && hasFilters);\n\n        // Clone the filters array so we don't freeze the user-input\n        value = Array.isArray(value) ? value.slice(0) : value;\n\n        // Ensure filters are immutable via filters getter\n        this._filters.filters = Object.freeze(value);\n\n        if (didChange)\n        {\n            if (hasFilters)\n            {\n                const effect = BigPool.get(FilterEffect);\n\n                this._filters.effect = effect;\n                this.addEffect(effect);\n            }\n            else\n            {\n                const effect = this._filters.effect;\n\n                this.removeEffect(effect);\n\n                effect.filterArea = null;\n                effect.filters = null;\n\n                this._filters.effect = null;\n                BigPool.return(effect as PoolItem);\n            }\n        }\n\n        if (hasFilters)\n        {\n            this._filters.effect.filters = value as Filter[];\n            this._filters.effect.filterArea = this.filterArea;\n        }\n    },\n\n    /**\n     * Sets the filters for the displayObject.\n     * IMPORTANT: This is a WebGL only feature and will be ignored by the canvas renderer.\n     * To remove filters simply set this property to `'null'`.\n     * @memberof scene.Container#\n     */\n    get filters(): readonly Filter[]\n    {\n        return this._filters?.filters;\n    },\n\n    set filterArea(value: Rectangle)\n    {\n        this._filters ||= { filters: null, effect: null, filterArea: null };\n\n        this._filters.filterArea = value;\n    },\n\n    /**\n     * The area the filter is applied to. This is used as more of an optimization\n     * rather than figuring out the dimensions of the displayObject each frame you can set this rectangle.\n     *\n     * Also works as an interaction mask.\n     * @memberof scene.Container#\n     */\n    get filterArea(): Rectangle\n    {\n        return this._filters?.filterArea;\n    },\n\n} as Container;\n"],"names":["MaskEffectManager","BigPool","FilterEffect"],"mappings":"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"}