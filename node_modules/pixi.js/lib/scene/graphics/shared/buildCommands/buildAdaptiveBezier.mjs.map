{"version":3,"file":"buildAdaptiveBezier.mjs","sources":["../../../../../src/scene/graphics/shared/buildCommands/buildAdaptiveBezier.ts"],"sourcesContent":["// thanks to https://github.com/mattdesl/adaptive-bezier-curve\n// for the original code!\n\nimport { GraphicsContextSystem } from '../GraphicsContextSystem';\n\nconst RECURSION_LIMIT = 8;\nconst FLT_EPSILON = 1.19209290e-7;\nconst PATH_DISTANCE_EPSILON = 1.0;\n\nconst curveAngleToleranceEpsilon = 0.01;\nconst mAngleTolerance = 0;\nconst mCuspLimit = 0;\n\nexport function buildAdaptiveBezier(\n    points: number[],\n    sX: number, sY: number,\n    cp1x: number, cp1y: number,\n    cp2x: number, cp2y: number,\n    eX: number, eY: number,\n    smoothness?: number,\n)\n{\n    // TODO expose as a parameter\n    const scale = 1;\n    const smoothing = Math.min(\n        0.99, // a value of 1.0 actually inverts smoothing, so we cap it at 0.99\n        Math.max(0, smoothness ?? GraphicsContextSystem.defaultOptions.bezierSmoothness)\n    );\n    let distanceTolerance = (PATH_DISTANCE_EPSILON - smoothing) / scale;\n\n    distanceTolerance *= distanceTolerance;\n    begin(sX, sY, cp1x, cp1y, cp2x, cp2y, eX, eY, points, distanceTolerance);\n\n    return points;\n}\n\n// //// Based on:\n// //// https://github.com/pelson/antigrain/blob/master/agg-2.4/src/agg_curves.cpp\n\nfunction begin(\n    sX: number, sY: number,\n    cp1x: number, cp1y: number,\n    cp2x: number, cp2y: number,\n    eX: number, eY: number,\n    points: number[],\n    distanceTolerance: number\n)\n{\n    // dont need to actually ad this!\n    // points.push(sX, sY);\n    recursive(sX, sY, cp1x, cp1y, cp2x, cp2y, eX, eY, points, distanceTolerance, 0);\n    points.push(eX, eY);\n}\n\n// eslint-disable-next-line max-params\nfunction recursive(\n    x1: number, y1: number,\n    x2: number, y2: number,\n    x3: number, y3: number,\n    x4: number, y4: number,\n    points: number[],\n    distanceTolerance: number,\n    level: number)\n{\n    if (level > RECURSION_LIMIT)\n    { return; }\n\n    const pi = Math.PI;\n\n    // Calculate all the mid-points of the line segments\n    // ----------------------\n    const x12 = (x1 + x2) / 2;\n    const y12 = (y1 + y2) / 2;\n    const x23 = (x2 + x3) / 2;\n    const y23 = (y2 + y3) / 2;\n    const x34 = (x3 + x4) / 2;\n    const y34 = (y3 + y4) / 2;\n    const x123 = (x12 + x23) / 2;\n    const y123 = (y12 + y23) / 2;\n    const x234 = (x23 + x34) / 2;\n    const y234 = (y23 + y34) / 2;\n    const x1234 = (x123 + x234) / 2;\n    const y1234 = (y123 + y234) / 2;\n\n    if (level > 0)\n    { // Enforce subdivision first time\n        // Try to approximate the full cubic curve by a single straight line\n        // ------------------\n        let dx = x4 - x1;\n        let dy = y4 - y1;\n\n        const d2 = Math.abs(((x2 - x4) * dy) - ((y2 - y4) * dx));\n        const d3 = Math.abs(((x3 - x4) * dy) - ((y3 - y4) * dx));\n\n        let da1; let da2;\n\n        if (d2 > FLT_EPSILON && d3 > FLT_EPSILON)\n        {\n            // Regular care\n            // -----------------\n            if ((d2 + d3) * (d2 + d3) <= distanceTolerance * ((dx * dx) + (dy * dy)))\n            {\n                // If the curvature doesn't exceed the distanceTolerance value\n                // we tend to finish subdivisions.\n                // ----------------------\n                if (mAngleTolerance < curveAngleToleranceEpsilon)\n                {\n                    points.push(x1234, y1234);\n\n                    return;\n                }\n\n                // Angle & Cusp Condition\n                // ----------------------\n                const a23 = Math.atan2(y3 - y2, x3 - x2);\n\n                da1 = Math.abs(a23 - Math.atan2(y2 - y1, x2 - x1));\n                da2 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - a23);\n                if (da1 >= pi) da1 = (2 * pi) - da1;\n                if (da2 >= pi) da2 = (2 * pi) - da2;\n\n                if (da1 + da2 < mAngleTolerance)\n                {\n                    // Finally we can stop the recursion\n                    // ----------------------\n                    points.push(x1234, y1234);\n\n                    return;\n                }\n\n                if (mCuspLimit !== 0.0)\n                {\n                    if (da1 > mCuspLimit)\n                    {\n                        points.push(x2, y2);\n\n                        return;\n                    }\n\n                    if (da2 > mCuspLimit)\n                    {\n                        points.push(x3, y3);\n\n                        return;\n                    }\n                }\n            }\n        }\n        else if (d2 > FLT_EPSILON)\n        {\n            // p1,p3,p4 are collinear, p2 is considerable\n            // ----------------------\n            if (d2 * d2 <= distanceTolerance * ((dx * dx) + (dy * dy)))\n            {\n                if (mAngleTolerance < curveAngleToleranceEpsilon)\n                {\n                    points.push(x1234, y1234);\n\n                    return;\n                }\n\n                // Angle Condition\n                // ----------------------\n                da1 = Math.abs(Math.atan2(y3 - y2, x3 - x2) - Math.atan2(y2 - y1, x2 - x1));\n                if (da1 >= pi) da1 = (2 * pi) - da1;\n\n                if (da1 < mAngleTolerance)\n                {\n                    points.push(x2, y2);\n                    points.push(x3, y3);\n\n                    return;\n                }\n\n                if (mCuspLimit !== 0.0)\n                {\n                    if (da1 > mCuspLimit)\n                    {\n                        points.push(x2, y2);\n\n                        return;\n                    }\n                }\n            }\n        }\n        else if (d3 > FLT_EPSILON)\n        {\n            // p1,p2,p4 are collinear, p3 is considerable\n            // ----------------------\n            if (d3 * d3 <= distanceTolerance * ((dx * dx) + (dy * dy)))\n            {\n                if (mAngleTolerance < curveAngleToleranceEpsilon)\n                {\n                    points.push(x1234, y1234);\n\n                    return;\n                }\n\n                // Angle Condition\n                // ----------------------\n                da1 = Math.abs(Math.atan2(y4 - y3, x4 - x3) - Math.atan2(y3 - y2, x3 - x2));\n                if (da1 >= pi) da1 = (2 * pi) - da1;\n\n                if (da1 < mAngleTolerance)\n                {\n                    points.push(x2, y2);\n                    points.push(x3, y3);\n\n                    return;\n                }\n\n                if (mCuspLimit !== 0.0)\n                {\n                    if (da1 > mCuspLimit)\n                    {\n                        points.push(x3, y3);\n\n                        return;\n                    }\n                }\n            }\n        }\n        else\n        {\n            // Collinear case\n            // -----------------\n            dx = x1234 - ((x1 + x4) / 2);\n            dy = y1234 - ((y1 + y4) / 2);\n            if ((dx * dx) + (dy * dy) <= distanceTolerance)\n            {\n                points.push(x1234, y1234);\n\n                return;\n            }\n        }\n    }\n\n    // Continue subdivision\n    // ----------------------\n    recursive(x1, y1, x12, y12, x123, y123, x1234, y1234, points, distanceTolerance, level + 1);\n    recursive(x1234, y1234, x234, y234, x34, y34, x4, y4, points, distanceTolerance, level + 1);\n}\n\n"],"names":[],"mappings":"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"}