{"version":3,"file":"HTMLTextPipe.mjs","sources":["../../../src/scene/text-html/HTMLTextPipe.ts"],"sourcesContent":["import { ExtensionType } from '../../extensions/Extensions';\nimport { Texture } from '../../rendering/renderers/shared/texture/Texture';\nimport { updateQuadBounds } from '../../utils/data/updateQuadBounds';\nimport { BigPool } from '../../utils/pool/PoolGroup';\nimport { BatchableSprite } from '../sprite/BatchableSprite';\n\nimport type { RenderPipe } from '../../rendering/renderers/shared/instructions/RenderPipe';\nimport type { Renderer } from '../../rendering/renderers/types';\nimport type { HTMLText } from './HTMLText';\nimport type { HTMLTextStyle } from './HtmlTextStyle';\n\nexport class HTMLTextPipe implements RenderPipe<HTMLText>\n{\n    /** @ignore */\n    public static extension = {\n        type: [\n            ExtensionType.WebGLPipes,\n            ExtensionType.WebGPUPipes,\n            ExtensionType.CanvasPipes,\n        ],\n        name: 'htmlText',\n    } as const;\n\n    private _renderer: Renderer;\n\n    private _gpuText: Record<number, {\n        textureNeedsUploading: boolean;\n        generatingTexture: boolean;\n        texture: Texture,\n        currentKey: string,\n        batchableSprite: BatchableSprite,\n    }> = Object.create(null);\n\n    constructor(renderer: Renderer)\n    {\n        this._renderer = renderer;\n    }\n\n    public validateRenderable(htmlText: HTMLText): boolean\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const newKey = htmlText._getKey();\n\n        if (gpuText.textureNeedsUploading)\n        {\n            gpuText.textureNeedsUploading = false;\n\n            return true;\n        }\n\n        if (gpuText.currentKey !== newKey)\n        {\n            // TODO - could look into optimising this a tad!\n            // if its a single texture, then we could just swap it?\n            // same for CanvasText..\n            return true;\n        }\n\n        return false;\n    }\n\n    public addRenderable(htmlText: HTMLText)\n    {\n        const gpuText = this._getGpuText(htmlText);\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        this._renderer.renderPipes.batch.addToBatch(batchableSprite);\n    }\n\n    public updateRenderable(htmlText: HTMLText)\n    {\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (htmlText._didTextUpdate)\n        {\n            this._updateText(htmlText);\n        }\n\n        batchableSprite.batcher.updateElement(batchableSprite);\n    }\n\n    public destroyRenderable(htmlText: HTMLText)\n    {\n        this._destroyRenderableById(htmlText.uid);\n    }\n\n    private _destroyRenderableById(htmlTextUid: number)\n    {\n        const gpuText = this._gpuText[htmlTextUid];\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        BigPool.return(gpuText.batchableSprite);\n\n        this._gpuText[htmlTextUid] = null;\n    }\n\n    private _updateText(htmlText: HTMLText)\n    {\n        const newKey = htmlText._getKey();\n        const gpuText = this._getGpuText(htmlText);\n        const batchableSprite = gpuText.batchableSprite;\n\n        if (gpuText.currentKey !== newKey)\n        {\n            this._updateGpuText(htmlText).catch((e) =>\n            {\n                console.error(e);\n            });\n        }\n\n        htmlText._didTextUpdate = false;\n\n        const padding = htmlText._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n    }\n\n    private async _updateGpuText(htmlText: HTMLText)\n    {\n        htmlText._didTextUpdate = false;\n\n        const gpuText = this._getGpuText(htmlText);\n\n        if (gpuText.generatingTexture) return;\n\n        const newKey = htmlText._getKey();\n\n        this._renderer.htmlText.decreaseReferenceCount(gpuText.currentKey);\n\n        gpuText.generatingTexture = true;\n\n        gpuText.currentKey = newKey;\n\n        const resolution = htmlText.resolution ?? this._renderer.resolution;\n\n        const texture = await this._renderer.htmlText.getManagedTexture(\n            htmlText.text,\n            resolution,\n            htmlText._style as HTMLTextStyle,\n            htmlText._getKey()\n        );\n\n        const batchableSprite = gpuText.batchableSprite;\n\n        batchableSprite.texture = gpuText.texture = texture;\n\n        gpuText.generatingTexture = false;\n\n        gpuText.textureNeedsUploading = true;\n        htmlText.onViewUpdate();\n\n        const padding = htmlText._style.padding;\n\n        updateQuadBounds(batchableSprite.bounds, htmlText._anchor, batchableSprite.texture, padding);\n    }\n\n    private _getGpuText(htmlText: HTMLText)\n    {\n        return this._gpuText[htmlText.uid] || this.initGpuText(htmlText);\n    }\n\n    public initGpuText(htmlText: HTMLText)\n    {\n        const gpuTextData: HTMLTextPipe['_gpuText'][number] = {\n            texture: Texture.EMPTY,\n            currentKey: '--',\n            batchableSprite: BigPool.get(BatchableSprite),\n            textureNeedsUploading: false,\n            generatingTexture: false,\n        };\n\n        const batchableSprite = gpuTextData.batchableSprite;\n\n        batchableSprite.renderable = htmlText;\n        batchableSprite.texture = Texture.EMPTY;\n        batchableSprite.bounds = { minX: 0, maxX: 1, minY: 0, maxY: 0 };\n        batchableSprite.roundPixels = (this._renderer._roundPixels | htmlText._roundPixels) as 0 | 1;\n\n        this._gpuText[htmlText.uid] = gpuTextData;\n\n        // TODO perhaps manage this outside this pipe? (a bit like how we update / add)\n        htmlText.on('destroyed', () =>\n        {\n            this.destroyRenderable(htmlText);\n        });\n\n        return gpuTextData;\n    }\n\n    public destroy()\n    {\n        for (const i in this._gpuText)\n        {\n            this._destroyRenderableById(i as unknown as number);\n        }\n\n        this._gpuText = null;\n        this._renderer = null;\n    }\n}\n\n"],"names":[],"mappings":"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"}