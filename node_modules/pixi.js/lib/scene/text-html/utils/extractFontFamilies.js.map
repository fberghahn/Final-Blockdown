{"version":3,"file":"extractFontFamilies.js","sources":["../../../../src/scene/text-html/utils/extractFontFamilies.ts"],"sourcesContent":["import type { HTMLTextStyle } from '../HtmlTextStyle';\n\n/**\n * Extracts font families from text. It will extract font families from the style, tagStyles and any font families\n * embedded in the text. It should also strip out duplicates as it goes.\n * @param  text - The text to extract font families from\n * @param style - The style to extract font families from\n * @returns {string[]} - The font families as an array of strings\n */\nexport function extractFontFamilies(text: string, style: HTMLTextStyle): string[]\n{\n    const fontFamily = style.fontFamily;\n    const fontFamilies: string[] = [];\n    const dedupe: Record<string, boolean> = {};\n\n    // first ensure fonts are loaded inline..\n    // find any font..\n    const regex = /font-family:([^;\"\\s]+)/g;\n\n    const matches = text.match(regex);\n\n    function addFontFamily(fontFamily: string)\n    {\n        if (!dedupe[fontFamily])\n        {\n            fontFamilies.push(fontFamily);\n\n            dedupe[fontFamily] = true;\n        }\n    }\n\n    if (Array.isArray(fontFamily))\n    {\n        for (let i = 0; i < fontFamily.length; i++)\n        {\n            addFontFamily(fontFamily[i]);\n        }\n    }\n    else\n    {\n        addFontFamily(fontFamily);\n    }\n\n    if (matches)\n    {\n        matches.forEach((match) =>\n        {\n            const fontFamily = match.split(':')[1].trim();\n\n            addFontFamily(fontFamily);\n        });\n    }\n\n    for (const i in style.tagStyles)\n    {\n        const fontFamily = style.tagStyles[i].fontFamily;\n\n        addFontFamily(fontFamily as string);\n    }\n\n    return fontFamilies;\n}\n"],"names":["fontFamily"],"mappings":";;;AASgB,SAAA,mBAAA,CAAoB,MAAc,KAClD,EAAA;AACI,EAAA,MAAM,aAAa,KAAM,CAAA,UAAA,CAAA;AACzB,EAAA,MAAM,eAAyB,EAAC,CAAA;AAChC,EAAA,MAAM,SAAkC,EAAC,CAAA;AAIzC,EAAA,MAAM,KAAQ,GAAA,yBAAA,CAAA;AAEd,EAAM,MAAA,OAAA,GAAU,IAAK,CAAA,KAAA,CAAM,KAAK,CAAA,CAAA;AAEhC,EAAA,SAAS,cAAcA,WACvB,EAAA;AACI,IAAI,IAAA,CAAC,MAAOA,CAAAA,WAAU,CACtB,EAAA;AACI,MAAA,YAAA,CAAa,KAAKA,WAAU,CAAA,CAAA;AAE5B,MAAA,MAAA,CAAOA,WAAU,CAAI,GAAA,IAAA,CAAA;AAAA,KACzB;AAAA,GACJ;AAEA,EAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,UAAU,CAC5B,EAAA;AACI,IAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,UAAA,CAAW,QAAQ,CACvC,EAAA,EAAA;AACI,MAAc,aAAA,CAAA,UAAA,CAAW,CAAC,CAAC,CAAA,CAAA;AAAA,KAC/B;AAAA,GAGJ,MAAA;AACI,IAAA,aAAA,CAAc,UAAU,CAAA,CAAA;AAAA,GAC5B;AAEA,EAAA,IAAI,OACJ,EAAA;AACI,IAAQ,OAAA,CAAA,OAAA,CAAQ,CAAC,KACjB,KAAA;AACI,MAAA,MAAMA,cAAa,KAAM,CAAA,KAAA,CAAM,GAAG,CAAE,CAAA,CAAC,EAAE,IAAK,EAAA,CAAA;AAE5C,MAAA,aAAA,CAAcA,WAAU,CAAA,CAAA;AAAA,KAC3B,CAAA,CAAA;AAAA,GACL;AAEA,EAAW,KAAA,MAAA,CAAA,IAAK,MAAM,SACtB,EAAA;AACI,IAAA,MAAMA,WAAa,GAAA,KAAA,CAAM,SAAU,CAAA,CAAC,CAAE,CAAA,UAAA,CAAA;AAEtC,IAAA,aAAA,CAAcA,WAAoB,CAAA,CAAA;AAAA,GACtC;AAEA,EAAO,OAAA,YAAA,CAAA;AACX;;;;"}