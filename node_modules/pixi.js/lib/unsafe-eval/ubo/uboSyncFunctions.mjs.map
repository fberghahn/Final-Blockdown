{"version":3,"file":"uboSyncFunctions.mjs","sources":["../../../src/unsafe-eval/ubo/uboSyncFunctions.ts"],"sourcesContent":["/**\n * This file is auto generated by scripts/utils/autoGenerateUnsafeEvalFunctions.ts\n * Do not edit manually - or you will be sad.\n */\n\nimport type { UNIFORM_TYPES } from '../../rendering/renderers/shared/shader/types';\n\nexport type UboUploadFunction = (name: string, data: Float32Array, offset: number, uv: any, v: any) => void;\nexport const uboParserFunctions: UboUploadFunction[] = [\n    (name: string, data: Float32Array, offset: number, uv: any, _v: any): void =>\n    {\n        const matrix = uv[name].toArray(true);\n\n        data[offset] = matrix[0];\n        data[offset + 1] = matrix[1];\n        data[offset + 2] = matrix[2];\n        data[offset + 4] = matrix[3];\n        data[offset + 5] = matrix[4];\n        data[offset + 6] = matrix[5];\n        data[offset + 8] = matrix[6];\n        data[offset + 9] = matrix[7];\n        data[offset + 10] = matrix[8];\n    },\n    (name: string, data: Float32Array, offset: number, uv: any, v: any): void =>\n    {\n        v = uv[name];\n        data[offset] = v.x;\n        data[offset + 1] = v.y;\n        data[offset + 2] = v.width;\n        data[offset + 3] = v.height;\n    },\n    (name: string, data: Float32Array, offset: number, uv: any, v: any): void =>\n    {\n        v = uv[name];\n        data[offset] = v.x;\n        data[offset + 1] = v.y;\n    },\n    (name: string, data: Float32Array, offset: number, uv: any, v: any): void =>\n    {\n        v = uv[name];\n        data[offset] = v.red;\n        data[offset + 1] = v.green;\n        data[offset + 2] = v.blue;\n        data[offset + 3] = v.alpha;\n    },\n    (name: string, data: Float32Array, offset: number, uv: any, v: any): void =>\n    {\n        v = uv[name];\n        data[offset] = v.red;\n        data[offset + 1] = v.green;\n        data[offset + 2] = v.blue;\n    },\n];\nexport const uboSingleFunctionsWGSL: Record<UNIFORM_TYPES | string, UboUploadFunction> = {\n    f32: (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v;\n    },\n    i32: (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v;\n    },\n    'vec2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n    },\n    'vec3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n    },\n    'vec4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    },\n    'mat2x2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    },\n    'mat3x3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];\n    },\n    'mat4x4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 16; i++)\n        {\n            data[offset + i] = v[i];\n        }\n    },\n    'mat3x2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            data[offset + (((i / 3) | 0) * 4) + (i % 3)] = v[i];\n        }\n    },\n    'mat4x2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 8; i++)\n        {\n            data[offset + (((i / 4) | 0) * 4) + (i % 4)] = v[i];\n        }\n    },\n    'mat2x3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            data[offset + (((i / 2) | 0) * 4) + (i % 2)] = v[i];\n        }\n    },\n    'mat4x3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 12; i++)\n        {\n            data[offset + (((i / 4) | 0) * 4) + (i % 4)] = v[i];\n        }\n    },\n    'mat2x4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 8; i++)\n        {\n            data[offset + (((i / 2) | 0) * 4) + (i % 2)] = v[i];\n        }\n    },\n    'mat3x4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 12; i++)\n        {\n            data[offset + (((i / 3) | 0) * 4) + (i % 3)] = v[i];\n        }\n    },\n};\nexport const uboSingleFunctionsSTD40: Record<UNIFORM_TYPES | string, UboUploadFunction> = {\n    f32: (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v;\n    },\n    i32: (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v;\n    },\n    'vec2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n    },\n    'vec3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n    },\n    'vec4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    },\n    'mat2x2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];\n    },\n    'mat3x3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];\n    },\n    'mat4x4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 16; i++)\n        {\n            data[offset + i] = v[i];\n        }\n    },\n    'mat3x2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            data[offset + (((i / 3) | 0) * 4) + (i % 3)] = v[i];\n        }\n    },\n    'mat4x2<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 8; i++)\n        {\n            data[offset + (((i / 4) | 0) * 4) + (i % 4)] = v[i];\n        }\n    },\n    'mat2x3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 6; i++)\n        {\n            data[offset + (((i / 2) | 0) * 4) + (i % 2)] = v[i];\n        }\n    },\n    'mat4x3<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 12; i++)\n        {\n            data[offset + (((i / 4) | 0) * 4) + (i % 4)] = v[i];\n        }\n    },\n    'mat2x4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 8; i++)\n        {\n            data[offset + (((i / 2) | 0) * 4) + (i % 2)] = v[i];\n        }\n    },\n    'mat3x4<f32>': (_name: string, data: Float32Array, offset: number, _uv: any, v: any): void =>\n    {\n        for (let i = 0; i < 12; i++)\n        {\n            data[offset + (((i / 3) | 0) * 4) + (i % 3)] = v[i];\n        }\n    },\n};\n"],"names":[],"mappings":"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"}