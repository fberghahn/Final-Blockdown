{"version":3,"file":"uniformSyncFunctions.js","sources":["../../../src/unsafe-eval/uniforms/uniformSyncFunctions.ts"],"sourcesContent":["/**\n * This file is auto generated by scripts/utils/autoGenerateUnsafeEvalFunctions.ts\n * Do not edit manually - or you will be sad.\n */\n\nimport type { UNIFORM_TYPES } from '../../rendering/renderers/shared/shader/types';\n\nexport type UniformUploadFunction = (name: string, cu: any, cv: any, v: any, ud: any, uv: any, gl: any) => void;\n\nexport const uniformSingleParserFunctions: Record<UNIFORM_TYPES | string, UniformUploadFunction> = {\n    f32(name: string, cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv !== v)\n        {\n            cu.value = v;\n            gl.uniform1f(ud[name].location, v);\n        }\n    },\n    'vec2<f32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2f(ud[name].location, v[0], v[1]);\n        }\n    },\n    'vec3<f32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3f(ud[name].location, v[0], v[1], v[2]);\n        }\n    },\n    'vec4<f32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4f(ud[name].location, v[0], v[1], v[2], v[3]);\n        }\n    },\n    i32(name: string, cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv !== v)\n        {\n            cu.value = v;\n            gl.uniform1i(ud[name].location, v);\n        }\n    },\n    'vec2<i32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(ud[name].location, v[0], v[1]);\n        }\n    },\n    'vec3<i32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(ud[name].location, v[0], v[1], v[2]);\n        }\n    },\n    'vec4<i32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(ud[name].location, v[0], v[1], v[2], v[3]);\n        }\n    },\n    u32(name: string, cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv !== v)\n        {\n            cu.value = v;\n            gl.uniform1ui(ud[name].location, v);\n        }\n    },\n    'vec2<u32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2ui(ud[name].location, v[0], v[1]);\n        }\n    },\n    'vec3<u32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3ui(ud[name].location, v[0], v[1], v[2]);\n        }\n    },\n    'vec4<u32>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4ui(ud[name].location, v[0], v[1], v[2], v[3]);\n        }\n    },\n    bool(name: string, cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv !== v)\n        {\n            cu.value = v;\n            gl.uniform1i(ud[name].location, v);\n        }\n    },\n    'vec2<bool>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(ud[name].location, v[0], v[1]);\n        }\n    },\n    'vec3<bool>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(ud[name].location, v[0], v[1], v[2]);\n        }\n    },\n    'vec4<bool>'(name: string, _cu: any, cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n        {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(ud[name].location, v[0], v[1], v[2], v[3]);\n        }\n    },\n    'mat2x2<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniformMatrix2fv(ud[name].location, false, v);\n    },\n    'mat3x3<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniformMatrix3fv(ud[name].location, false, v);\n    },\n    'mat4x4<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniformMatrix4fv(ud[name].location, false, v);\n    },\n};\n\nexport const uniformArrayParserFunctions: Record<UNIFORM_TYPES | string, UniformUploadFunction> = {\n    f32(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform1fv(ud[name].location, v);\n    },\n    'vec2<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform2fv(ud[name].location, v);\n    },\n    'vec3<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform3fv(ud[name].location, v);\n    },\n    'vec4<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform4fv(ud[name].location, v);\n    },\n    'mat2x2<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniformMatrix2fv(ud[name].location, false, v);\n    },\n    'mat3x3<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniformMatrix3fv(ud[name].location, false, v);\n    },\n    'mat4x4<f32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniformMatrix4fv(ud[name].location, false, v);\n    },\n    i32(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform1iv(ud[name].location, v);\n    },\n    'vec2<i32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform2iv(ud[name].location, v);\n    },\n    'vec3<i32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform3iv(ud[name].location, v);\n    },\n    'vec4<i32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform4iv(ud[name].location, v);\n    },\n    u32(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform1iv(ud[name].location, v);\n    },\n    'vec2<u32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform2iv(ud[name].location, v);\n    },\n    'vec3<u32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform3iv(ud[name].location, v);\n    },\n    'vec4<u32>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform4iv(ud[name].location, v);\n    },\n    bool(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform1iv(ud[name].location, v);\n    },\n    'vec2<bool>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform2iv(ud[name].location, v);\n    },\n    'vec3<bool>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform3iv(ud[name].location, v);\n    },\n    'vec4<bool>'(name: string, _cu: any, _cv: any, v: any, ud: any, _uv: any, gl: any): void\n    {\n        gl.uniform4iv(ud[name].location, v);\n    },\n};\n\nexport const uniformParserFunctions: UniformUploadFunction[] = [\n    (name: string, _cu: any, _cv: any, _v: any, ud: any, uv: any, gl: any): void =>\n    {\n        gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n    },\n    (name: string, _cu: any, cv: any, v: any, ud: any, uv: any, gl: any): void =>\n    {\n        cv = ud[name].value;\n        v = uv[name];\n        if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height)\n        {\n            cv[0] = v.x;\n            cv[1] = v.y;\n            cv[2] = v.width;\n            cv[3] = v.height;\n            gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n        }\n    },\n    (name: string, _cu: any, cv: any, v: any, ud: any, uv: any, gl: any): void =>\n    {\n        cv = ud[name].value;\n        v = uv[name];\n        if (cv[0] !== v.x || cv[1] !== v.y)\n        {\n            cv[0] = v.x;\n            cv[1] = v.y;\n            gl.uniform2f(ud[name].location, v.x, v.y);\n        }\n    },\n    (name: string, _cu: any, cv: any, v: any, ud: any, uv: any, gl: any): void =>\n    {\n        cv = ud[name].value;\n        v = uv[name];\n        if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha)\n        {\n            cv[0] = v.red;\n            cv[1] = v.green;\n            cv[2] = v.blue;\n            cv[3] = v.alpha;\n            gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n        }\n    },\n    (name: string, _cu: any, cv: any, v: any, ud: any, uv: any, gl: any): void =>\n    {\n        cv = ud[name].value;\n        v = uv[name];\n        if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue)\n        {\n            cv[0] = v.red;\n            cv[1] = v.green;\n            cv[2] = v.blue;\n            gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n        }\n    },\n];\n"],"names":[],"mappings":"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"}