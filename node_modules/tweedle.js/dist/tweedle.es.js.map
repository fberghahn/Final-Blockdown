{"version":3,"file":"tweedle.es.js","sources":["../src/Now.ts","../src/Group.ts","../src/Easing.ts","../src/Interpolation.ts","../src/Sequence.ts","../src/Defaults.ts","../src/Tween.ts","../src/Version.ts"],"sourcesContent":["/**\n * Polyfilled function to get the current time in miliseconds.\n * It tries to use `process.hrtime()`, `performance.now()`, `Date.now()` or `new Date().getTime()` in that order.\n */\nexport let NOW: () => number;\n\n// Include a performance.now polyfill.\n// In node.js, use process.hrtime.\n\n// @ts-ignore\nif (typeof self == \"undefined\" && typeof process !== \"undefined\" && process.hrtime) {\n\tNOW = function (): number {\n\t\t// @ts-ignore\n\t\tconst time = process.hrtime();\n\n\t\t// Convert [seconds, nanoseconds] to milliseconds.\n\t\treturn time[0] * 1000 + time[1] / 1000000;\n\t};\n}\n// In a browser, use self.performance.now if it is available.\nelse if (typeof self !== \"undefined\" && self.performance !== undefined && self.performance.now !== undefined) {\n\t// This must be bound, because directly assigning this function\n\t// leads to an invocation exception in Chrome.\n\tNOW = self.performance.now.bind(self.performance);\n}\n// Use Date.now if it is available.\nelse if (Date.now !== undefined) {\n\tNOW = Date.now;\n}\n// Otherwise, use 'new Date().getTime()'.\nelse {\n\tNOW = function (): number {\n\t\treturn new Date().getTime();\n\t};\n}\n","import { NOW } from \"./Now\";\nimport type { Tween } from \"./Tween\";\n\n/**\n * A group is a class that allows you to manage many tweens from one place.\n *\n * A tween will ALWAYS belong to a group. If no group is assigned it will default to the static shared group: `Group.shared`.\n */\nexport class Group {\n\tprivate _tweens: {\n\t\t[key: string]: Tween<any>;\n\t} = {};\n\n\tprivate static _shared: Group;\n\n\t/**\n\t * A tween without an explicit group will default to this shared static one.\n\t */\n\tpublic static get shared(): Group {\n\t\tif (!Group._shared) {\n\t\t\tGroup._shared = new Group();\n\t\t}\n\t\treturn Group._shared;\n\t}\n\n\tprivate _paused: boolean = false;\n\n\t/**\n\t * A paused group will skip updating all the asociated tweens.\n\t * _To control all tweens, use {@link Group.getAll} to get an array with all tweens._\n\t * @returns returns true if this group is paused.\n\t */\n\tpublic isPaused(): boolean {\n\t\treturn this._paused;\n\t}\n\n\t/**\n\t * Pauses this group. If a group was already paused, this has no effect.\n\t * A paused group will skip updating all the asociated tweens.\n\t * _To control all tweens, use {@link Group.getAll} to get an array with all tweens._\n\t */\n\tpublic pause(): void {\n\t\tthis._paused = true;\n\t}\n\n\t/**\n\t * Resumes this group. If a group was not paused, this has no effect.\n\t * A paused group will skip updating all the asociated tweens.\n\t * _To control all tweens, use {@link Group.getAll} to get an array with all tweens._\n\t */\n\tpublic resume(): void {\n\t\tthis._paused = false;\n\t}\n\n\tprivate _lastUpdateTime: number = undefined;\n\n\t/**\n\t * Function used by the group to know what time is it.\n\t * Used to calculate the deltaTime in case you call update without the parameter.\n\t */\n\tpublic now: () => number = NOW; // used to calculate deltatime in case you stop providing one\n\n\t/**\n\t * Returns all the tweens in this group.\n\t *\n\t * _note: only **running** tweens are in a group._\n\t * @returns all the running tweens.\n\t */\n\tpublic getAll(): Array<Tween<any>> {\n\t\treturn Object.keys(this._tweens).map((tweenId) => this._tweens[tweenId]);\n\t}\n\n\t/**\n\t * Removes all the tweens in this group.\n\t *\n\t * _note: this will not modify the group reference inside the tween object_\n\t */\n\tpublic removeAll(): void {\n\t\tthis._tweens = {};\n\t}\n\n\t/**\n\t * Adds a tween to this group.\n\t *\n\t * _note: this will not modify the group reference inside the tween object_\n\t * @param tween Tween to add.\n\t */\n\tpublic add(tween: Tween<any>): void {\n\t\tthis._tweens[tween.getId()] = tween;\n\t}\n\n\t/**\n\t * Removes a tween from this group.\n\t *\n\t * _note: this will not modify the group reference inside the tween object_\n\t * @param tween\n\t */\n\tpublic remove(tween: Tween<any>): void {\n\t\tdelete this._tweens[tween.getId()];\n\t}\n\n\t/**\n\t * Updates all the tweens in this group.\n\t *\n\t * If a tween is stopped, paused, finished or non started it will be removed from the group.\n\t *\n\t *  Tweens are updated in \"batches\". If you add a new tween during an\n\t *  update, then the new tween will be updated in the next batch.\n\t *  If you remove a tween during an update, it may or may not be updated.\n\t *  However, if the removed tween was added during the current batch,\n\t *  then it will not be updated.\n\t * @param deltaTime - Amount of **miliseconds** that have passed since last excecution. If not provided it will be calculated using the {@link Group.now} function\n\t * @param preserve - Prevent the removal of stopped, paused, finished or non started tweens.\n\t * @returns returns true if the group is not empty and it is not paused.\n\t */\n\tpublic update(deltaTime?: number, preserve: boolean = false): boolean {\n\t\t// move forward the automatic dt if needed\n\t\tif (deltaTime == undefined) {\n\t\t\t// now varies from line to line, that's why I manually use 0 as dt\n\t\t\tif (this._lastUpdateTime == undefined) {\n\t\t\t\tthis._lastUpdateTime = this.now();\n\t\t\t\tdeltaTime = 0;\n\t\t\t} else {\n\t\t\t\tdeltaTime = this.now() - this._lastUpdateTime;\n\t\t\t}\n\t\t}\n\t\tthis._lastUpdateTime = this.now();\n\n\t\t// exit early if the entire group is paused\n\t\tif (this._paused) {\n\t\t\treturn false;\n\t\t}\n\n\t\tconst tweenIds = Object.keys(this._tweens);\n\t\tif (tweenIds.length == 0) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < tweenIds.length; i++) {\n\t\t\tconst tween = this._tweens[tweenIds[i]];\n\n\t\t\t// groups call the preserve with true because they like to delete themselves in a different way.\n\t\t\tif (tween && tween.update(deltaTime, true) == false && !preserve) {\n\t\t\t\tdelete this._tweens[tweenIds[i]];\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n}\n","/**\n * The type for a function that takes a number between 0 and 1 and returns another number between 0 and 1\n */\nexport type EasingFunction = (amount: number) => number;\n\n/**\n * The Ease class provides a collection of easing functions.\n *\n * These functions take in a parameter between 0 and 1 as the ratio and give out a new ratio.\n *\n * These are [Robert Penner](http://www.robertpenner.com/easing_terms_of_use.html)'s optimized formulas.\n *\n * Need help picking one? [Check this out!](https://easings.net/)\n */\nexport const Easing = {\n\tStep: {\n\t\tNone(amount: number): number {\n\t\t\treturn amount < 0.5 ? 0 : 1;\n\t\t},\n\t},\n\tLinear: {\n\t\tNone(amount: number): number {\n\t\t\treturn amount;\n\t\t},\n\t},\n\tQuadratic: {\n\t\tIn(amount: number): number {\n\t\t\treturn amount * amount;\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\treturn amount * (2 - amount);\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\tif ((amount *= 2) < 1) {\n\t\t\t\treturn 0.5 * amount * amount;\n\t\t\t}\n\n\t\t\treturn -0.5 * (--amount * (amount - 2) - 1);\n\t\t},\n\t},\n\tCubic: {\n\t\tIn(amount: number): number {\n\t\t\treturn amount * amount * amount;\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\treturn --amount * amount * amount + 1;\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\tif ((amount *= 2) < 1) {\n\t\t\t\treturn 0.5 * amount * amount * amount;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((amount -= 2) * amount * amount + 2);\n\t\t},\n\t},\n\tQuartic: {\n\t\tIn(amount: number): number {\n\t\t\treturn amount * amount * amount * amount;\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\treturn 1 - --amount * amount * amount * amount;\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\tif ((amount *= 2) < 1) {\n\t\t\t\treturn 0.5 * amount * amount * amount * amount;\n\t\t\t}\n\n\t\t\treturn -0.5 * ((amount -= 2) * amount * amount * amount - 2);\n\t\t},\n\t},\n\tQuintic: {\n\t\tIn(amount: number): number {\n\t\t\treturn amount * amount * amount * amount * amount;\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\treturn --amount * amount * amount * amount * amount + 1;\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\tif ((amount *= 2) < 1) {\n\t\t\t\treturn 0.5 * amount * amount * amount * amount * amount;\n\t\t\t}\n\n\t\t\treturn 0.5 * ((amount -= 2) * amount * amount * amount * amount + 2);\n\t\t},\n\t},\n\tSinusoidal: {\n\t\tIn(amount: number): number {\n\t\t\treturn 1 - Math.cos((amount * Math.PI) / 2);\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\treturn Math.sin((amount * Math.PI) / 2);\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\treturn 0.5 * (1 - Math.cos(Math.PI * amount));\n\t\t},\n\t},\n\tExponential: {\n\t\tIn(amount: number): number {\n\t\t\treturn amount == 0 ? 0 : Math.pow(1024, amount - 1);\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\treturn amount == 1 ? 1 : 1 - Math.pow(2, -10 * amount);\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\tif (amount == 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (amount == 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tif ((amount *= 2) < 1) {\n\t\t\t\treturn 0.5 * Math.pow(1024, amount - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (-Math.pow(2, -10 * (amount - 1)) + 2);\n\t\t},\n\t},\n\tCircular: {\n\t\tIn(amount: number): number {\n\t\t\treturn 1 - Math.sqrt(1 - amount * amount);\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\treturn Math.sqrt(1 - --amount * amount);\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\tif ((amount *= 2) < 1) {\n\t\t\t\treturn -0.5 * (Math.sqrt(1 - amount * amount) - 1);\n\t\t\t}\n\n\t\t\treturn 0.5 * (Math.sqrt(1 - (amount -= 2) * amount) + 1);\n\t\t},\n\t},\n\tElastic: {\n\t\tIn(amount: number): number {\n\t\t\tif (amount == 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (amount == 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn -Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\tif (amount == 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (amount == 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\treturn Math.pow(2, -10 * amount) * Math.sin((amount - 0.1) * 5 * Math.PI) + 1;\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\tif (amount == 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tif (amount == 1) {\n\t\t\t\treturn 1;\n\t\t\t}\n\n\t\t\tamount *= 2;\n\n\t\t\tif (amount < 1) {\n\t\t\t\treturn -0.5 * Math.pow(2, 10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI);\n\t\t\t}\n\n\t\t\treturn 0.5 * Math.pow(2, -10 * (amount - 1)) * Math.sin((amount - 1.1) * 5 * Math.PI) + 1;\n\t\t},\n\t},\n\tBack: {\n\t\tIn(amount: number): number {\n\t\t\tconst s = 1.70158;\n\n\t\t\treturn amount * amount * ((s + 1) * amount - s);\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\tconst s = 1.70158;\n\n\t\t\treturn --amount * amount * ((s + 1) * amount + s) + 1;\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\tconst s = 1.70158 * 1.525;\n\n\t\t\tif ((amount *= 2) < 1) {\n\t\t\t\treturn 0.5 * (amount * amount * ((s + 1) * amount - s));\n\t\t\t}\n\n\t\t\treturn 0.5 * ((amount -= 2) * amount * ((s + 1) * amount + s) + 2);\n\t\t},\n\t},\n\tBounce: {\n\t\tIn(amount: number): number {\n\t\t\treturn 1 - Easing.Bounce.Out(1 - amount);\n\t\t},\n\t\tOut(amount: number): number {\n\t\t\tif (amount < 1 / 2.75) {\n\t\t\t\treturn 7.5625 * amount * amount;\n\t\t\t} else if (amount < 2 / 2.75) {\n\t\t\t\treturn 7.5625 * (amount -= 1.5 / 2.75) * amount + 0.75;\n\t\t\t} else if (amount < 2.5 / 2.75) {\n\t\t\t\treturn 7.5625 * (amount -= 2.25 / 2.75) * amount + 0.9375;\n\t\t\t}\n\n\t\t\treturn 7.5625 * (amount -= 2.625 / 2.75) * amount + 0.984375;\n\t\t},\n\t\tInOut(amount: number): number {\n\t\t\tif (amount < 0.5) {\n\t\t\t\treturn Easing.Bounce.In(amount * 2) * 0.5;\n\t\t\t}\n\n\t\t\treturn Easing.Bounce.Out(amount * 2 - 1) * 0.5 + 0.5;\n\t\t},\n\t},\n};\n","/**\n * The type for a function that picks a value by interpolating the elements of the array given.\n */\nexport type InterpolationFunction = (v: number[], k: number) => number;\n\n/**\n * Object containing common interpolation functions.\n * These functions can be passed in the {@link Tween.interpolation} argument and **will only affect fields where you gave an array as target value**\n */\nexport const Interpolation = {\n\t/**\n\t * Geometric interpolation functions. Good for interpolating positions in space.\n\t */\n\tGeom: {\n\t\t/**\n\t\t * Linear interpolation is like drawing straight lines between the points.\n\t\t */\n\t\tLinear(v: number[], k: number): number {\n\t\t\tconst m = v.length - 1;\n\t\t\tconst f = m * k;\n\t\t\tconst i = Math.floor(f);\n\t\t\tconst fn = Interpolation.Utils.Linear;\n\n\t\t\tif (k < 0) {\n\t\t\t\treturn fn(v[0], v[1], f);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn fn(v[m], v[m - 1], m - f);\n\t\t\t}\n\n\t\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n\t\t},\n\n\t\t/**\n\t\t * A Bézier curve is defined by a set of control points P0 through Pn, where n is called its order.\n\t\t * The first and last control points are always the end points of the curve; however, the intermediate control points (if any) generally do not lie on the curve.\n\t\t *\n\t\t * https://en.wikipedia.org/wiki/B%C3%A9zier_curve#Explicit_definition\n\t\t */\n\t\tBezier(v: number[], k: number): number {\n\t\t\tlet b = 0;\n\t\t\tconst n = v.length - 1;\n\t\t\tconst pw = Math.pow;\n\t\t\tconst bn = Interpolation.Utils.Bernstein;\n\n\t\t\tfor (let i = 0; i <= n; i++) {\n\t\t\t\tb += bn(n, i) * pw(1 - k, n - i) * pw(k, i) * v[i];\n\t\t\t}\n\n\t\t\treturn b;\n\t\t},\n\n\t\t/**\n\t\t * Assumes your points are a succession of quadratic bezier curves where the endpoint of one is the start point of the next one.\n\t\t * for example: `[Point in the curve, Control point, Point in the curve, Control point, Point in the curve]`\n\t\t */\n\t\tQuadraticBezier(v: number[], k: number): number {\n\t\t\tlet b = 0;\n\t\t\tconst n = v.length - 1;\n\n\t\t\tif (k == 1) {\n\t\t\t\treturn v[n];\n\t\t\t}\n\n\t\t\tconst pw = Math.pow;\n\t\t\tconst bn = Interpolation.Utils.Bernstein;\n\n\t\t\tconst f = n * k;\n\t\t\tconst i = Math.floor(f);\n\t\t\tconst t = (f - i) * 0.5 + 0.5 * (i % 2);\n\t\t\tconst i0: number = i - (i % 2);\n\t\t\tconst i1: number = i0 + 1;\n\t\t\tconst i2: number = i0 + 2;\n\n\t\t\tb += bn(2, 0) * pw(1 - t, 2 - 0) * pw(t, 0) * v[i0];\n\t\t\tb += bn(2, 1) * pw(1 - t, 2 - 1) * pw(t, 1) * v[i1];\n\t\t\tb += bn(2, 2) * pw(1 - t, 2 - 2) * pw(t, 2) * v[i2];\n\n\t\t\treturn b;\n\t\t},\n\n\t\t/**\n\t\t * Assumes your points are a succession of cubic bezier curves where the endpoint of one is the start point of the next one.\n\t\t * for example: `[Point in the curve, Control point, Control point, Point in the curve, Control point, Control point, Point in the curve]`\n\t\t */\n\t\tCubicBezier(v: number[], k: number): number {\n\t\t\tlet b = 0;\n\t\t\tconst n = v.length - 1;\n\n\t\t\tif (k == 1) {\n\t\t\t\treturn v[n];\n\t\t\t}\n\n\t\t\tconst pw = Math.pow;\n\t\t\tconst bn = Interpolation.Utils.Bernstein;\n\n\t\t\tconst f = n * k;\n\t\t\tconst i = Math.floor(f);\n\n\t\t\tconst t = (f - i) * (1 / 3) + (1 / 3) * (i % 3);\n\n\t\t\tconst i0: number = i - (i % 3);\n\t\t\tconst i1: number = i0 + 1;\n\t\t\tconst i2: number = i0 + 2;\n\t\t\tconst i3: number = i0 + 3;\n\n\t\t\tb += bn(3, 0) * pw(1 - t, 3 - 0) * pw(t, 0) * v[i0];\n\t\t\tb += bn(3, 1) * pw(1 - t, 3 - 1) * pw(t, 1) * v[i1];\n\t\t\tb += bn(3, 2) * pw(1 - t, 3 - 2) * pw(t, 2) * v[i2];\n\t\t\tb += bn(3, 3) * pw(1 - t, 3 - 3) * pw(t, 3) * v[i3];\n\n\t\t\treturn b;\n\t\t},\n\n\t\t/**\n\t\t * A Catmullrom spline is a curve where the original set of points is also used as control points.\n\t\t * Usually Catmullrom splines need two extra elements at the beginning and the end of the point set. This function contemplates that and doesn't need them.\n\t\t *\n\t\t * https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Catmull%E2%80%93Rom_spline\n\t\t */\n\t\tCatmullRom(v: number[], k: number): number {\n\t\t\tconst m = v.length - 1;\n\t\t\tlet f = m * k;\n\t\t\tlet i = Math.floor(f);\n\t\t\tconst fn = Interpolation.Utils.CatmullRom;\n\n\t\t\tif (v[0] == v[m]) {\n\t\t\t\tif (k < 0) {\n\t\t\t\t\ti = Math.floor((f = m * (1 + k)));\n\t\t\t\t}\n\n\t\t\t\treturn fn(v[(i - 1 + m) % m], v[i], v[(i + 1) % m], v[(i + 2) % m], f - i);\n\t\t\t}\n\t\t\tif (k < 0) {\n\t\t\t\treturn v[0] - (fn(v[0], v[0], v[1], v[1], -f) - v[0]);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn v[m] - (fn(v[m], v[m], v[m - 1], v[m - 1], f - m) - v[m]);\n\t\t\t}\n\n\t\t\treturn fn(v[i ? i - 1 : 0], v[i], v[m < i + 1 ? m : i + 1], v[m < i + 2 ? m : i + 2], f - i);\n\t\t},\n\t},\n\t/**\n\t * Given the spinny nature of angles, sometimes it's better to go back to get to the right place earlier.\n\t * This functions help with that.\n\t */\n\tAngle: {\n\t\t/**\n\t\t * Normalizes angles between 0 and 2pi and then rotates the object in the shortest direction.\n\t\t */\n\t\tRadians(v: number[], k: number): number {\n\t\t\tconst m = v.length - 1;\n\t\t\tconst f = m * k;\n\t\t\tconst i = Math.floor(f);\n\t\t\tconst fn = Interpolation.Utils.WrapLinear;\n\n\t\t\tif (k < 0) {\n\t\t\t\treturn fn(v[0], v[1], f, 2 * Math.PI);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn fn(v[m], v[m - 1], m - f, 2 * Math.PI);\n\t\t\t}\n\n\t\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i, 2 * Math.PI);\n\t\t},\n\n\t\t/**\n\t\t * Normalizes angles between 0 and 360 and then rotates the object in the shortest direction.\n\t\t */\n\t\tDegrees(v: number[], k: number): number {\n\t\t\tconst m = v.length - 1;\n\t\t\tconst f = m * k;\n\t\t\tconst i = Math.floor(f);\n\t\t\tconst fn = Interpolation.Utils.WrapLinear;\n\n\t\t\tif (k < 0) {\n\t\t\t\treturn fn(v[0], v[1], f, 360);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn fn(v[m], v[m - 1], m - f, 360);\n\t\t\t}\n\n\t\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i, 360);\n\t\t},\n\t},\n\n\t/**\n\t * Even if colors are numbers, interpolating them can be tricky.\n\t */\n\tColor: {\n\t\t/**\n\t\t * Interpolates the color by their channels Red, Green, and Blue.\n\t\t */\n\t\tRGB(v: number[], k: number): number {\n\t\t\tconst m = v.length - 1;\n\t\t\tconst f = m * k;\n\t\t\tconst i = Math.floor(f);\n\t\t\tconst fn = Interpolation.Utils.RGBLinear;\n\n\t\t\tif (k < 0) {\n\t\t\t\treturn fn(v[0], v[1], f);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn fn(v[m], v[m - 1], m - f);\n\t\t\t}\n\n\t\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n\t\t},\n\n\t\t/**\n\t\t * Interpolates the color by their Hue, Saturation, and Value.\n\t\t */\n\t\tHSV(v: number[], k: number): number {\n\t\t\tconst m = v.length - 1;\n\t\t\tconst f = m * k;\n\t\t\tconst i = Math.floor(f);\n\t\t\tconst fn = Interpolation.Utils.HSVLinear;\n\n\t\t\tif (k < 0) {\n\t\t\t\treturn fn(v[0], v[1], f);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn fn(v[m], v[m - 1], m - f);\n\t\t\t}\n\n\t\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n\t\t},\n\n\t\t/**\n\t\t * Interpolates the color by their Hue, Chroma, and Lightness.\n\t\t */\n\t\tHCL(v: number[], k: number): number {\n\t\t\tconst m = v.length - 1;\n\t\t\tconst f = m * k;\n\t\t\tconst i = Math.floor(f);\n\t\t\tconst fn = Interpolation.Utils.HCLLinear;\n\n\t\t\tif (k < 0) {\n\t\t\t\treturn fn(v[0], v[1], f);\n\t\t\t}\n\n\t\t\tif (k > 1) {\n\t\t\t\treturn fn(v[m], v[m - 1], m - f);\n\t\t\t}\n\n\t\t\treturn fn(v[i], v[i + 1 > m ? m : i + 1], f - i);\n\t\t},\n\t},\n\n\t/**\n\t * Helper functions used to calculate the different interpolations\n\t */\n\tUtils: {\n\t\tRGBsplit(color: number): ARGB {\n\t\t\t// this gets named ARGB but it is actually meaningless. It will work with RGBA just the same.\n\t\t\tconst a = (color >> 24) & 0xff;\n\t\t\tconst r = (color >> 16) & 0xff;\n\t\t\tconst g = (color >> 8) & 0xff;\n\t\t\tconst b = color & 0xff;\n\t\t\treturn { a, r, g, b };\n\t\t},\n\t\tHSVsplit(color: number): AHSV {\n\t\t\tconst rgb = Interpolation.Utils.RGBsplit(color);\n\n\t\t\t(rgb.r /= 255), (rgb.g /= 255), (rgb.b /= 255);\n\n\t\t\tconst max = Math.max(rgb.r, rgb.g, rgb.b);\n\t\t\tconst min = Math.min(rgb.r, rgb.g, rgb.b);\n\t\t\tlet h;\n\t\t\tconst v = max;\n\n\t\t\tconst d = max - min;\n\t\t\tconst s = max == 0 ? 0 : d / max;\n\n\t\t\tif (max == min) {\n\t\t\t\th = 0; // achromatic\n\t\t\t} else {\n\t\t\t\tswitch (max) {\n\t\t\t\t\tcase rgb.r:\n\t\t\t\t\t\th = (rgb.g - rgb.b) / d + (rgb.g < rgb.b ? 6 : 0);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgb.g:\n\t\t\t\t\t\th = (rgb.b - rgb.r) / d + 2;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgb.b:\n\t\t\t\t\t\th = (rgb.r - rgb.g) / d + 4;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\th /= 6;\n\t\t\t}\n\n\t\t\treturn { a: rgb.a, h, s, v };\n\t\t},\n\t\tHSVJoin(color: AHSV): number {\n\t\t\tlet r, g, b;\n\n\t\t\tconst i = Math.floor(color.h * 6);\n\t\t\tconst f = color.h * 6 - i;\n\t\t\tconst p = color.v * (1 - color.s);\n\t\t\tconst q = color.v * (1 - f * color.s);\n\t\t\tconst t = color.v * (1 - (1 - f) * color.s);\n\n\t\t\tswitch (i % 6) {\n\t\t\t\tcase 0:\n\t\t\t\t\t(r = color.v), (g = t), (b = p);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\t(r = q), (g = color.v), (b = p);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t(r = p), (g = color.v), (b = t);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\t(r = p), (g = q), (b = color.v);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\t(r = t), (g = p), (b = color.v);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\t(r = color.v), (g = p), (b = q);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\treturn (color.a << 24) | (r << 16) | (g << 8) | b;\n\t\t},\n\n\t\tHCLSplit(color: number): AHCL {\n\t\t\t/* https://www.chilliant.com/rgb2hsv.html */\n\t\t\tconst HCLgamma = 3;\n\t\t\tconst HCLy0 = 100;\n\t\t\tconst HCLmaxL = 0.530454533953517; // == exp(HCLgamma / HCLy0) - 0.5\n\n\t\t\tconst RGB = Interpolation.Utils.RGBsplit(color);\n\t\t\tconst HCL: AHCL = { a: RGB.a, h: 0, c: 0, l: 0 };\n\t\t\tlet H = 0;\n\t\t\tconst U = Math.min(RGB.r, Math.min(RGB.g, RGB.b));\n\t\t\tconst V = Math.max(RGB.r, Math.max(RGB.g, RGB.b));\n\t\t\tlet Q = HCLgamma / HCLy0;\n\t\t\tHCL.c = V - U;\n\t\t\tif (HCL.c != 0) {\n\t\t\t\tH = Math.atan2(RGB.g - RGB.b, RGB.r - RGB.g) / Math.PI;\n\t\t\t\tQ *= U / V;\n\t\t\t}\n\t\t\tQ = Math.exp(Q);\n\t\t\tHCL.h = (H / 2 - Math.min(H % 1, -H % 1) / 6) % 1;\n\t\t\tHCL.c *= Q;\n\t\t\tHCL.l = Interpolation.Utils.Linear(-U, V, Q) / (HCLmaxL * 2);\n\t\t\treturn HCL;\n\t\t},\n\n\t\tHCLJoin(HCL: AHCL): number {\n\t\t\t/* https://www.chilliant.com/rgb2hsv.html */\n\t\t\tconst HCLgamma = 3;\n\t\t\tconst HCLy0 = 100;\n\t\t\tconst HCLmaxL = 0.530454533953517; // == exp(HCLgamma / HCLy0) - 0.5\n\t\t\tconst RGB: ARGB = { a: HCL.a, r: 0, g: 0, b: 0 };\n\n\t\t\tif (HCL.l != 0) {\n\t\t\t\tlet H = HCL.h;\n\t\t\t\tconst C = HCL.c;\n\t\t\t\tconst L = HCL.l * HCLmaxL;\n\t\t\t\tconst Q = Math.exp((1 - C / (2 * L)) * (HCLgamma / HCLy0));\n\t\t\t\tconst U = (2 * L - C) / (2 * Q - 1);\n\t\t\t\tconst V = C / Q;\n\t\t\t\tconst A = (H + Math.min(((2 * H) % 1) / 4, ((-2 * H) % 1) / 8)) * Math.PI * 2;\n\t\t\t\tlet T;\n\t\t\t\tH *= 6;\n\t\t\t\tif (H <= 0.999) {\n\t\t\t\t\tT = Math.tan(A);\n\t\t\t\t\tRGB.r = 1;\n\t\t\t\t\tRGB.g = T / (1 + T);\n\t\t\t\t} else if (H <= 1.001) {\n\t\t\t\t\tRGB.r = 1;\n\t\t\t\t\tRGB.g = 1;\n\t\t\t\t} else if (H <= 2) {\n\t\t\t\t\tT = Math.tan(A);\n\t\t\t\t\tRGB.r = (1 + T) / T;\n\t\t\t\t\tRGB.g = 1;\n\t\t\t\t} else if (H <= 3) {\n\t\t\t\t\tT = Math.tan(A);\n\t\t\t\t\tRGB.g = 1;\n\t\t\t\t\tRGB.b = 1 + T;\n\t\t\t\t} else if (H <= 3.999) {\n\t\t\t\t\tT = Math.tan(A);\n\t\t\t\t\tRGB.g = 1 / (1 + T);\n\t\t\t\t\tRGB.b = 1;\n\t\t\t\t} else if (H <= 4.001) {\n\t\t\t\t\tRGB.g = 0;\n\t\t\t\t\tRGB.b = 1;\n\t\t\t\t} else if (H <= 5) {\n\t\t\t\t\tT = Math.tan(A);\n\t\t\t\t\tRGB.r = -1 / T;\n\t\t\t\t\tRGB.b = 1;\n\t\t\t\t} else {\n\t\t\t\t\tT = Math.tan(A);\n\t\t\t\t\tRGB.r = 1;\n\t\t\t\t\tRGB.b = -T;\n\t\t\t\t}\n\t\t\t\tRGB.r = RGB.r * V + U;\n\t\t\t\tRGB.g = RGB.g * V + U;\n\t\t\t\tRGB.b = RGB.b * V + U;\n\t\t\t}\n\t\t\treturn (RGB.a << 24) | (RGB.r << 16) | (RGB.g << 8) | RGB.b;\n\t\t},\n\n\t\tWrapLinear(value1: number, value2: number, t: number, maxValue: number): number {\n\t\t\tlet retval: number;\n\n\t\t\t// this fixes my values to be between 0 and maxvalue.\n\t\t\tvalue1 = (value1 + maxValue * Math.trunc(Math.abs(value1 / maxValue))) % maxValue;\n\t\t\tvalue2 = (value2 + maxValue * Math.trunc(Math.abs(value2 / maxValue))) % maxValue;\n\n\t\t\tif (Math.abs(value1 - value2) <= 0.5 * maxValue) {\n\t\t\t\tretval = Interpolation.Utils.Linear(value1, value2, t);\n\t\t\t} else {\n\t\t\t\tif (value1 < value2) {\n\t\t\t\t\tretval = Interpolation.Utils.Linear(value1 + maxValue, value2, t);\n\t\t\t\t} else {\n\t\t\t\t\tretval = Interpolation.Utils.Linear(value1, value2 + maxValue, t);\n\t\t\t\t}\n\t\t\t\tretval = retval % maxValue;\n\t\t\t}\n\t\t\treturn retval;\n\t\t},\n\n\t\tRGBLinear(color1: number, color2: number, t: number): number {\n\t\t\tconst argb1 = Interpolation.Utils.RGBsplit(color1);\n\t\t\tconst argb2 = Interpolation.Utils.RGBsplit(color2);\n\t\t\tconst a = Interpolation.Utils.Linear(argb1.a, argb2.a, t);\n\t\t\tconst r = Interpolation.Utils.Linear(argb1.r, argb2.r, t);\n\t\t\tconst g = Interpolation.Utils.Linear(argb1.g, argb2.g, t);\n\t\t\tconst b = Interpolation.Utils.Linear(argb1.b, argb2.b, t);\n\t\t\treturn (a << 24) | (r << 16) | (g << 8) | b;\n\t\t},\n\t\tHSVLinear(color1: number, color2: number, t: number): number {\n\t\t\tconst ahsv1 = Interpolation.Utils.HSVsplit(color1);\n\t\t\tconst ahsv2 = Interpolation.Utils.HSVsplit(color2);\n\t\t\tlet h: number;\n\t\t\tif (Math.abs(ahsv1.h - ahsv2.h) <= 0.5) {\n\t\t\t\th = Interpolation.Utils.Linear(ahsv1.h, ahsv2.h, t);\n\t\t\t} else {\n\t\t\t\tif (ahsv1.h < ahsv2.h) {\n\t\t\t\t\th = Interpolation.Utils.Linear(ahsv1.h + 1, ahsv2.h, t);\n\t\t\t\t} else {\n\t\t\t\t\th = Interpolation.Utils.Linear(ahsv1.h, ahsv2.h + 1, t);\n\t\t\t\t}\n\t\t\t\th = h % 1;\n\t\t\t}\n\t\t\tconst s = Interpolation.Utils.Linear(ahsv1.s, ahsv2.s, t);\n\t\t\tconst v = Interpolation.Utils.Linear(ahsv1.v, ahsv2.v, t);\n\t\t\tconst a = Interpolation.Utils.Linear(ahsv1.a, ahsv2.a, t); // alpha can't be done with hsv\n\t\t\treturn Interpolation.Utils.HSVJoin({ a, h, s, v });\n\t\t},\n\t\tHCLLinear(color1: number, color2: number, t: number): number {\n\t\t\tconst ahcl1 = Interpolation.Utils.HCLSplit(color1);\n\t\t\tconst ahcl2 = Interpolation.Utils.HCLSplit(color2);\n\t\t\tlet h: number;\n\t\t\tif (Math.abs(ahcl1.h - ahcl2.h) <= 0.5) {\n\t\t\t\th = Interpolation.Utils.Linear(ahcl1.h, ahcl2.h, t);\n\t\t\t} else {\n\t\t\t\tif (ahcl1.h < ahcl2.h) {\n\t\t\t\t\th = Interpolation.Utils.Linear(ahcl1.h + 1, ahcl2.h, t);\n\t\t\t\t} else {\n\t\t\t\t\th = Interpolation.Utils.Linear(ahcl1.h, ahcl2.h + 1, t);\n\t\t\t\t}\n\t\t\t\th = h % 1;\n\t\t\t}\n\t\t\tconst s = Interpolation.Utils.Linear(ahcl1.c, ahcl2.c, t);\n\t\t\tconst v = Interpolation.Utils.Linear(ahcl1.l, ahcl2.l, t);\n\t\t\tconst a = Interpolation.Utils.Linear(ahcl1.a, ahcl2.a, t); // alpha can't be done with hsv\n\t\t\treturn Interpolation.Utils.HSVJoin({ a, h, s, v });\n\t\t},\n\n\t\tLinear(p0: number, p1: number, t: number): number {\n\t\t\treturn (p1 - p0) * t + p0;\n\t\t},\n\t\tBernstein(n: number, i: number): number {\n\t\t\tconst fc = Interpolation.Utils.Factorial;\n\n\t\t\treturn fc(n) / fc(i) / fc(n - i);\n\t\t},\n\t\tFactorial: (function () {\n\t\t\tconst a = [1];\n\n\t\t\treturn function (n: number): number {\n\t\t\t\tlet s = 1;\n\n\t\t\t\tif (a[n]) {\n\t\t\t\t\treturn a[n];\n\t\t\t\t}\n\n\t\t\t\tfor (let i = n; i > 1; i--) {\n\t\t\t\t\ts *= i;\n\t\t\t\t}\n\n\t\t\t\ta[n] = s;\n\n\t\t\t\treturn s;\n\t\t\t};\n\t\t})(),\n\n\t\tCatmullRom(p0: number, p1: number, p2: number, p3: number, t: number): number {\n\t\t\tconst v0 = (p2 - p0) * 0.5;\n\t\t\tconst v1 = (p3 - p1) * 0.5;\n\t\t\tconst t2 = t * t;\n\t\t\tconst t3 = t * t2;\n\n\t\t\treturn (2 * p1 - 2 * p2 + v0 + v1) * t3 + (-3 * p1 + 3 * p2 - 2 * v0 - v1) * t2 + v0 * t + p1;\n\t\t},\n\t},\n};\n\n/**\n * ARGB color format\n * Alpha, Red, Green, Blue.\n */\nexport interface ARGB {\n\ta: number;\n\tr: number;\n\tg: number;\n\tb: number;\n}\n\n/**\n * HSV color format\n * Alpha, Hue, Saturation, Value.\n */\nexport interface AHSV {\n\ta: number;\n\th: number;\n\ts: number;\n\tv: number;\n}\n\n/**\n * HCL color format\n * Alpha, Hue, Chroma, Luminance.\n */\nexport interface AHCL {\n\ta: number;\n\th: number;\n\tc: number;\n\tl: number;\n}\n","/**\n * Silly class to have a shared number that goes up.\n */\nexport class Sequence {\n\tprivate static _nextId = 0;\n\n\tpublic static nextId(): number {\n\t\treturn Sequence._nextId++;\n\t}\n}\n","import { EasingFunction, Easing } from \"./Easing\";\nimport { InterpolationFunction, Interpolation } from \"./Interpolation\";\n\nexport interface IDefaultValues {\n\tsafetyCheckFunction: (target: unknown) => boolean;\n\teasingFunction: EasingFunction;\n\tyoyoEasingFunction: EasingFunction | undefined;\n\tinterpolationFunction: InterpolationFunction;\n}\n\n/**\n * Default values used **during tween creation**.\n * Allows to change the default values for all tweens.\n */\nexport const DEFAULTS: IDefaultValues = {\n\tsafetyCheckFunction: (_: unknown) => true,\n\teasingFunction: Easing.Linear.None,\n\tyoyoEasingFunction: undefined,\n\tinterpolationFunction: Interpolation.Geom.Linear,\n};\n","import type { Easing, EasingFunction } from \"./Easing\";\nimport type { Interpolation, InterpolationFunction } from \"./Interpolation\";\nimport { Group } from \"./Group\";\nimport { Sequence } from \"./Sequence\";\nimport { DEFAULTS } from \"./Defaults\";\n\n/**\n * A Tween is basically an animation command.\n * For example: _Go from here to there in this amount of time._\n *\n * Tweens won't start by themselves. **Remeber to call {@link Tween.start} when you want your tweens to start!**\n *\n * Most methods will return the same object to allow for daisy chaining.\n * @template Target of the tween\n */\nexport class Tween<Target> {\n\tprivate _isPaused = false;\n\tprivate _valuesStart: any = {};\n\tprivate _valuesEnd: any = {};\n\tprivate _valuesStartRepeat: any = {};\n\tprivate _duration = 0;\n\tprivate _repeatCount = 0;\n\tprivate _repeat = 0;\n\tprivate _repeatDelayTime?: number;\n\tprivate _yoyo = false;\n\tprivate _isPlaying = false;\n\tprivate get _reversed(): boolean {\n\t\treturn this.yoyo && this._repeatCount % 2 !== 0;\n\t}\n\tprivate _delayTime = 0;\n\tprivate _startTime = 0;\n\tprivate _elapsedTime = 0;\n\tprivate _timescale = 1;\n\tprivate _safetyCheckFunction: (target: Target) => boolean = DEFAULTS.safetyCheckFunction;\n\tprivate _easingFunction: EasingFunction = DEFAULTS.easingFunction;\n\tprivate _yoyoEasingFunction: EasingFunction = DEFAULTS.yoyoEasingFunction;\n\tprivate _interpolationFunction: InterpolationFunction = DEFAULTS.interpolationFunction;\n\tprivate _chainedTweens: Array<Tween<any>> = [];\n\tprivate _onStartCallback?: (object: Target, tweenRef: this) => void;\n\tprivate _onStartCallbackFired = false;\n\tprivate _onAfterDelayCallback?: (object: Target, tweenRef: this) => void;\n\tprivate _onAfterDelayCallbackFired = false;\n\tprivate _onUpdateCallback?: (object: Target, elapsed: number, tweenRef: this) => void;\n\tprivate _onRepeatCallback?: (object: Target, repeatCount: number, tweenRef: this) => void;\n\tprivate _onCompleteCallback?: (object: Target, tweenRef: this) => void;\n\tprivate _onStopCallback?: (object: Target, tweenRef: this) => void;\n\tprivate _id = Sequence.nextId();\n\tprivate _isChainStopped = false;\n\tprivate _object: Target;\n\tprivate _groupRef: Group;\n\tprivate get _group(): Group {\n\t\tif (this._groupRef) {\n\t\t\treturn this._groupRef;\n\t\t} else {\n\t\t\treturn Group.shared;\n\t\t}\n\t}\n\tprivate set _group(value: Group) {\n\t\tthis._groupRef = value;\n\t}\n\n\t/**\n\t * Creates an instance of tween.\n\t * @param object - The target object which properties you want to animate\n\t * @param group - The {@link Group} this new Tween will belong to. If none is provided it will default to the static {@link Group.shared}\n\t */\n\tconstructor(object: Target, group?: Group) {\n\t\tthis._object = object;\n\t\tthis._group = group;\n\t}\n\n\t/**\n\t * Gets the id for this tween. A tween id is a number that increases perpetually with each tween created. It is used inside {@link Group} to keep track of tweens\n\t * @returns returns the id for this tween.\n\t */\n\tpublic getId(): number {\n\t\treturn this._id;\n\t}\n\n\t/**\n\t * Gets {@link Group} that this tween belongs to.\n\t * @returns returns the {@link Group} for this tween.\n\t */\n\tpublic getGroup(): Group {\n\t\treturn this._group;\n\t}\n\n\t/**\n\t * Gets the timescale for this tween. The timescale is a factor by which each deltatime is multiplied, allowing to speed up or slow down the tween.\n\t * @returns returns the timescale for this tween.\n\t */\n\tpublic getTimescale(): number {\n\t\treturn this._timescale;\n\t}\n\n\t/**\n\t * A tween is playing when it has been started but hasn't ended yet. This has nothing to do with pausing. For that see {@link Tween.isPaused}.\n\t * @returns returns true if this tween is playing.\n\t */\n\tpublic isPlaying(): boolean {\n\t\treturn this._isPlaying;\n\t}\n\n\t/**\n\t * A tween can only be paused if it was playing.\n\t * @returns returns true if this tween is paused.\n\t */\n\tpublic isPaused(): boolean {\n\t\treturn this._isPaused;\n\t}\n\n\t/**\n\t * Writes the starting values of the tween.\n\t *\n\t * **Starting values generated from {@link Tween.start} will be overwritten.**\n\t * @param properties - Starting values for this tween.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic from(properties: RecursivePartial<Target>): this;\n\tpublic from(properties: any): this;\n\tpublic from(properties: any): this {\n\t\ttry {\n\t\t\tJSON.stringify(properties);\n\t\t} catch (e) {\n\t\t\tthrow new Error(\"The object you provided to the from() method has a circular reference!\");\n\t\t}\n\t\tthis._setupProperties(properties, this._valuesStart, properties, this._valuesStartRepeat, true);\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the final values for the target object's properties by copy.\n\t * This will try to create a deep copy of the `properties` parameter.\n\t * If you want the tween to keep a reference to the final values use {@link Tween.dynamicTo}.\n\t *\n\t * If an array value is provided for a value that originally wasn't an array, it will be interpreted as an interpolable curve and the values inside the array will be interpolated using the function provided in {@link Tween.interpolation}\n\t *\n\t * If a string value that starts with either `+` or `-`is provided it will be taken as a _relative value_ to the start value.\n\t * @param properties - final values for the target object.\n\t * @param duration - if given it will be used as the duration in **miliseconds**. if not, a call to {@link Tween.duration} will be needed.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic to(properties: RecursivePartial<Target>, duration?: number): this;\n\tpublic to(properties: any, duration?: number): this;\n\tpublic to(properties: any, duration?: number): this {\n\t\ttry {\n\t\t\tthis._valuesEnd = JSON.parse(JSON.stringify(properties));\n\t\t} catch (e) {\n\t\t\t// recursive object. this gonna crash!\n\t\t\tconsole.warn(\"The object you provided to the to() method has a circular reference!. It can't be cloned. Falling back to dynamic targeting\");\n\t\t\treturn this.dynamicTo(properties, duration);\n\t\t}\n\n\t\tif (duration !== undefined) {\n\t\t\tthis._duration = duration;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Set the final values for the target object's properties by reference.\n\t * This will store a reference to the properties object allowing you to change the final values while the tween is running.\n\t * If you want the tween to make a copy of the final values use {@link Tween.to}.\n\t * @param properties - final values for the target object.\n\t * @param duration - if given it will be used as the duration in **miliseconds**. if not, a call to {@link Tween.duration} will be needed.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic dynamicTo(properties: RecursivePartial<Target>, duration?: number): this;\n\tpublic dynamicTo(properties: any, duration?: number): this;\n\tpublic dynamicTo(properties: any, duration?: number): this {\n\t\tthis._valuesEnd = properties; // JSON.parse(JSON.stringify(properties));\n\n\t\tif (duration !== undefined) {\n\t\t\tthis._duration = duration;\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the duration for this tween in **miliseconds**.\n\t * @param d - The duration for this tween in **miliseconds**.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic duration(d: number): this {\n\t\tthis._duration = d;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Tweens won't start by themselves when created. Call this to start the tween.\n\t * Starting values for the animation will be stored at this moment.\n\t *\n\t * **This function can't overwrite the starting values set by {@link Tween.from}**\n\t *\n\t * You can call this method on a finished tween to restart it without changing the starting values.\n\t * To restart a tween and reset the starting values use {@link Tween.restart}\n\t * @param delay - if given it will be used as the delay in **miliseconds**.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic start(delay?: number): this {\n\t\tif (this._isPlaying) {\n\t\t\treturn this;\n\t\t}\n\n\t\tif (delay != undefined) {\n\t\t\tthis._delayTime = delay;\n\t\t}\n\n\t\tthis._group.add(this);\n\n\t\tif (this._reversed) {\n\t\t\tthis._swapEndStartRepeatValues(this._valuesStartRepeat, this._valuesEnd);\n\t\t\tthis._valuesStart = JSON.parse(JSON.stringify(this._valuesStartRepeat));\n\t\t}\n\n\t\tthis._repeatCount = 0; // This must be after we check for the _reversed flag!!.\n\n\t\tthis._isPlaying = true;\n\n\t\tthis._isPaused = false;\n\n\t\tthis._onStartCallbackFired = false;\n\n\t\tthis._onAfterDelayCallbackFired = false;\n\n\t\tthis._isChainStopped = false;\n\n\t\tthis._startTime = -this._delayTime;\n\n\t\tthis._elapsedTime = 0;\n\n\t\tthis._setupProperties(this._object, this._valuesStart, this._valuesEnd, this._valuesStartRepeat, false);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @experimental\n\t * Forces a tween to restart.\n\t * Starting values for the animation will be stored at this moment.\n\t * This literally calls {@link Tween.reset} and then {@link Tween.start}.\n\t *\n\t * **Starting values will be cleared!. This function will erase all values created from {@link Tween.from} and/or {@link Tween.start}**\n\t * @param delay - if given it will be used as the delay in **miliseconds**.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic restart(delay?: number): this {\n\t\tthis.reset();\n\t\treturn this.start(delay);\n\t}\n\n\t/**\n\t * @experimental\n\t * Clears the starting and loop starting values.\n\t *\n\t * **Starting values will be cleared!. This function will erase all values created from {@link Tween.from} and/or {@link Tween.start}**\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic reset(): this {\n\t\tif (this._isPlaying) {\n\t\t\tthis.stop();\n\t\t}\n\t\tthis._valuesStart = {};\n\t\tthis._valuesStartRepeat = {};\n\t\treturn this;\n\t}\n\n\t/**\n\t * @experimental\n\t * Stops the tween and sets the values to the starting ones.\n\t *\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic rewind(): this {\n\t\tif (this._isPlaying) {\n\t\t\tthis.stop();\n\t\t}\n\n\t\tif (this._reversed) {\n\t\t\t// if you rewind from a reversed position, we unreverse.\n\t\t\tthis._swapEndStartRepeatValues(this._valuesStartRepeat, this._valuesEnd);\n\t\t}\n\n\t\tconst value = this._easingFunction(0);\n\n\t\t// properties transformations\n\t\tthis._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);\n\n\t\treturn this;\n\t}\n\n\tprivate _setupProperties(_object: any, _valuesStart: any, _valuesEnd: any, _valuesStartRepeat: any, overwrite: boolean): void {\n\t\tfor (const property in _valuesEnd) {\n\t\t\tconst startValue = _object[property];\n\t\t\tconst startValueIsArray = Array.isArray(startValue);\n\t\t\tconst startValueIsNumber = !Number.isNaN(Number(startValue));\n\t\t\tconst propType = startValueIsArray ? \"array\" : typeof startValue;\n\t\t\tconst startValueIsObject = propType == \"object\";\n\t\t\tconst endValueIsObject = typeof _valuesEnd[property] == \"object\";\n\t\t\tconst isInterpolationList = !startValueIsArray && Array.isArray(_valuesEnd[property]);\n\n\t\t\t// If to() specifies a property that doesn't exist in the source object,\n\t\t\t// we should not set that property in the object\n\t\t\tif (propType == \"undefined\" || propType == \"function\" || _valuesEnd[property] == undefined || (!startValueIsArray && !startValueIsNumber && !startValueIsObject)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// handle the deepness of the values\n\t\t\tif ((startValueIsObject || startValueIsArray || endValueIsObject) && startValue && !isInterpolationList) {\n\t\t\t\tif (typeof _valuesStart[property] == \"undefined\") {\n\t\t\t\t\t_valuesStart[property] = startValueIsArray ? [] : {};\n\t\t\t\t}\n\t\t\t\tif (typeof _valuesStartRepeat[property] == \"undefined\") {\n\t\t\t\t\t_valuesStartRepeat[property] = startValueIsArray ? [] : {};\n\t\t\t\t}\n\n\t\t\t\tthis._setupProperties(startValue, _valuesStart[property], _valuesEnd[property], _valuesStartRepeat[property], overwrite);\n\t\t\t} else {\n\t\t\t\t// Save the starting value, but only once.\n\t\t\t\tif (typeof _valuesStart[property] == \"undefined\" || overwrite) {\n\t\t\t\t\t_valuesStart[property] = startValue;\n\t\t\t\t}\n\n\t\t\t\tif (typeof _valuesStartRepeat[property] == \"undefined\" || overwrite) {\n\t\t\t\t\tif (isInterpolationList) {\n\t\t\t\t\t\t_valuesStartRepeat[property] = _valuesEnd[property].slice().reverse()[0];\n\t\t\t\t\t} else {\n\t\t\t\t\t\t_valuesStartRepeat[property] = _valuesStart[property] || 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Stops this tween\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic stop(): this {\n\t\tif (!this._isChainStopped) {\n\t\t\tthis._isChainStopped = true;\n\t\t\tthis.stopChainedTweens();\n\t\t}\n\n\t\tif (!this._isPlaying) {\n\t\t\treturn this;\n\t\t}\n\n\t\tthis._group.remove(this);\n\n\t\tthis._isPlaying = false;\n\n\t\tthis._isPaused = false;\n\n\t\tif (this._onStopCallback) {\n\t\t\tthis._onStopCallback(this._object, this);\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Fastforwards this tween to the end by triggering an update with an infinite value.\n\t * This will work even on paused tweens.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic end(endChainedTweens: boolean = false): this {\n\t\tlet protectedChainedTweens: Tween<any>[] = [];\n\n\t\tif (!endChainedTweens) {\n\t\t\tprotectedChainedTweens = this._chainedTweens;\n\t\t\tthis._chainedTweens = [];\n\t\t}\n\n\t\tthis.resume();\n\t\tthis.update(Infinity);\n\n\t\tif (!endChainedTweens) {\n\t\t\tthis._chainedTweens = protectedChainedTweens;\n\t\t\tfor (let i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\t\tthis._chainedTweens[i].start();\n\t\t\t}\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @experimental\n\t * Skips forward the in the repeats of this tween by triggering a biiiiig update.\n\t * Think of this as a less agressive {@link Tween.end}.\n\t *\n\t * @param amount - The amount of repeats to skip.\n\t * @param resetCurrentLoop - If true, the time will become zero and the object will return to the initial value in the next update.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic skip(amount: number, resetCurrentLoop: boolean = false): this {\n\t\tthis.resume();\n\n\t\tthis.update(amount * this._duration - (resetCurrentLoop ? this._elapsedTime : 0));\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Pauses this tween. Does nothing is if the tween was already paused or wasn't playing.\n\t * Paused tweens ignore all update calls.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic pause(): this {\n\t\tif (this._isPaused || !this._isPlaying) {\n\t\t\treturn this;\n\t\t}\n\n\t\tthis._isPaused = true;\n\n\t\tthis._group.remove(this);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Resumes this tween. Does nothing if the tween wasn't paused nor running.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic resume(): this {\n\t\tif (!this._isPaused || !this._isPlaying) {\n\t\t\treturn this;\n\t\t}\n\n\t\tthis._isPaused = false;\n\n\t\tthis._group.add(this);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @experimental\n\t * Stops tweens chained to this tween. To chain a tween see {@link Tween.chain}.\n\t *\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic stopChainedTweens(): this {\n\t\tfor (let i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\tthis._chainedTweens[i].stop();\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @experimental\n\t * Starts all tweens chained to this tween. To chain a tween see {@link Tween.chain}.\n\t *\n\t * @param stopThis - If true, this tween will be stopped before it starts the chained tweens.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic startChainedTweens(stopThis: boolean = false): this {\n\t\tif (stopThis) {\n\t\t\tthis.stop();\n\t\t}\n\n\t\tfor (let i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\tthis._chainedTweens[i].start();\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the {@link Group} for this tween.\n\t * @param group - the group for this tween. If undefined or null is given, the group will default to {@link Group.shared}.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic group(group: Group): this {\n\t\tthis._group = group;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the delay for this tween.\n\t *\n\t * This will only be applied at the start of the tween. For delaying the repeating of a tween, see {@link Tween.repeatDelay}\n\t *\n\t * **This will only work before calling {@link Tween.start}.**\n\t * @param amount - the delay for this tween.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic delay(amount: number): this {\n\t\tthis._delayTime = amount;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the timescale for this tween.\n\t * The deltaTime inside the update will be multiplied by this value allowing to speed up or slow down the flow of time.\n\t * @param multiplier - the timescale value for this tween.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic timescale(multiplier: number): this {\n\t\tthis._timescale = multiplier;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the number of times this tween will loop\n\t * @param times - the number of loops. For endless loops use `Infinity`\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic repeat(times: number = Infinity): this {\n\t\tthis._repeat = times;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the repeat delay for this tween.\n\t *\n\t * This will only be applied at the start of every repeat. For delaying only the start, see {@link Tween.delay}\n\t * @param amount - the repeat delay for this tween.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic repeatDelay(amount: number): this {\n\t\tthis._repeatDelayTime = amount;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets if this tween should yoyo (reflect) itself when repeating.\n\t * @param yoyo - the yoyo value for this tween.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic yoyo(yoyo: boolean = true): this {\n\t\tthis._yoyo = yoyo;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the easing function to interpolate the starting values with the final values.\n\t *\n\t * You can use the functions inside the {@link Easing} object.\n\t * @param easingFunction - a function that takes a number between 0 and 1 and returns another number between 0 and 1\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic easing(easingFunction: EasingFunction): this {\n\t\tthis._easingFunction = easingFunction;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @experimental\n\t * Sets the safety check function to test if the tweening object is still valid.\n\t * If the function returns a non-truthy value, the tween will skip the update loop.\n\t * @param safetyCheckFunction - a function that takes the target object for this tween and returns true if the object is still valid.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic safetyCheck(safetyCheckFunction: (target: Target) => boolean): this {\n\t\tthis._safetyCheckFunction = safetyCheckFunction;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * @experimental\n\t * Sets the easing function to interpolate the starting values with the final values on the way back due to a yoyo tween.\n\t *\n\t * You can use the functions inside the {@link Easing} object.\n\t * @param easingFunction - a function that takes a number between 0 and 1 and returns another number between 0 and 1\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic yoyoEasing(easingFunction: EasingFunction): this {\n\t\tthis._yoyoEasingFunction = easingFunction;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the easing function to interpolate the starting values with the final values when the final value is an array of objects.\n\t * Use this to create bezier curves or interpolate colors.\n\t *\n\t * You can use the functions inside the {@link Interpolation} object.\n\t * @param interpolationFunction\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic interpolation(interpolationFunction: InterpolationFunction): this {\n\t\tthis._interpolationFunction = interpolationFunction;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds tweens to be called when this tween ends.\n\t * The tweens here will be called all at the same time.\n\t * @param tweens - tweens to be started when this tween ends\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic chain(...tweens: Array<Tween<any>>): this {\n\t\tthis._chainedTweens = tweens;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the onStart callback. This will be called as soon as you call {@link Tween.start}.\n\t * @param callback - the function to call on start. It will recieve the target object and this tween as a parameter.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic onStart(callback: (object: Target, tween: this) => void): this {\n\t\tthis._onStartCallback = callback;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the onAfterDelay callback. This will be called when the delay is over.\n\t * @param callback - the function to call on start. It will recieve the target object and this tween as a parameter.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic onAfterDelay(callback: (object: Target, tween: this) => void): this {\n\t\tthis._onAfterDelayCallback = callback;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the onStart callback\n\t * @param callback - the function to call on start. It will recieve the target object, this tween, and a number between 0 and 1 determining the progress as a parameter.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic onUpdate(callback: (object: Target, elapsed: number, tween: this) => void): this {\n\t\tthis._onUpdateCallback = callback;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the onRepeat callback\n\t * @param callback - the function to call on repeat. It will recieve the target object and this tween as a parameter.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic onRepeat(callback: (object: Target, repeatCount: number, tweenRef: this) => void): this {\n\t\tthis._onRepeatCallback = callback;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the onComplete callback\n\t * @param callback - the function to call on complete. It will recieve the target object and this tween as a parameter.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic onComplete(callback: (object: Target, tween: this) => void): this {\n\t\tthis._onCompleteCallback = callback;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Sets the onStop callback\n\t * @param callback - the function to call on stop. It will recieve the target object and this tween as a parameter.\n\t * @returns returns this tween for daisy chaining methods.\n\t */\n\tpublic onStop(callback: (object: Target, tween: this) => void): this {\n\t\tthis._onStopCallback = callback;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Updates this tween\n\t * @param deltaTime - the amount of time that passed since last update in **miliseconds**\n\t * @param preserve - Prevent the removal of stopped, paused, finished or non started tweens from their group.\n\t * @returns returns true if the tween hasn't finished yet.\n\t */\n\tpublic update(deltaTime: number, preserve: boolean = false): boolean {\n\t\tconst retval = this._internalUpdate(deltaTime);\n\t\tif (!retval && !preserve) {\n\t\t\tthis._group.remove(this);\n\t\t}\n\t\treturn retval;\n\t}\n\n\tprivate _internalUpdate(deltaTime: number): boolean {\n\t\tif (!this._safetyCheckFunction(this._object)) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this._isPaused) {\n\t\t\treturn false;\n\t\t}\n\n\t\tdeltaTime *= this._timescale;\n\n\t\tlet elapsed;\n\n\t\tthis._elapsedTime += deltaTime;\n\n\t\tconst endTime = this._duration;\n\t\tconst currentTime = this._startTime + this._elapsedTime;\n\n\t\tif (currentTime > endTime && !this._isPlaying) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the tween was already finished,\n\t\tif (!this.isPlaying) {\n\t\t\tthis.start();\n\t\t}\n\n\t\tif (this._onStartCallbackFired == false) {\n\t\t\tif (this._onStartCallback) {\n\t\t\t\tthis._onStartCallback(this._object, this);\n\t\t\t}\n\n\t\t\tthis._onStartCallbackFired = true;\n\t\t}\n\n\t\tif (this._onAfterDelayCallbackFired == false && currentTime >= 0) {\n\t\t\tif (this._onAfterDelayCallback) {\n\t\t\t\tthis._onAfterDelayCallback(this._object, this);\n\t\t\t}\n\n\t\t\tthis._onAfterDelayCallbackFired = true;\n\t\t}\n\n\t\telapsed = currentTime / this._duration;\n\t\t// zero duration makes elapsed a NaN. We need to fix this!\n\t\tif (this._duration == 0) {\n\t\t\t// positive currentTime means we have no delay to wait for!\n\t\t\tif (currentTime >= 0) {\n\t\t\t\telapsed = 1;\n\t\t\t} else {\n\t\t\t\telapsed = 0;\n\t\t\t}\n\t\t}\n\t\t// otherwise, clamp the result\n\t\telapsed = Math.min(1, elapsed);\n\t\telapsed = Math.max(0, elapsed);\n\n\t\tlet leftOverTime = Number.isFinite(currentTime) ? currentTime % this._duration : currentTime; // leftover time\n\t\tif (Number.isNaN(leftOverTime)) {\n\t\t\tleftOverTime = 0;\n\t\t}\n\t\tconst loopsMade = Math.floor(currentTime / this._duration); // if we overloop, how many loops did we eat?\n\n\t\t// check which easing to use...\n\t\tlet value: number;\n\t\tif (this._reversed && this._yoyoEasingFunction) {\n\t\t\tvalue = this._yoyoEasingFunction(elapsed);\n\t\t} else {\n\t\t\tvalue = this._easingFunction(elapsed);\n\t\t}\n\n\t\t// properties transformations\n\t\tthis._updateProperties(this._object, this._valuesStart, this._valuesEnd, value);\n\n\t\t// if there is absolutely no chance to loop, call update. we will be done.\n\t\tif (this._onUpdateCallback && (elapsed != 1 || this._repeat - this._repeatCount <= 0)) {\n\t\t\tthis._onUpdateCallback(this._object, elapsed, this);\n\t\t}\n\n\t\tif (elapsed == 1) {\n\t\t\tif (this._repeat - this._repeatCount > 0) {\n\t\t\t\t// increase loops\n\t\t\t\tconst oldCount = this._repeatCount;\n\t\t\t\tthis._repeatCount = Math.min(this._repeat + 1, this._repeatCount + loopsMade);\n\n\t\t\t\tif (this._onUpdateCallback && (this._repeat - this._repeatCount < 0 || leftOverTime <= 0)) {\n\t\t\t\t\tthis._onUpdateCallback(this._object, elapsed, this);\n\t\t\t\t}\n\n\t\t\t\t// fix starting values for yoyo or relative\n\t\t\t\tif (this._yoyo) {\n\t\t\t\t\tthis._swapEndStartRepeatValues(this._valuesStartRepeat, this._valuesEnd);\n\t\t\t\t} else {\n\t\t\t\t\tthis._moveForwardStartRepeatValues(this._valuesStartRepeat, this._valuesEnd);\n\t\t\t\t}\n\n\t\t\t\t// Reassign starting values\n\t\t\t\tthis._valuesStart = JSON.parse(JSON.stringify(this._valuesStartRepeat));\n\n\t\t\t\t// restart start time\n\t\t\t\tif (this._repeatDelayTime !== undefined) {\n\t\t\t\t\tthis._startTime = -this._repeatDelayTime;\n\t\t\t\t} else {\n\t\t\t\t\tthis._startTime = 0;\n\t\t\t\t}\n\n\t\t\t\tif (this._onRepeatCallback) {\n\t\t\t\t\t// We fallback to only one call.\n\t\t\t\t\tlet callbackCount: number = 1;\n\n\t\t\t\t\tif (Number.isFinite(loopsMade)) {\n\t\t\t\t\t\t// if we have a logical number of loops, we trigger the callback that many times\n\t\t\t\t\t\tcallbackCount = this._repeatCount - oldCount;\n\t\t\t\t\t} else if (Number.isFinite(this._repeat)) {\n\t\t\t\t\t\t// if the amount of loops is infinite, we trigger the callback the amount of loops remaining\n\t\t\t\t\t\tcallbackCount = this._repeat - oldCount;\n\t\t\t\t\t}\n\n\t\t\t\t\tfor (let i = 0; i < callbackCount; i++) {\n\t\t\t\t\t\tthis._onRepeatCallback(this._object, oldCount + 1 + i, this);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis._elapsedTime = 0; // reset the elapsed time\n\n\t\t\t\t// if we have more loops to go, then go\n\t\t\t\tif (this._repeat - this._repeatCount >= 0) {\n\t\t\t\t\t// update with the leftover time\n\t\t\t\t\tif (leftOverTime > 0 && Number.isFinite(this._repeat)) {\n\t\t\t\t\t\t// only if it is greater than 0 and do not emit onupdate events...\n\t\t\t\t\t\tthis._internalUpdate(leftOverTime);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we are here, either we are not a looping boi or we are a finished looping boi\n\t\t\tif (this._onCompleteCallback) {\n\t\t\t\tthis._onCompleteCallback(this._object, this);\n\t\t\t}\n\n\t\t\tfor (let i = 0, numChainedTweens = this._chainedTweens.length; i < numChainedTweens; i++) {\n\t\t\t\t// Make the chained tweens start exactly at the time they should,\n\t\t\t\t// even if the update method was called way past the duration of the tween\n\t\t\t\tthis._chainedTweens[i].start();\n\t\t\t\tif (leftOverTime > 0) {\n\t\t\t\t\tthis._chainedTweens[i].update(leftOverTime);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._isPlaying = false;\n\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t}\n\n\tprivate _updateProperties(_object: any, _valuesStart: any, _valuesEnd: any, value: number): void {\n\t\tfor (const property in _valuesEnd) {\n\t\t\t// Don't update properties that do not exist in the source object\n\t\t\tif (_valuesStart[property] == undefined) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tconst start = _valuesStart[property];\n\t\t\tlet end = _valuesEnd[property];\n\t\t\tconst startIsArray = Array.isArray(_object[property]);\n\t\t\tconst endIsArray = Array.isArray(end);\n\t\t\tconst isInterpolationList = !startIsArray && endIsArray;\n\n\t\t\tif (isInterpolationList) {\n\t\t\t\tif (this._reversed) {\n\t\t\t\t\t_object[property] = this._interpolationFunction(end.concat([start]) as Array<number>, value);\n\t\t\t\t} else {\n\t\t\t\t\t_object[property] = this._interpolationFunction([start].concat(end) as Array<number>, value);\n\t\t\t\t}\n\t\t\t} else if (typeof end == \"object\" && end) {\n\t\t\t\tthis._updateProperties(_object[property], start, end, value);\n\t\t\t} else {\n\t\t\t\t// Parses relative end values with start as base (e.g.: +10, -3)\n\t\t\t\tend = this._handleRelativeValue(start as number, end as number | string);\n\n\t\t\t\t// Protect against non numeric properties.\n\t\t\t\tif (typeof end == \"number\" && (typeof start == \"number\" || typeof start == \"string\")) {\n\t\t\t\t\t// I am certain that start here won't anser NaN or it would have been filtrated on the setupProperties\n\t\t\t\t\t_object[property] = Number(start) + (end - Number(start)) * value;\n\n\t\t\t\t\t// if it was originally a string, we make it back to string. keep it tidy\n\t\t\t\t\tif (typeof start == \"string\") {\n\t\t\t\t\t\t_object[property] = String(_object[property]);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _handleRelativeValue(start: number, end: number | string): number {\n\t\tif (typeof end !== \"string\") {\n\t\t\treturn end;\n\t\t}\n\n\t\tif (end.charAt(0) == \"+\" || end.charAt(0) == \"-\") {\n\t\t\treturn start + Number(end);\n\t\t}\n\n\t\treturn Number(end);\n\t}\n\n\tprivate _swapEndStartRepeatValues(_valuesStartRepeat: any, _valuesEnd: any): void {\n\t\tfor (const property in _valuesStartRepeat) {\n\t\t\tconst isInterpolationList = !Array.isArray(_valuesStartRepeat[property]) && Array.isArray(_valuesEnd[property]);\n\n\t\t\tif (typeof _valuesStartRepeat[property] == \"object\") {\n\t\t\t\tthis._swapEndStartRepeatValues(_valuesStartRepeat[property], _valuesEnd[property]);\n\t\t\t} else {\n\t\t\t\tconst tmp = _valuesStartRepeat[property];\n\t\t\t\tif (typeof _valuesEnd[property] == \"string\") {\n\t\t\t\t\t_valuesStartRepeat[property] = Number(_valuesStartRepeat[property]) + Number(_valuesEnd[property]);\n\t\t\t\t\t_valuesEnd[property] = tmp;\n\t\t\t\t} else if (isInterpolationList) {\n\t\t\t\t\tconst aux = _valuesEnd[property].slice().reverse();\n\t\t\t\t\t_valuesStartRepeat[property] = aux[0];\n\t\t\t\t\t_valuesEnd[property] = aux;\n\t\t\t\t} else {\n\t\t\t\t\t_valuesStartRepeat[property] = _valuesEnd[property];\n\t\t\t\t\t_valuesEnd[property] = tmp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _moveForwardStartRepeatValues(_valuesStartRepeat: any, _valuesEnd: any): void {\n\t\tfor (const property in _valuesStartRepeat) {\n\t\t\tif (typeof _valuesEnd[property] == \"object\") {\n\t\t\t\tthis._moveForwardStartRepeatValues(_valuesStartRepeat[property], _valuesEnd[property]);\n\t\t\t} else {\n\t\t\t\tif (typeof _valuesEnd[property] == \"string\") {\n\t\t\t\t\t_valuesStartRepeat[property] = Number(_valuesStartRepeat[property]) + Number(_valuesEnd[property]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * A recursive version of Typescript's Partial<> decorator.\n */\nexport type RecursivePartial<T> = {\n\t[P in keyof T]?: T[P] extends (infer U)[] ? RecursivePartial<U>[] : RecursivePartial<T[P]>;\n};\nexport default Tween;\n","/**\n * Constant with the hardcoded version of the app\n */\nexport const VERSION = \"2.1.0\";\n"],"names":[],"mappings":"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IAAA,EAAA;AACA,EAAA,IAAA,CAAA,MAAA,EAAA;AACA,GAAA,OAAA,MAAA,GAAA,GAAA,GAAA,CAAA,GAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA;AACA,CAAA,MAAA,EAAA;AACA,EAAA,IAAA,CAAA,MAAA,EAAA;AACA,GAAA,OAAA,MAAA,CAAA;AACA,GAAA;AACA,EAAA;AACA,CAAA,SAAA,EAAA;AACA,EAAA,EAAA,CAAA,MAAA,EAAA;AACA,GAAA,OAAA,MAAA,GAAA,MAAA,CAAA;AACA,GAAA;AACA,EAAA,GAAA,CAAA,MAAA,EAAA;AACA,GAAA,OAAA,MAAA,IAAA,CAAA,GAAA,MAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA,KAAA,CAAA,MAAA,EAAA;AACA,GAAA,IAAA,CAAA,MAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACA,IAAA,OAAA,GAAA,GAAA,MAAA,GAAA,MAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,CAAA,GAAA,IAAA,EAAA,MAAA,IAAA,MAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA;AACA,CAAA,KAAA,EAAA;AACA,EAAA,EAAA,CAAA,MAAA,EAAA;AACA,GAAA,OAAA,MAAA,GAAA,MAAA,GAAA,MAAA,CAAA;AACA,GAAA;AACA,EAAA,GAAA,CAAA,MAAA,EAAA;AACA,GAAA,OAAA,EAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA,KAAA,CAAA,MAAA,EAAA;AACA,GAAA,IAAA,CAAA,MAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACA,IAAA,OAAA,GAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,GAAA,IAAA,CAAA,MAAA,IAAA,CAAA,IAAA,MAAA,GAAA,MAAA,GAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA;AACA,CAAA,OAAA,EAAA;AACA,EAAA,EAAA,CAAA,MAAA,EAAA;AACA,GAAA,OAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,CAAA;AACA,GAAA;AACA,EAAA,GAAA,CAAA,MAAA,EAAA;AACA,GAAA,OAAA,CAAA,GAAA,EAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,CAAA;AACA,GAAA;AACA,EAAA,KAAA,CAAA,MAAA,EAAA;AACA,GAAA,IAAA,CAAA,MAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACA,IAAA,OAAA,GAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,CAAA,GAAA,IAAA,CAAA,MAAA,IAAA,CAAA,IAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA;AACA,CAAA,OAAA,EAAA;AACA,EAAA,EAAA,CAAA,MAAA,EAAA;AACA,GAAA,OAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,CAAA;AACA,GAAA;AACA,EAAA,GAAA,CAAA,MAAA,EAAA;AACA,GAAA,OAAA,EAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA,KAAA,CAAA,MAAA,EAAA;AACA,GAAA,IAAA,CAAA,MAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACA,IAAA,OAAA,GAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,GAAA,IAAA,CAAA,MAAA,IAAA,CAAA,IAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,MAAA,GAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA;AACA,CAAA,UAAA,EAAA;AACA,EAAA,EAAA,CAAA,MAAA,EAAA;AACA,GAAA,OAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,MAAA,GAAA,IAAA,CAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA,GAAA,CAAA,MAAA,EAAA;AACA,GAAA,OAAA,IAAA,CAAA,GAAA,CAAA,CAAA,MAAA,GAAA,IAAA,CAAA,EAAA,IAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA,KAAA,CAAA,MAAA,EAAA;AACA,GAAA,OAAA,GAAA,IAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,EAAA,GAAA,MAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA;AACA,CAAA,WAAA,EAAA;AACA,EAAA,EAAA,CAAA,MAAA,EAAA;AACA,GAAA,OAAA,MAAA,IAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,IAAA,EAAA,MAAA,GAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA,GAAA,CAAA,MAAA,EAAA;AACA,GAAA,OAAA,MAAA,IAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,GAAA,MAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA,KAAA,CAAA,MAAA,EAAA;AACA,GAAA,IAAA,MAAA,IAAA,CAAA,EAAA;AACA,IAAA,OAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,IAAA,MAAA,IAAA,CAAA,EAAA;AACA,IAAA,OAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,IAAA,CAAA,MAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACA,IAAA,OAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,IAAA,EAAA,MAAA,GAAA,CAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,GAAA,IAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,IAAA,MAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA;AACA,CAAA,QAAA,EAAA;AACA,EAAA,EAAA,CAAA,MAAA,EAAA;AACA,GAAA,OAAA,CAAA,GAAA,IAAA,CAAA,IAAA,CAAA,CAAA,GAAA,MAAA,GAAA,MAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA,GAAA,CAAA,MAAA,EAAA;AACA,GAAA,OAAA,IAAA,CAAA,IAAA,CAAA,CAAA,GAAA,EAAA,MAAA,GAAA,MAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA,KAAA,CAAA,MAAA,EAAA;AACA,GAAA,IAAA,CAAA,MAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACA,IAAA,OAAA,CAAA,GAAA,IAAA,IAAA,CAAA,IAAA,CAAA,CAAA,GAAA,MAAA,GAAA,MAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,GAAA,IAAA,IAAA,CAAA,IAAA,CAAA,CAAA,GAAA,CAAA,MAAA,IAAA,CAAA,IAAA,MAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA;AACA,CAAA,OAAA,EAAA;AACA,EAAA,EAAA,CAAA,MAAA,EAAA;AACA,GAAA,IAAA,MAAA,IAAA,CAAA,EAAA;AACA,IAAA,OAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,IAAA,MAAA,IAAA,CAAA,EAAA;AACA,IAAA,OAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,EAAA,IAAA,MAAA,GAAA,CAAA,CAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,MAAA,GAAA,GAAA,IAAA,CAAA,GAAA,IAAA,CAAA,EAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA,GAAA,CAAA,MAAA,EAAA;AACA,GAAA,IAAA,MAAA,IAAA,CAAA,EAAA;AACA,IAAA,OAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,IAAA,MAAA,IAAA,CAAA,EAAA;AACA,IAAA,OAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,GAAA,MAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,MAAA,GAAA,GAAA,IAAA,CAAA,GAAA,IAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA,KAAA,CAAA,MAAA,EAAA;AACA,GAAA,IAAA,MAAA,IAAA,CAAA,EAAA;AACA,IAAA,OAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,IAAA,MAAA,IAAA,CAAA,EAAA;AACA,IAAA,OAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,MAAA,IAAA,CAAA,CAAA;AACA;AACA,GAAA,IAAA,MAAA,GAAA,CAAA,EAAA;AACA,IAAA,OAAA,CAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,EAAA,IAAA,MAAA,GAAA,CAAA,CAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,MAAA,GAAA,GAAA,IAAA,CAAA,GAAA,IAAA,CAAA,EAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,IAAA,MAAA,GAAA,CAAA,CAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,MAAA,GAAA,GAAA,IAAA,CAAA,GAAA,IAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA;AACA,CAAA,IAAA,EAAA;AACA,EAAA,EAAA,CAAA,MAAA,EAAA;AACA,GAAA,MAAA,CAAA,GAAA,OAAA,CAAA;AACA;AACA,GAAA,OAAA,MAAA,GAAA,MAAA,IAAA,CAAA,CAAA,GAAA,CAAA,IAAA,MAAA,GAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA,GAAA,CAAA,MAAA,EAAA;AACA,GAAA,MAAA,CAAA,GAAA,OAAA,CAAA;AACA;AACA,GAAA,OAAA,EAAA,MAAA,GAAA,MAAA,IAAA,CAAA,CAAA,GAAA,CAAA,IAAA,MAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA,KAAA,CAAA,MAAA,EAAA;AACA,GAAA,MAAA,CAAA,GAAA,OAAA,GAAA,KAAA,CAAA;AACA;AACA,GAAA,IAAA,CAAA,MAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACA,IAAA,OAAA,GAAA,IAAA,MAAA,GAAA,MAAA,IAAA,CAAA,CAAA,GAAA,CAAA,IAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,GAAA,IAAA,CAAA,MAAA,IAAA,CAAA,IAAA,MAAA,IAAA,CAAA,CAAA,GAAA,CAAA,IAAA,MAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA;AACA,CAAA,MAAA,EAAA;AACA,EAAA,EAAA,CAAA,MAAA,EAAA;AACA,GAAA,OAAA,CAAA,GAAA,MAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,MAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA,GAAA,CAAA,MAAA,EAAA;AACA,GAAA,IAAA,MAAA,GAAA,CAAA,GAAA,IAAA,EAAA;AACA,IAAA,OAAA,MAAA,GAAA,MAAA,GAAA,MAAA,CAAA;AACA,IAAA,MAAA,IAAA,MAAA,GAAA,CAAA,GAAA,IAAA,EAAA;AACA,IAAA,OAAA,MAAA,IAAA,MAAA,IAAA,GAAA,GAAA,IAAA,CAAA,GAAA,MAAA,GAAA,IAAA,CAAA;AACA,IAAA,MAAA,IAAA,MAAA,GAAA,GAAA,GAAA,IAAA,EAAA;AACA,IAAA,OAAA,MAAA,IAAA,MAAA,IAAA,IAAA,GAAA,IAAA,CAAA,GAAA,MAAA,GAAA,MAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,MAAA,IAAA,MAAA,IAAA,KAAA,GAAA,IAAA,CAAA,GAAA,MAAA,GAAA,QAAA,CAAA;AACA,GAAA;AACA,EAAA,KAAA,CAAA,MAAA,EAAA;AACA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA;AACA,IAAA,OAAA,MAAA,CAAA,MAAA,CAAA,EAAA,CAAA,MAAA,GAAA,CAAA,CAAA,GAAA,GAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,MAAA,CAAA,MAAA,CAAA,GAAA,CAAA,MAAA,GAAA,CAAA,GAAA,CAAA,CAAA,GAAA,GAAA,GAAA,GAAA,CAAA;AACA,GAAA;AACA,EAAA;AACA;;AC3NA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,aAAA,GAAA;AACA;AACA;AACA;AACA,CAAA,IAAA,EAAA;AACA;AACA;AACA;AACA,EAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,GAAA,MAAA,EAAA,GAAA,aAAA,CAAA,KAAA,CAAA,MAAA,CAAA;AACA;AACA,GAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA,IAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA,IAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAA,MAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,EAAA,GAAA,IAAA,CAAA,GAAA,CAAA;AACA,GAAA,MAAA,EAAA,GAAA,aAAA,CAAA,KAAA,CAAA,SAAA,CAAA;AACA;AACA,GAAA,KAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,IAAA,CAAA,EAAA,CAAA,EAAA,EAAA;AACA,IAAA,CAAA,IAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA;AACA;AACA;AACA;AACA,EAAA,eAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA;AACA,GAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACA,IAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,MAAA,EAAA,GAAA,IAAA,CAAA,GAAA,CAAA;AACA,GAAA,MAAA,EAAA,GAAA,aAAA,CAAA,KAAA,CAAA,SAAA,CAAA;AACA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,IAAA,GAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,GAAA,MAAA,EAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,GAAA,MAAA,EAAA,GAAA,EAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,EAAA,GAAA,EAAA,GAAA,CAAA,CAAA;AACA;AACA,GAAA,CAAA,IAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,GAAA,CAAA,IAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,GAAA,CAAA,IAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA;AACA,GAAA,OAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA;AACA;AACA;AACA;AACA,EAAA,WAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA;AACA,GAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACA,IAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,MAAA,EAAA,GAAA,IAAA,CAAA,GAAA,CAAA;AACA,GAAA,MAAA,EAAA,GAAA,aAAA,CAAA,KAAA,CAAA,SAAA,CAAA;AACA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,KAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA;AACA,GAAA,MAAA,EAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,GAAA,MAAA,EAAA,GAAA,EAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,EAAA,GAAA,EAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,EAAA,GAAA,EAAA,GAAA,CAAA,CAAA;AACA;AACA,GAAA,CAAA,IAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,GAAA,CAAA,IAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,GAAA,CAAA,IAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA,GAAA,CAAA,IAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,GAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AACA;AACA,GAAA,OAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAA,UAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA;AACA,GAAA,IAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,GAAA,MAAA,EAAA,GAAA,aAAA,CAAA,KAAA,CAAA,UAAA,CAAA;AACA;AACA,GAAA,IAAA,CAAA,CAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA,CAAA,EAAA;AACA,IAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA,KAAA,CAAA,GAAA,IAAA,CAAA,KAAA,EAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA;AACA,KAAA;AACA;AACA,IAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,IAAA;AACA,GAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA,IAAA,OAAA,CAAA,CAAA,CAAA,CAAA,IAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA,IAAA,OAAA,CAAA,CAAA,CAAA,CAAA,IAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA;AACA;AACA;AACA;AACA;AACA,CAAA,KAAA,EAAA;AACA;AACA;AACA;AACA,EAAA,OAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,GAAA,MAAA,EAAA,GAAA,aAAA,CAAA,KAAA,CAAA,UAAA,CAAA;AACA;AACA,GAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA,IAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,GAAA,IAAA,CAAA,EAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA,IAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,CAAA,EAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,IAAA,CAAA,EAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA;AACA;AACA;AACA,EAAA,OAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,GAAA,MAAA,EAAA,GAAA,aAAA,CAAA,KAAA,CAAA,UAAA,CAAA;AACA;AACA,GAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA,IAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,GAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA,IAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,GAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,EAAA,GAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA;AACA;AACA;AACA;AACA;AACA,CAAA,KAAA,EAAA;AACA;AACA;AACA;AACA,EAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,GAAA,MAAA,EAAA,GAAA,aAAA,CAAA,KAAA,CAAA,SAAA,CAAA;AACA;AACA,GAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA,IAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA,IAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA;AACA;AACA;AACA,EAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,GAAA,MAAA,EAAA,GAAA,aAAA,CAAA,KAAA,CAAA,SAAA,CAAA;AACA;AACA,GAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA,IAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA,IAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA;AACA;AACA;AACA;AACA,EAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,CAAA,MAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,GAAA,MAAA,EAAA,GAAA,aAAA,CAAA,KAAA,CAAA,SAAA,CAAA;AACA;AACA,GAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA,IAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,IAAA,CAAA,GAAA,CAAA,EAAA;AACA,IAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,GAAA;AACA,EAAA;AACA;AACA;AACA;AACA;AACA,CAAA,KAAA,EAAA;AACA,EAAA,QAAA,CAAA,KAAA,EAAA;AACA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,KAAA,IAAA,EAAA,IAAA,IAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,KAAA,IAAA,EAAA,IAAA,IAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,CAAA,KAAA,IAAA,CAAA,IAAA,IAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,KAAA,GAAA,IAAA,CAAA;AACA,GAAA,OAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AACA,GAAA;AACA,EAAA,QAAA,CAAA,KAAA,EAAA;AACA,GAAA,MAAA,GAAA,GAAA,aAAA,CAAA,KAAA,CAAA,QAAA,CAAA,KAAA,CAAA,CAAA;AACA;AACA,GAAA,CAAA,GAAA,CAAA,CAAA,IAAA,GAAA,IAAA,GAAA,CAAA,CAAA,IAAA,GAAA,IAAA,GAAA,CAAA,CAAA,IAAA,GAAA,CAAA,CAAA;AACA;AACA,GAAA,MAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,GAAA,CAAA,CAAA,EAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AACA,GAAA,MAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,EAAA,GAAA,CAAA,CAAA,EAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AACA,GAAA,IAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,GAAA,CAAA;AACA;AACA,GAAA,MAAA,CAAA,GAAA,GAAA,GAAA,GAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,GAAA,CAAA;AACA;AACA,GAAA,IAAA,GAAA,IAAA,GAAA,EAAA;AACA,IAAA,CAAA,GAAA,CAAA,CAAA;AACA,IAAA,MAAA;AACA,IAAA,QAAA,GAAA;AACA,KAAA,KAAA,GAAA,CAAA,CAAA;AACA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,GAAA,GAAA,CAAA,CAAA,IAAA,CAAA,IAAA,GAAA,CAAA,CAAA,GAAA,GAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,MAAA,MAAA;AACA,KAAA,KAAA,GAAA,CAAA,CAAA;AACA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,GAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA;AACA,MAAA,MAAA;AACA,KAAA,KAAA,GAAA,CAAA,CAAA;AACA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,GAAA,GAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA;AACA,MAAA,MAAA;AACA,KAAA;AACA;AACA,IAAA,CAAA,IAAA,CAAA,CAAA;AACA,IAAA;AACA;AACA,GAAA,OAAA,EAAA,CAAA,EAAA,GAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA;AACA,GAAA;AACA,EAAA,OAAA,CAAA,KAAA,EAAA;AACA,GAAA,IAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA;AACA;AACA,GAAA,MAAA,CAAA,GAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,KAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,GAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,GAAA,MAAA,CAAA,GAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,IAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA;AACA,GAAA,QAAA,CAAA,GAAA,CAAA;AACA,IAAA,KAAA,CAAA;AACA,KAAA,CAAA,CAAA,GAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,KAAA,MAAA;AACA,IAAA,KAAA,CAAA;AACA,KAAA,CAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,KAAA,CAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,KAAA,MAAA;AACA,IAAA,KAAA,CAAA;AACA,KAAA,CAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,KAA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AAA,OAAA,CAAA;AACA,IAAA,MAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,KAAA,QAAA,GAAA,KAAA,CAAA,CAAA,CAAA;AACA,IAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,GAAA,CAAA,KAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,IAAA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,CAAA;AACA,IAAA,MAAA,CAAA,GAAA,CAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAAA,IAAA,IAAA,CAAA,EAAA,GAAA,CAAA,CAAA;AACA,IAAA,IAAA,CAAA,CAAA;AACA,IAAA,CAAA,IAAA,CAAA,CAAA;AACA,IAAA,IAAA,CAAA,IAAA,KAAA,EAAA;AACA,KAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AACA,KAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AACA,KAAA,GAAA,CAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA;AACA,KAAA,MAAA,IAAA,CAAA,IAAA,KAAA,EAAA;AACA,KAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AACA,KAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AACA,KAAA,MAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACA,KAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AACA,KAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA;AACA,KAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AACA,KAAA,MAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACA,KAAA,CAAA,GAAA,IAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AACA,KAAA,GAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AACA,KAAA,GAAA,C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"}