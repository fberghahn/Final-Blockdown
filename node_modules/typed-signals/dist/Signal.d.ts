import { Collector } from "./Collector";
import { SignalConnection } from "./SignalConnection";
/**
 * A signal is a way to publish and subscribe to events.
 *
 * @typeparam THandler The function signature to be implemented by handlers.
 */
export declare class Signal<THandler extends (...args: any[]) => any> {
    private readonly head;
    private hasNewLinks;
    private emitDepth;
    private connectionsCount;
    /**
     * @returns The number of connections on this signal.
     */
    getConnectionsCount(): number;
    /**
     * @returns true if this signal has connections.
     */
    hasConnections(): boolean;
    /**
     * Subscribe to this signal.
     *
     * @param callback This callback will be run when emit() is called.
     * @param order Handlers with a higher order value will be called later.
     */
    connect(callback: THandler, order?: number): SignalConnection;
    private decrementConnectionCount;
    /**
     * Unsubscribe from this signal with the original callback instance.
     * While you can use this method, the SignalConnection returned by connect() will not be updated!
     *
     * @param callback The callback you passed to connect().
     */
    disconnect(callback: THandler): boolean;
    /**
     * Disconnect all handlers from this signal event.
     */
    disconnectAll(): void;
    /**
     * Publish this signal event (call all handlers).
     */
    emit(...args: Parameters<THandler>): void;
    protected emitCollecting(collector: Collector<THandler>, args: Parameters<THandler>): void;
    private unsetNewLink;
}
