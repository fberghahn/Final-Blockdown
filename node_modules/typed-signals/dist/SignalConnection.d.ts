import { SignalLink } from "./SignalLink";
/**
 * Represents a connection of a callback to a signal.
 */
export interface SignalConnection {
    /**
     * Stop this connection from receiving further events permanently.
     *
     * @returns false if the connection has already been severed.
     */
    disconnect(): boolean;
    /**
     * If set to false it prevents the handler from receiving the signals events.
     */
    enabled: boolean;
}
/**
 * Implementation of SignalConnection, for internal use only.
 * @private
 */
export declare class SignalConnectionImpl<THandler extends (...args: any[]) => any> implements SignalConnection {
    private link;
    private parentCleanup;
    /**
     * @param link The actual link of the connection.
     * @param parentCleanup Callback to cleanup the parent signal when a connection is disconnected
     */
    constructor(link: SignalLink<THandler>, parentCleanup: () => void);
    disconnect(): boolean;
    set enabled(enable: boolean);
    get enabled(): boolean;
}
